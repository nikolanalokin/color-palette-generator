function QC(e,t){for(var n=0;n<t.length;n++){const r=t[n];if(typeof r!="string"&&!Array.isArray(r)){for(const i in r)if(i!=="default"&&!(i in e)){const o=Object.getOwnPropertyDescriptor(r,i);o&&Object.defineProperty(e,i,o.get?o:{enumerable:!0,get:()=>r[i]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&r(a)}).observe(document,{childList:!0,subtree:!0});function n(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function r(i){if(i.ep)return;i.ep=!0;const o=n(i);fetch(i.href,o)}})();function g3(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var y3={exports:{}},rd={},v3={exports:{}},he={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Os=Symbol.for("react.element"),ZC=Symbol.for("react.portal"),JC=Symbol.for("react.fragment"),eE=Symbol.for("react.strict_mode"),tE=Symbol.for("react.profiler"),nE=Symbol.for("react.provider"),rE=Symbol.for("react.context"),iE=Symbol.for("react.forward_ref"),oE=Symbol.for("react.suspense"),aE=Symbol.for("react.memo"),lE=Symbol.for("react.lazy"),Lv=Symbol.iterator;function sE(e){return e===null||typeof e!="object"?null:(e=Lv&&e[Lv]||e["@@iterator"],typeof e=="function"?e:null)}var w3={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b3=Object.assign,x3={};function Ba(e,t,n){this.props=e,this.context=t,this.refs=x3,this.updater=n||w3}Ba.prototype.isReactComponent={};Ba.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};Ba.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function _3(){}_3.prototype=Ba.prototype;function ng(e,t,n){this.props=e,this.context=t,this.refs=x3,this.updater=n||w3}var rg=ng.prototype=new _3;rg.constructor=ng;b3(rg,Ba.prototype);rg.isPureReactComponent=!0;var Ov=Array.isArray,S3=Object.prototype.hasOwnProperty,ig={current:null},M3={key:!0,ref:!0,__self:!0,__source:!0};function C3(e,t,n){var r,i={},o=null,a=null;if(t!=null)for(r in t.ref!==void 0&&(a=t.ref),t.key!==void 0&&(o=""+t.key),t)S3.call(t,r)&&!M3.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(l===1)i.children=n;else if(1<l){for(var s=Array(l),u=0;u<l;u++)s[u]=arguments[u+2];i.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps,l)i[r]===void 0&&(i[r]=l[r]);return{$$typeof:Os,type:e,key:o,ref:a,props:i,_owner:ig.current}}function uE(e,t){return{$$typeof:Os,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function og(e){return typeof e=="object"&&e!==null&&e.$$typeof===Os}function cE(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var Dv=/\/+/g;function z0(e,t){return typeof e=="object"&&e!==null&&e.key!=null?cE(""+e.key):t.toString(36)}function sc(e,t,n,r,i){var o=typeof e;(o==="undefined"||o==="boolean")&&(e=null);var a=!1;if(e===null)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case Os:case ZC:a=!0}}if(a)return a=e,i=i(a),e=r===""?"."+z0(a,0):r,Ov(i)?(n="",e!=null&&(n=e.replace(Dv,"$&/")+"/"),sc(i,t,n,"",function(u){return u})):i!=null&&(og(i)&&(i=uE(i,n+(!i.key||a&&a.key===i.key?"":(""+i.key).replace(Dv,"$&/")+"/")+e)),t.push(i)),1;if(a=0,r=r===""?".":r+":",Ov(e))for(var l=0;l<e.length;l++){o=e[l];var s=r+z0(o,l);a+=sc(o,t,n,s,i)}else if(s=sE(e),typeof s=="function")for(e=s.call(e),l=0;!(o=e.next()).done;)o=o.value,s=r+z0(o,l++),a+=sc(o,t,n,s,i);else if(o==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function vu(e,t,n){if(e==null)return e;var r=[],i=0;return sc(e,r,"","",function(o){return t.call(n,o,i++)}),r}function fE(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Et={current:null},uc={transition:null},dE={ReactCurrentDispatcher:Et,ReactCurrentBatchConfig:uc,ReactCurrentOwner:ig};function E3(){throw Error("act(...) is not supported in production builds of React.")}he.Children={map:vu,forEach:function(e,t,n){vu(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return vu(e,function(){t++}),t},toArray:function(e){return vu(e,function(t){return t})||[]},only:function(e){if(!og(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};he.Component=Ba;he.Fragment=JC;he.Profiler=tE;he.PureComponent=ng;he.StrictMode=eE;he.Suspense=oE;he.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=dE;he.act=E3;he.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=b3({},e.props),i=e.key,o=e.ref,a=e._owner;if(t!=null){if(t.ref!==void 0&&(o=t.ref,a=ig.current),t.key!==void 0&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)S3.call(t,s)&&!M3.hasOwnProperty(s)&&(r[s]=t[s]===void 0&&l!==void 0?l[s]:t[s])}var s=arguments.length-2;if(s===1)r.children=n;else if(1<s){l=Array(s);for(var u=0;u<s;u++)l[u]=arguments[u+2];r.children=l}return{$$typeof:Os,type:e.type,key:i,ref:o,props:r,_owner:a}};he.createContext=function(e){return e={$$typeof:rE,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:nE,_context:e},e.Consumer=e};he.createElement=C3;he.createFactory=function(e){var t=C3.bind(null,e);return t.type=e,t};he.createRef=function(){return{current:null}};he.forwardRef=function(e){return{$$typeof:iE,render:e}};he.isValidElement=og;he.lazy=function(e){return{$$typeof:lE,_payload:{_status:-1,_result:e},_init:fE}};he.memo=function(e,t){return{$$typeof:aE,type:e,compare:t===void 0?null:t}};he.startTransition=function(e){var t=uc.transition;uc.transition={};try{e()}finally{uc.transition=t}};he.unstable_act=E3;he.useCallback=function(e,t){return Et.current.useCallback(e,t)};he.useContext=function(e){return Et.current.useContext(e)};he.useDebugValue=function(){};he.useDeferredValue=function(e){return Et.current.useDeferredValue(e)};he.useEffect=function(e,t){return Et.current.useEffect(e,t)};he.useId=function(){return Et.current.useId()};he.useImperativeHandle=function(e,t,n){return Et.current.useImperativeHandle(e,t,n)};he.useInsertionEffect=function(e,t){return Et.current.useInsertionEffect(e,t)};he.useLayoutEffect=function(e,t){return Et.current.useLayoutEffect(e,t)};he.useMemo=function(e,t){return Et.current.useMemo(e,t)};he.useReducer=function(e,t,n){return Et.current.useReducer(e,t,n)};he.useRef=function(e){return Et.current.useRef(e)};he.useState=function(e){return Et.current.useState(e)};he.useSyncExternalStore=function(e,t,n){return Et.current.useSyncExternalStore(e,t,n)};he.useTransition=function(){return Et.current.useTransition()};he.version="18.3.1";v3.exports=he;var x=v3.exports;const Fr=g3(x),Ac=QC({__proto__:null,default:Fr},[x]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var hE=x,pE=Symbol.for("react.element"),mE=Symbol.for("react.fragment"),gE=Object.prototype.hasOwnProperty,yE=hE.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,vE={key:!0,ref:!0,__self:!0,__source:!0};function k3(e,t,n){var r,i={},o=null,a=null;n!==void 0&&(o=""+n),t.key!==void 0&&(o=""+t.key),t.ref!==void 0&&(a=t.ref);for(r in t)gE.call(t,r)&&!vE.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)i[r]===void 0&&(i[r]=t[r]);return{$$typeof:pE,type:e,key:o,ref:a,props:i,_owner:yE.current}}rd.Fragment=mE;rd.jsx=k3;rd.jsxs=k3;y3.exports=rd;var K=y3.exports,wE=!1;function bE(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}function xE(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),e.nonce!==void 0&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}var _E=function(){function e(n){var r=this;this._insertTag=function(i){var o;r.tags.length===0?r.insertionPoint?o=r.insertionPoint.nextSibling:r.prepend?o=r.container.firstChild:o=r.before:o=r.tags[r.tags.length-1].nextSibling,r.container.insertBefore(i,o),r.tags.push(i)},this.isSpeedy=n.speedy===void 0?!wE:n.speedy,this.tags=[],this.ctr=0,this.nonce=n.nonce,this.key=n.key,this.container=n.container,this.prepend=n.prepend,this.insertionPoint=n.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(r){r.forEach(this._insertTag)},t.insert=function(r){this.ctr%(this.isSpeedy?65e3:1)===0&&this._insertTag(xE(this));var i=this.tags[this.tags.length-1];if(this.isSpeedy){var o=bE(i);try{o.insertRule(r,o.cssRules.length)}catch{}}else i.appendChild(document.createTextNode(r));this.ctr++},t.flush=function(){this.tags.forEach(function(r){var i;return(i=r.parentNode)==null?void 0:i.removeChild(r)}),this.tags=[],this.ctr=0},e}(),ht="-ms-",Ic="-moz-",ye="-webkit-",T3="comm",ag="rule",lg="decl",SE="@import",$3="@keyframes",ME="@layer",CE=Math.abs,id=String.fromCharCode,EE=Object.assign;function kE(e,t){return at(e,0)^45?(((t<<2^at(e,0))<<2^at(e,1))<<2^at(e,2))<<2^at(e,3):0}function P3(e){return e.trim()}function TE(e,t){return(e=t.exec(e))?e[0]:e}function ve(e,t,n){return e.replace(t,n)}function Op(e,t){return e.indexOf(t)}function at(e,t){return e.charCodeAt(t)|0}function Xl(e,t,n){return e.slice(t,n)}function In(e){return e.length}function sg(e){return e.length}function wu(e,t){return t.push(e),e}function $E(e,t){return e.map(t).join("")}var od=1,ha=1,R3=0,Lt=0,Be=0,Ha="";function ad(e,t,n,r,i,o,a){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:od,column:ha,length:a,return:""}}function nl(e,t){return EE(ad("",null,null,"",null,null,0),e,{length:-e.length},t)}function PE(){return Be}function RE(){return Be=Lt>0?at(Ha,--Lt):0,ha--,Be===10&&(ha=1,od--),Be}function Ht(){return Be=Lt<R3?at(Ha,Lt++):0,ha++,Be===10&&(ha=1,od++),Be}function Wn(){return at(Ha,Lt)}function cc(){return Lt}function Ds(e,t){return Xl(Ha,e,t)}function Gl(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function N3(e){return od=ha=1,R3=In(Ha=e),Lt=0,[]}function A3(e){return Ha="",e}function fc(e){return P3(Ds(Lt-1,Dp(e===91?e+2:e===40?e+1:e)))}function NE(e){for(;(Be=Wn())&&Be<33;)Ht();return Gl(e)>2||Gl(Be)>3?"":" "}function AE(e,t){for(;--t&&Ht()&&!(Be<48||Be>102||Be>57&&Be<65||Be>70&&Be<97););return Ds(e,cc()+(t<6&&Wn()==32&&Ht()==32))}function Dp(e){for(;Ht();)switch(Be){case e:return Lt;case 34:case 39:e!==34&&e!==39&&Dp(Be);break;case 40:e===41&&Dp(e);break;case 92:Ht();break}return Lt}function IE(e,t){for(;Ht()&&e+Be!==57;)if(e+Be===84&&Wn()===47)break;return"/*"+Ds(t,Lt-1)+"*"+id(e===47?e:Ht())}function LE(e){for(;!Gl(Wn());)Ht();return Ds(e,Lt)}function OE(e){return A3(dc("",null,null,null,[""],e=N3(e),0,[0],e))}function dc(e,t,n,r,i,o,a,l,s){for(var u=0,c=0,f=a,d=0,h=0,m=0,p=1,w=1,y=1,g=0,v="",b=i,_=o,M=r,S=v;w;)switch(m=g,g=Ht()){case 40:if(m!=108&&at(S,f-1)==58){Op(S+=ve(fc(g),"&","&\f"),"&\f")!=-1&&(y=-1);break}case 34:case 39:case 91:S+=fc(g);break;case 9:case 10:case 13:case 32:S+=NE(m);break;case 92:S+=AE(cc()-1,7);continue;case 47:switch(Wn()){case 42:case 47:wu(DE(IE(Ht(),cc()),t,n),s);break;default:S+="/"}break;case 123*p:l[u++]=In(S)*y;case 125*p:case 59:case 0:switch(g){case 0:case 125:w=0;case 59+c:y==-1&&(S=ve(S,/\f/g,"")),h>0&&In(S)-f&&wu(h>32?Fv(S+";",r,n,f-1):Fv(ve(S," ","")+";",r,n,f-2),s);break;case 59:S+=";";default:if(wu(M=zv(S,t,n,u,c,i,l,v,b=[],_=[],f),o),g===123)if(c===0)dc(S,t,M,M,b,o,f,l,_);else switch(d===99&&at(S,3)===110?100:d){case 100:case 108:case 109:case 115:dc(e,M,M,r&&wu(zv(e,M,M,0,0,i,l,v,i,b=[],f),_),i,_,f,l,r?b:_);break;default:dc(S,M,M,M,[""],_,0,l,_)}}u=c=h=0,p=y=1,v=S="",f=a;break;case 58:f=1+In(S),h=m;default:if(p<1){if(g==123)--p;else if(g==125&&p++==0&&RE()==125)continue}switch(S+=id(g),g*p){case 38:y=c>0?1:(S+="\f",-1);break;case 44:l[u++]=(In(S)-1)*y,y=1;break;case 64:Wn()===45&&(S+=fc(Ht())),d=Wn(),c=f=In(v=S+=LE(cc())),g++;break;case 45:m===45&&In(S)==2&&(p=0)}}return o}function zv(e,t,n,r,i,o,a,l,s,u,c){for(var f=i-1,d=i===0?o:[""],h=sg(d),m=0,p=0,w=0;m<r;++m)for(var y=0,g=Xl(e,f+1,f=CE(p=a[m])),v=e;y<h;++y)(v=P3(p>0?d[y]+" "+g:ve(g,/&\f/g,d[y])))&&(s[w++]=v);return ad(e,t,n,i===0?ag:l,s,u,c)}function DE(e,t,n){return ad(e,t,n,T3,id(PE()),Xl(e,2,-2),0)}function Fv(e,t,n,r){return ad(e,t,n,lg,Xl(e,0,r),Xl(e,r+1,-1),r)}function Zo(e,t){for(var n="",r=sg(e),i=0;i<r;i++)n+=t(e[i],i,e,t)||"";return n}function zE(e,t,n,r){switch(e.type){case ME:if(e.children.length)break;case SE:case lg:return e.return=e.return||e.value;case T3:return"";case $3:return e.return=e.value+"{"+Zo(e.children,r)+"}";case ag:e.value=e.props.join(",")}return In(n=Zo(e.children,r))?e.return=e.value+"{"+n+"}":""}function FE(e){var t=sg(e);return function(n,r,i,o){for(var a="",l=0;l<t;l++)a+=e[l](n,r,i,o)||"";return a}}function BE(e){return function(t){t.root||(t=t.return)&&e(t)}}function I3(e){var t=Object.create(null);return function(n){return t[n]===void 0&&(t[n]=e(n)),t[n]}}var HE=function(t,n,r){for(var i=0,o=0;i=o,o=Wn(),i===38&&o===12&&(n[r]=1),!Gl(o);)Ht();return Ds(t,Lt)},UE=function(t,n){var r=-1,i=44;do switch(Gl(i)){case 0:i===38&&Wn()===12&&(n[r]=1),t[r]+=HE(Lt-1,n,r);break;case 2:t[r]+=fc(i);break;case 4:if(i===44){t[++r]=Wn()===58?"&\f":"",n[r]=t[r].length;break}default:t[r]+=id(i)}while(i=Ht());return t},WE=function(t,n){return A3(UE(N3(t),n))},Bv=new WeakMap,jE=function(t){if(!(t.type!=="rule"||!t.parent||t.length<1)){for(var n=t.value,r=t.parent,i=t.column===r.column&&t.line===r.line;r.type!=="rule";)if(r=r.parent,!r)return;if(!(t.props.length===1&&n.charCodeAt(0)!==58&&!Bv.get(r))&&!i){Bv.set(t,!0);for(var o=[],a=WE(n,o),l=r.props,s=0,u=0;s<a.length;s++)for(var c=0;c<l.length;c++,u++)t.props[u]=o[s]?a[s].replace(/&\f/g,l[c]):l[c]+" "+a[s]}}},VE=function(t){if(t.type==="decl"){var n=t.value;n.charCodeAt(0)===108&&n.charCodeAt(2)===98&&(t.return="",t.value="")}};function L3(e,t){switch(kE(e,t)){case 5103:return ye+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return ye+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return ye+e+Ic+e+ht+e+e;case 6828:case 4268:return ye+e+ht+e+e;case 6165:return ye+e+ht+"flex-"+e+e;case 5187:return ye+e+ve(e,/(\w+).+(:[^]+)/,ye+"box-$1$2"+ht+"flex-$1$2")+e;case 5443:return ye+e+ht+"flex-item-"+ve(e,/flex-|-self/,"")+e;case 4675:return ye+e+ht+"flex-line-pack"+ve(e,/align-content|flex-|-self/,"")+e;case 5548:return ye+e+ht+ve(e,"shrink","negative")+e;case 5292:return ye+e+ht+ve(e,"basis","preferred-size")+e;case 6060:return ye+"box-"+ve(e,"-grow","")+ye+e+ht+ve(e,"grow","positive")+e;case 4554:return ye+ve(e,/([^-])(transform)/g,"$1"+ye+"$2")+e;case 6187:return ve(ve(ve(e,/(zoom-|grab)/,ye+"$1"),/(image-set)/,ye+"$1"),e,"")+e;case 5495:case 3959:return ve(e,/(image-set\([^]*)/,ye+"$1$`$1");case 4968:return ve(ve(e,/(.+:)(flex-)?(.*)/,ye+"box-pack:$3"+ht+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+ye+e+e;case 4095:case 3583:case 4068:case 2532:return ve(e,/(.+)-inline(.+)/,ye+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(In(e)-1-t>6)switch(at(e,t+1)){case 109:if(at(e,t+4)!==45)break;case 102:return ve(e,/(.+:)(.+)-([^]+)/,"$1"+ye+"$2-$3$1"+Ic+(at(e,t+3)==108?"$3":"$2-$3"))+e;case 115:return~Op(e,"stretch")?L3(ve(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(at(e,t+1)!==115)break;case 6444:switch(at(e,In(e)-3-(~Op(e,"!important")&&10))){case 107:return ve(e,":",":"+ye)+e;case 101:return ve(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+ye+(at(e,14)===45?"inline-":"")+"box$3$1"+ye+"$2$3$1"+ht+"$2box$3")+e}break;case 5936:switch(at(e,t+11)){case 114:return ye+e+ht+ve(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return ye+e+ht+ve(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return ye+e+ht+ve(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return ye+e+ht+e+e}return e}var qE=function(t,n,r,i){if(t.length>-1&&!t.return)switch(t.type){case lg:t.return=L3(t.value,t.length);break;case $3:return Zo([nl(t,{value:ve(t.value,"@","@"+ye)})],i);case ag:if(t.length)return $E(t.props,function(o){switch(TE(o,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return Zo([nl(t,{props:[ve(o,/:(read-\w+)/,":"+Ic+"$1")]})],i);case"::placeholder":return Zo([nl(t,{props:[ve(o,/:(plac\w+)/,":"+ye+"input-$1")]}),nl(t,{props:[ve(o,/:(plac\w+)/,":"+Ic+"$1")]}),nl(t,{props:[ve(o,/:(plac\w+)/,ht+"input-$1")]})],i)}return""})}},YE=[qE],XE=function(t){var n=t.key;if(n==="css"){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,function(p){var w=p.getAttribute("data-emotion");w.indexOf(" ")!==-1&&(document.head.appendChild(p),p.setAttribute("data-s",""))})}var i=t.stylisPlugins||YE,o={},a,l=[];a=t.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+n+' "]'),function(p){for(var w=p.getAttribute("data-emotion").split(" "),y=1;y<w.length;y++)o[w[y]]=!0;l.push(p)});var s,u=[jE,VE];{var c,f=[zE,BE(function(p){c.insert(p)})],d=FE(u.concat(i,f)),h=function(w){return Zo(OE(w),d)};s=function(w,y,g,v){c=g,h(w?w+"{"+y.styles+"}":y.styles),v&&(m.inserted[y.name]=!0)}}var m={key:n,sheet:new _E({key:n,container:a,nonce:t.nonce,speedy:t.speedy,prepend:t.prepend,insertionPoint:t.insertionPoint}),nonce:t.nonce,inserted:o,registered:{},insert:s};return m.sheet.hydrate(l),m};function zp(){return zp=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},zp.apply(null,arguments)}var O3={exports:{}},_e={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var tt=typeof Symbol=="function"&&Symbol.for,ug=tt?Symbol.for("react.element"):60103,cg=tt?Symbol.for("react.portal"):60106,ld=tt?Symbol.for("react.fragment"):60107,sd=tt?Symbol.for("react.strict_mode"):60108,ud=tt?Symbol.for("react.profiler"):60114,cd=tt?Symbol.for("react.provider"):60109,fd=tt?Symbol.for("react.context"):60110,fg=tt?Symbol.for("react.async_mode"):60111,dd=tt?Symbol.for("react.concurrent_mode"):60111,hd=tt?Symbol.for("react.forward_ref"):60112,pd=tt?Symbol.for("react.suspense"):60113,GE=tt?Symbol.for("react.suspense_list"):60120,md=tt?Symbol.for("react.memo"):60115,gd=tt?Symbol.for("react.lazy"):60116,KE=tt?Symbol.for("react.block"):60121,QE=tt?Symbol.for("react.fundamental"):60117,ZE=tt?Symbol.for("react.responder"):60118,JE=tt?Symbol.for("react.scope"):60119;function Xt(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case ug:switch(e=e.type,e){case fg:case dd:case ld:case ud:case sd:case pd:return e;default:switch(e=e&&e.$$typeof,e){case fd:case hd:case gd:case md:case cd:return e;default:return t}}case cg:return t}}}function D3(e){return Xt(e)===dd}_e.AsyncMode=fg;_e.ConcurrentMode=dd;_e.ContextConsumer=fd;_e.ContextProvider=cd;_e.Element=ug;_e.ForwardRef=hd;_e.Fragment=ld;_e.Lazy=gd;_e.Memo=md;_e.Portal=cg;_e.Profiler=ud;_e.StrictMode=sd;_e.Suspense=pd;_e.isAsyncMode=function(e){return D3(e)||Xt(e)===fg};_e.isConcurrentMode=D3;_e.isContextConsumer=function(e){return Xt(e)===fd};_e.isContextProvider=function(e){return Xt(e)===cd};_e.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===ug};_e.isForwardRef=function(e){return Xt(e)===hd};_e.isFragment=function(e){return Xt(e)===ld};_e.isLazy=function(e){return Xt(e)===gd};_e.isMemo=function(e){return Xt(e)===md};_e.isPortal=function(e){return Xt(e)===cg};_e.isProfiler=function(e){return Xt(e)===ud};_e.isStrictMode=function(e){return Xt(e)===sd};_e.isSuspense=function(e){return Xt(e)===pd};_e.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===ld||e===dd||e===ud||e===sd||e===pd||e===GE||typeof e=="object"&&e!==null&&(e.$$typeof===gd||e.$$typeof===md||e.$$typeof===cd||e.$$typeof===fd||e.$$typeof===hd||e.$$typeof===QE||e.$$typeof===ZE||e.$$typeof===JE||e.$$typeof===KE)};_e.typeOf=Xt;O3.exports=_e;var ek=O3.exports,z3=ek,tk={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},nk={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},F3={};F3[z3.ForwardRef]=tk;F3[z3.Memo]=nk;var rk=!0;function B3(e,t,n){var r="";return n.split(" ").forEach(function(i){e[i]!==void 0?t.push(e[i]+";"):i&&(r+=i+" ")}),r}var dg=function(t,n,r){var i=t.key+"-"+n.name;(r===!1||rk===!1)&&t.registered[i]===void 0&&(t.registered[i]=n.styles)},hg=function(t,n,r){dg(t,n,r);var i=t.key+"-"+n.name;if(t.inserted[n.name]===void 0){var o=n;do t.insert(n===o?"."+i:"",o,t.sheet,!0),o=o.next;while(o!==void 0)}};function ik(e){for(var t=0,n,r=0,i=e.length;i>=4;++r,i-=4)n=e.charCodeAt(r)&255|(e.charCodeAt(++r)&255)<<8|(e.charCodeAt(++r)&255)<<16|(e.charCodeAt(++r)&255)<<24,n=(n&65535)*1540483477+((n>>>16)*59797<<16),n^=n>>>24,t=(n&65535)*1540483477+((n>>>16)*59797<<16)^(t&65535)*1540483477+((t>>>16)*59797<<16);switch(i){case 3:t^=(e.charCodeAt(r+2)&255)<<16;case 2:t^=(e.charCodeAt(r+1)&255)<<8;case 1:t^=e.charCodeAt(r)&255,t=(t&65535)*1540483477+((t>>>16)*59797<<16)}return t^=t>>>13,t=(t&65535)*1540483477+((t>>>16)*59797<<16),((t^t>>>15)>>>0).toString(36)}var ok={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ak=!1,lk=/[A-Z]|^ms/g,sk=/_EMO_([^_]+?)_([^]*?)_EMO_/g,H3=function(t){return t.charCodeAt(1)===45},Hv=function(t){return t!=null&&typeof t!="boolean"},F0=I3(function(e){return H3(e)?e:e.replace(lk,"-$&").toLowerCase()}),Uv=function(t,n){switch(t){case"animation":case"animationName":if(typeof n=="string")return n.replace(sk,function(r,i,o){return Ln={name:i,styles:o,next:Ln},i})}return ok[t]!==1&&!H3(t)&&typeof n=="number"&&n!==0?n+"px":n},uk="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function Kl(e,t,n){if(n==null)return"";var r=n;if(r.__emotion_styles!==void 0)return r;switch(typeof n){case"boolean":return"";case"object":{var i=n;if(i.anim===1)return Ln={name:i.name,styles:i.styles,next:Ln},i.name;var o=n;if(o.styles!==void 0){var a=o.next;if(a!==void 0)for(;a!==void 0;)Ln={name:a.name,styles:a.styles,next:Ln},a=a.next;var l=o.styles+";";return l}return ck(e,t,n)}case"function":{if(e!==void 0){var s=Ln,u=n(e);return Ln=s,Kl(e,t,u)}break}}var c=n;if(t==null)return c;var f=t[c];return f!==void 0?f:c}function ck(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=Kl(e,t,n[i])+";";else for(var o in n){var a=n[o];if(typeof a!="object"){var l=a;t!=null&&t[l]!==void 0?r+=o+"{"+t[l]+"}":Hv(l)&&(r+=F0(o)+":"+Uv(o,l)+";")}else{if(o==="NO_COMPONENT_SELECTOR"&&ak)throw new Error(uk);if(Array.isArray(a)&&typeof a[0]=="string"&&(t==null||t[a[0]]===void 0))for(var s=0;s<a.length;s++)Hv(a[s])&&(r+=F0(o)+":"+Uv(o,a[s])+";");else{var u=Kl(e,t,a);switch(o){case"animation":case"animationName":{r+=F0(o)+":"+u+";";break}default:r+=o+"{"+u+"}"}}}}return r}var Wv=/label:\s*([^\s;{]+)\s*(;|$)/g,Ln;function yd(e,t,n){if(e.length===1&&typeof e[0]=="object"&&e[0]!==null&&e[0].styles!==void 0)return e[0];var r=!0,i="";Ln=void 0;var o=e[0];if(o==null||o.raw===void 0)r=!1,i+=Kl(n,t,o);else{var a=o;i+=a[0]}for(var l=1;l<e.length;l++)if(i+=Kl(n,t,e[l]),r){var s=o;i+=s[l]}Wv.lastIndex=0;for(var u="",c;(c=Wv.exec(i))!==null;)u+="-"+c[1];var f=ik(i)+u;return{name:f,styles:i,next:Ln}}var fk=function(t){return t()},U3=Ac.useInsertionEffect?Ac.useInsertionEffect:!1,W3=U3||fk,jv=U3||x.useLayoutEffect,dk=!1,j3=x.createContext(typeof HTMLElement<"u"?XE({key:"css"}):null);j3.Provider;var pg=function(t){return x.forwardRef(function(n,r){var i=x.useContext(j3);return t(n,i,r)})},mg=x.createContext({}),vd={}.hasOwnProperty,Fp="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",V3=function(t,n){var r={};for(var i in n)vd.call(n,i)&&(r[i]=n[i]);return r[Fp]=t,r},hk=function(t){var n=t.cache,r=t.serialized,i=t.isStringTag;return dg(n,r,i),W3(function(){return hg(n,r,i)}),null},pk=pg(function(e,t,n){var r=e.css;typeof r=="string"&&t.registered[r]!==void 0&&(r=t.registered[r]);var i=e[Fp],o=[r],a="";typeof e.className=="string"?a=B3(t.registered,o,e.className):e.className!=null&&(a=e.className+" ");var l=yd(o,void 0,x.useContext(mg));a+=t.key+"-"+l.name;var s={};for(var u in e)vd.call(e,u)&&u!=="css"&&u!==Fp&&!dk&&(s[u]=e[u]);return s.className=a,n&&(s.ref=n),x.createElement(x.Fragment,null,x.createElement(hk,{cache:t,serialized:l,isStringTag:typeof i=="string"}),x.createElement(i,s))}),q3=pk,mk=K.Fragment;function W(e,t,n){return vd.call(t,"css")?K.jsx(q3,V3(e,t),n):K.jsx(e,t,n)}function de(e,t,n){return vd.call(t,"css")?K.jsxs(q3,V3(e,t),n):K.jsxs(e,t,n)}var Y3={exports:{}},Gt={},X3={exports:{}},G3={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(T,R){var A=T.length;T.push(R);e:for(;0<A;){var L=A-1>>>1,H=T[L];if(0<i(H,R))T[L]=R,T[A]=H,A=L;else break e}}function n(T){return T.length===0?null:T[0]}function r(T){if(T.length===0)return null;var R=T[0],A=T.pop();if(A!==R){T[0]=A;e:for(var L=0,H=T.length,G=H>>>1;L<G;){var J=2*(L+1)-1,te=T[J],Z=J+1,B=T[Z];if(0>i(te,A))Z<H&&0>i(B,te)?(T[L]=B,T[Z]=A,L=Z):(T[L]=te,T[J]=A,L=J);else if(Z<H&&0>i(B,A))T[L]=B,T[Z]=A,L=Z;else break e}}return R}function i(T,R){var A=T.sortIndex-R.sortIndex;return A!==0?A:T.id-R.id}if(typeof performance=="object"&&typeof performance.now=="function"){var o=performance;e.unstable_now=function(){return o.now()}}else{var a=Date,l=a.now();e.unstable_now=function(){return a.now()-l}}var s=[],u=[],c=1,f=null,d=3,h=!1,m=!1,p=!1,w=typeof setTimeout=="function"?setTimeout:null,y=typeof clearTimeout=="function"?clearTimeout:null,g=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function v(T){for(var R=n(u);R!==null;){if(R.callback===null)r(u);else if(R.startTime<=T)r(u),R.sortIndex=R.expirationTime,t(s,R);else break;R=n(u)}}function b(T){if(p=!1,v(T),!m)if(n(s)!==null)m=!0,I(_);else{var R=n(u);R!==null&&z(b,R.startTime-T)}}function _(T,R){m=!1,p&&(p=!1,y(C),C=-1),h=!0;var A=d;try{for(v(R),f=n(s);f!==null&&(!(f.expirationTime>R)||T&&!E());){var L=f.callback;if(typeof L=="function"){f.callback=null,d=f.priorityLevel;var H=L(f.expirationTime<=R);R=e.unstable_now(),typeof H=="function"?f.callback=H:f===n(s)&&r(s),v(R)}else r(s);f=n(s)}if(f!==null)var G=!0;else{var J=n(u);J!==null&&z(b,J.startTime-R),G=!1}return G}finally{f=null,d=A,h=!1}}var M=!1,S=null,C=-1,k=5,$=-1;function E(){return!(e.unstable_now()-$<k)}function U(){if(S!==null){var T=e.unstable_now();$=T;var R=!0;try{R=S(!0,T)}finally{R?D():(M=!1,S=null)}}else M=!1}var D;if(typeof g=="function")D=function(){g(U)};else if(typeof MessageChannel<"u"){var N=new MessageChannel,P=N.port2;N.port1.onmessage=U,D=function(){P.postMessage(null)}}else D=function(){w(U,0)};function I(T){S=T,M||(M=!0,D())}function z(T,R){C=w(function(){T(e.unstable_now())},R)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(T){T.callback=null},e.unstable_continueExecution=function(){m||h||(m=!0,I(_))},e.unstable_forceFrameRate=function(T){0>T||125<T?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):k=0<T?Math.floor(1e3/T):5},e.unstable_getCurrentPriorityLevel=function(){return d},e.unstable_getFirstCallbackNode=function(){return n(s)},e.unstable_next=function(T){switch(d){case 1:case 2:case 3:var R=3;break;default:R=d}var A=d;d=R;try{return T()}finally{d=A}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(T,R){switch(T){case 1:case 2:case 3:case 4:case 5:break;default:T=3}var A=d;d=T;try{return R()}finally{d=A}},e.unstable_scheduleCallback=function(T,R,A){var L=e.unstable_now();switch(typeof A=="object"&&A!==null?(A=A.delay,A=typeof A=="number"&&0<A?L+A:L):A=L,T){case 1:var H=-1;break;case 2:H=250;break;case 5:H=1073741823;break;case 4:H=1e4;break;default:H=5e3}return H=A+H,T={id:c++,callback:R,priorityLevel:T,startTime:A,expirationTime:H,sortIndex:-1},A>L?(T.sortIndex=A,t(u,T),n(s)===null&&T===n(u)&&(p?(y(C),C=-1):p=!0,z(b,A-L))):(T.sortIndex=H,t(s,T),m||h||(m=!0,I(_))),T},e.unstable_shouldYield=E,e.unstable_wrapCallback=function(T){var R=d;return function(){var A=d;d=R;try{return T.apply(this,arguments)}finally{d=A}}}})(G3);X3.exports=G3;var gk=X3.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var yk=x,Wt=gk;function q(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var K3=new Set,Ql={};function yo(e,t){pa(e,t),pa(e+"Capture",t)}function pa(e,t){for(Ql[e]=t,e=0;e<t.length;e++)K3.add(t[e])}var xr=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Bp=Object.prototype.hasOwnProperty,vk=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Vv={},qv={};function wk(e){return Bp.call(qv,e)?!0:Bp.call(Vv,e)?!1:vk.test(e)?qv[e]=!0:(Vv[e]=!0,!1)}function bk(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function xk(e,t,n,r){if(t===null||typeof t>"u"||bk(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function kt(e,t,n,r,i,o,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var st={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){st[e]=new kt(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];st[t]=new kt(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){st[e]=new kt(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){st[e]=new kt(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){st[e]=new kt(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){st[e]=new kt(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){st[e]=new kt(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){st[e]=new kt(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){st[e]=new kt(e,5,!1,e.toLowerCase(),null,!1,!1)});var gg=/[\-:]([a-z])/g;function yg(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(gg,yg);st[t]=new kt(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(gg,yg);st[t]=new kt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(gg,yg);st[t]=new kt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){st[e]=new kt(e,1,!1,e.toLowerCase(),null,!1,!1)});st.xlinkHref=new kt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){st[e]=new kt(e,1,!1,e.toLowerCase(),null,!0,!0)});function vg(e,t,n,r){var i=st.hasOwnProperty(t)?st[t]:null;(i!==null?i.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(xk(t,n,i,r)&&(n=null),r||i===null?wk(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=n===null?i.type===3?!1:"":n:(t=i.attributeName,r=i.attributeNamespace,n===null?e.removeAttribute(t):(i=i.type,n=i===3||i===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var Nr=yk.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,bu=Symbol.for("react.element"),Oo=Symbol.for("react.portal"),Do=Symbol.for("react.fragment"),wg=Symbol.for("react.strict_mode"),Hp=Symbol.for("react.profiler"),Q3=Symbol.for("react.provider"),Z3=Symbol.for("react.context"),bg=Symbol.for("react.forward_ref"),Up=Symbol.for("react.suspense"),Wp=Symbol.for("react.suspense_list"),xg=Symbol.for("react.memo"),Ur=Symbol.for("react.lazy"),J3=Symbol.for("react.offscreen"),Yv=Symbol.iterator;function rl(e){return e===null||typeof e!="object"?null:(e=Yv&&e[Yv]||e["@@iterator"],typeof e=="function"?e:null)}var Ne=Object.assign,B0;function wl(e){if(B0===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);B0=t&&t[1]||""}return`
`+B0+e}var H0=!1;function U0(e,t){if(!e||H0)return"";H0=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(u){var r=u}Reflect.construct(e,[],t)}else{try{t.call()}catch(u){r=u}e.call(t.prototype)}else{try{throw Error()}catch(u){r=u}e()}}catch(u){if(u&&r&&typeof u.stack=="string"){for(var i=u.stack.split(`
`),o=r.stack.split(`
`),a=i.length-1,l=o.length-1;1<=a&&0<=l&&i[a]!==o[l];)l--;for(;1<=a&&0<=l;a--,l--)if(i[a]!==o[l]){if(a!==1||l!==1)do if(a--,l--,0>l||i[a]!==o[l]){var s=`
`+i[a].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}while(1<=a&&0<=l);break}}}finally{H0=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?wl(e):""}function _k(e){switch(e.tag){case 5:return wl(e.type);case 16:return wl("Lazy");case 13:return wl("Suspense");case 19:return wl("SuspenseList");case 0:case 2:case 15:return e=U0(e.type,!1),e;case 11:return e=U0(e.type.render,!1),e;case 1:return e=U0(e.type,!0),e;default:return""}}function jp(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Do:return"Fragment";case Oo:return"Portal";case Hp:return"Profiler";case wg:return"StrictMode";case Up:return"Suspense";case Wp:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Z3:return(e.displayName||"Context")+".Consumer";case Q3:return(e._context.displayName||"Context")+".Provider";case bg:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case xg:return t=e.displayName||null,t!==null?t:jp(e.type)||"Memo";case Ur:t=e._payload,e=e._init;try{return jp(e(t))}catch{}}return null}function Sk(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return jp(t);case 8:return t===wg?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function di(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function e6(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Mk(e){var t=e6(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(a){r=""+a,o.call(this,a)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(a){r=""+a},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function xu(e){e._valueTracker||(e._valueTracker=Mk(e))}function t6(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=e6(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function Lc(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Vp(e,t){var n=t.checked;return Ne({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function Xv(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=di(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function n6(e,t){t=t.checked,t!=null&&vg(e,"checked",t,!1)}function qp(e,t){n6(e,t);var n=di(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?Yp(e,t.type,n):t.hasOwnProperty("defaultValue")&&Yp(e,t.type,di(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Gv(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function Yp(e,t,n){(t!=="number"||Lc(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var bl=Array.isArray;function Jo(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+di(n),t=null,i=0;i<e.length;i++){if(e[i].value===n){e[i].selected=!0,r&&(e[i].defaultSelected=!0);return}t!==null||e[i].disabled||(t=e[i])}t!==null&&(t.selected=!0)}}function Xp(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(q(91));return Ne({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Kv(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(q(92));if(bl(n)){if(1<n.length)throw Error(q(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:di(n)}}function r6(e,t){var n=di(t.value),r=di(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function Qv(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function i6(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Gp(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?i6(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var _u,o6=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,i)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(_u=_u||document.createElement("div"),_u.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=_u.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Zl(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Il={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ck=["Webkit","ms","Moz","O"];Object.keys(Il).forEach(function(e){Ck.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Il[t]=Il[e]})});function a6(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||Il.hasOwnProperty(e)&&Il[e]?(""+t).trim():t+"px"}function l6(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,i=a6(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}var Ek=Ne({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Kp(e,t){if(t){if(Ek[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(q(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(q(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(q(61))}if(t.style!=null&&typeof t.style!="object")throw Error(q(62))}}function Qp(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Zp=null;function _g(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Jp=null,ea=null,ta=null;function Zv(e){if(e=Bs(e)){if(typeof Jp!="function")throw Error(q(280));var t=e.stateNode;t&&(t=Sd(t),Jp(e.stateNode,e.type,t))}}function s6(e){ea?ta?ta.push(e):ta=[e]:ea=e}function u6(){if(ea){var e=ea,t=ta;if(ta=ea=null,Zv(e),t)for(e=0;e<t.length;e++)Zv(t[e])}}function c6(e,t){return e(t)}function f6(){}var W0=!1;function d6(e,t,n){if(W0)return e(t,n);W0=!0;try{return c6(e,t,n)}finally{W0=!1,(ea!==null||ta!==null)&&(f6(),u6())}}function Jl(e,t){var n=e.stateNode;if(n===null)return null;var r=Sd(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(q(231,t,typeof n));return n}var em=!1;if(xr)try{var il={};Object.defineProperty(il,"passive",{get:function(){em=!0}}),window.addEventListener("test",il,il),window.removeEventListener("test",il,il)}catch{em=!1}function kk(e,t,n,r,i,o,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(c){this.onError(c)}}var Ll=!1,Oc=null,Dc=!1,tm=null,Tk={onError:function(e){Ll=!0,Oc=e}};function $k(e,t,n,r,i,o,a,l,s){Ll=!1,Oc=null,kk.apply(Tk,arguments)}function Pk(e,t,n,r,i,o,a,l,s){if($k.apply(this,arguments),Ll){if(Ll){var u=Oc;Ll=!1,Oc=null}else throw Error(q(198));Dc||(Dc=!0,tm=u)}}function vo(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function h6(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Jv(e){if(vo(e)!==e)throw Error(q(188))}function Rk(e){var t=e.alternate;if(!t){if(t=vo(e),t===null)throw Error(q(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(i===null)break;var o=i.alternate;if(o===null){if(r=i.return,r!==null){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Jv(i),e;if(o===r)return Jv(i),t;o=o.sibling}throw Error(q(188))}if(n.return!==r.return)n=i,r=o;else{for(var a=!1,l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}if(!a){for(l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a)throw Error(q(189))}}if(n.alternate!==r)throw Error(q(190))}if(n.tag!==3)throw Error(q(188));return n.stateNode.current===n?e:t}function p6(e){return e=Rk(e),e!==null?m6(e):null}function m6(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=m6(e);if(t!==null)return t;e=e.sibling}return null}var g6=Wt.unstable_scheduleCallback,e2=Wt.unstable_cancelCallback,Nk=Wt.unstable_shouldYield,Ak=Wt.unstable_requestPaint,ze=Wt.unstable_now,Ik=Wt.unstable_getCurrentPriorityLevel,Sg=Wt.unstable_ImmediatePriority,y6=Wt.unstable_UserBlockingPriority,zc=Wt.unstable_NormalPriority,Lk=Wt.unstable_LowPriority,v6=Wt.unstable_IdlePriority,wd=null,jn=null;function Ok(e){if(jn&&typeof jn.onCommitFiberRoot=="function")try{jn.onCommitFiberRoot(wd,e,void 0,(e.current.flags&128)===128)}catch{}}var xn=Math.clz32?Math.clz32:Fk,Dk=Math.log,zk=Math.LN2;function Fk(e){return e>>>=0,e===0?32:31-(Dk(e)/zk|0)|0}var Su=64,Mu=4194304;function xl(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Fc(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,a=n&268435455;if(a!==0){var l=a&~i;l!==0?r=xl(l):(o&=a,o!==0&&(r=xl(o)))}else a=n&~i,a!==0?r=xl(a):o!==0&&(r=xl(o));if(r===0)return 0;if(t!==0&&t!==r&&!(t&i)&&(i=r&-r,o=t&-t,i>=o||i===16&&(o&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-xn(t),i=1<<n,r|=e[n],t&=~i;return r}function Bk(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Hk(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-xn(o),l=1<<a,s=i[a];s===-1?(!(l&n)||l&r)&&(i[a]=Bk(l,t)):s<=t&&(e.expiredLanes|=l),o&=~l}}function nm(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function w6(){var e=Su;return Su<<=1,!(Su&4194240)&&(Su=64),e}function j0(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function zs(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-xn(t),e[t]=n}function Uk(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-xn(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}function Mg(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-xn(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var xe=0;function b6(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var x6,Cg,_6,S6,M6,rm=!1,Cu=[],Jr=null,ei=null,ti=null,es=new Map,ts=new Map,jr=[],Wk="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function t2(e,t){switch(e){case"focusin":case"focusout":Jr=null;break;case"dragenter":case"dragleave":ei=null;break;case"mouseover":case"mouseout":ti=null;break;case"pointerover":case"pointerout":es.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ts.delete(t.pointerId)}}function ol(e,t,n,r,i,o){return e===null||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},t!==null&&(t=Bs(t),t!==null&&Cg(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,i!==null&&t.indexOf(i)===-1&&t.push(i),e)}function jk(e,t,n,r,i){switch(t){case"focusin":return Jr=ol(Jr,e,t,n,r,i),!0;case"dragenter":return ei=ol(ei,e,t,n,r,i),!0;case"mouseover":return ti=ol(ti,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return es.set(o,ol(es.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ts.set(o,ol(ts.get(o)||null,e,t,n,r,i)),!0}return!1}function C6(e){var t=Ui(e.target);if(t!==null){var n=vo(t);if(n!==null){if(t=n.tag,t===13){if(t=h6(n),t!==null){e.blockedOn=t,M6(e.priority,function(){_6(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function hc(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=im(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);Zp=r,n.target.dispatchEvent(r),Zp=null}else return t=Bs(n),t!==null&&Cg(t),e.blockedOn=n,!1;t.shift()}return!0}function n2(e,t,n){hc(e)&&n.delete(t)}function Vk(){rm=!1,Jr!==null&&hc(Jr)&&(Jr=null),ei!==null&&hc(ei)&&(ei=null),ti!==null&&hc(ti)&&(ti=null),es.forEach(n2),ts.forEach(n2)}function al(e,t){e.blockedOn===t&&(e.blockedOn=null,rm||(rm=!0,Wt.unstable_scheduleCallback(Wt.unstable_NormalPriority,Vk)))}function ns(e){function t(i){return al(i,e)}if(0<Cu.length){al(Cu[0],e);for(var n=1;n<Cu.length;n++){var r=Cu[n];r.blockedOn===e&&(r.blockedOn=null)}}for(Jr!==null&&al(Jr,e),ei!==null&&al(ei,e),ti!==null&&al(ti,e),es.forEach(t),ts.forEach(t),n=0;n<jr.length;n++)r=jr[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<jr.length&&(n=jr[0],n.blockedOn===null);)C6(n),n.blockedOn===null&&jr.shift()}var na=Nr.ReactCurrentBatchConfig,Bc=!0;function qk(e,t,n,r){var i=xe,o=na.transition;na.transition=null;try{xe=1,Eg(e,t,n,r)}finally{xe=i,na.transition=o}}function Yk(e,t,n,r){var i=xe,o=na.transition;na.transition=null;try{xe=4,Eg(e,t,n,r)}finally{xe=i,na.transition=o}}function Eg(e,t,n,r){if(Bc){var i=im(e,t,n,r);if(i===null)eh(e,t,r,Hc,n),t2(e,r);else if(jk(i,e,t,n,r))r.stopPropagation();else if(t2(e,r),t&4&&-1<Wk.indexOf(e)){for(;i!==null;){var o=Bs(i);if(o!==null&&x6(o),o=im(e,t,n,r),o===null&&eh(e,t,r,Hc,n),o===i)break;i=o}i!==null&&r.stopPropagation()}else eh(e,t,r,null,n)}}var Hc=null;function im(e,t,n,r){if(Hc=null,e=_g(r),e=Ui(e),e!==null)if(t=vo(e),t===null)e=null;else if(n=t.tag,n===13){if(e=h6(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Hc=e,null}function E6(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ik()){case Sg:return 1;case y6:return 4;case zc:case Lk:return 16;case v6:return 536870912;default:return 16}default:return 16}}var Yr=null,kg=null,pc=null;function k6(){if(pc)return pc;var e,t=kg,n=t.length,r,i="value"in Yr?Yr.value:Yr.textContent,o=i.length;for(e=0;e<n&&t[e]===i[e];e++);var a=n-e;for(r=1;r<=a&&t[n-r]===i[o-r];r++);return pc=i.slice(e,1<r?1-r:void 0)}function mc(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Eu(){return!0}function r2(){return!1}function Kt(e){function t(n,r,i,o,a){this._reactName=n,this._targetInst=i,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null;for(var l in e)e.hasOwnProperty(l)&&(n=e[l],this[l]=n?n(o):o[l]);return this.isDefaultPrevented=(o.defaultPrevented!=null?o.defaultPrevented:o.returnValue===!1)?Eu:r2,this.isPropagationStopped=r2,this}return Ne(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Eu)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Eu)},persist:function(){},isPersistent:Eu}),t}var Ua={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Tg=Kt(Ua),Fs=Ne({},Ua,{view:0,detail:0}),Xk=Kt(Fs),V0,q0,ll,bd=Ne({},Fs,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:$g,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ll&&(ll&&e.type==="mousemove"?(V0=e.screenX-ll.screenX,q0=e.screenY-ll.screenY):q0=V0=0,ll=e),V0)},movementY:function(e){return"movementY"in e?e.movementY:q0}}),i2=Kt(bd),Gk=Ne({},bd,{dataTransfer:0}),Kk=Kt(Gk),Qk=Ne({},Fs,{relatedTarget:0}),Y0=Kt(Qk),Zk=Ne({},Ua,{animationName:0,elapsedTime:0,pseudoElement:0}),Jk=Kt(Zk),eT=Ne({},Ua,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tT=Kt(eT),nT=Ne({},Ua,{data:0}),o2=Kt(nT),rT={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},iT={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},oT={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function aT(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=oT[e])?!!t[e]:!1}function $g(){return aT}var lT=Ne({},Fs,{key:function(e){if(e.key){var t=rT[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=mc(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?iT[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:$g,charCode:function(e){return e.type==="keypress"?mc(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?mc(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),sT=Kt(lT),uT=Ne({},bd,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),a2=Kt(uT),cT=Ne({},Fs,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:$g}),fT=Kt(cT),dT=Ne({},Ua,{propertyName:0,elapsedTime:0,pseudoElement:0}),hT=Kt(dT),pT=Ne({},bd,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),mT=Kt(pT),gT=[9,13,27,32],Pg=xr&&"CompositionEvent"in window,Ol=null;xr&&"documentMode"in document&&(Ol=document.documentMode);var yT=xr&&"TextEvent"in window&&!Ol,T6=xr&&(!Pg||Ol&&8<Ol&&11>=Ol),l2=" ",s2=!1;function $6(e,t){switch(e){case"keyup":return gT.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function P6(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var zo=!1;function vT(e,t){switch(e){case"compositionend":return P6(t);case"keypress":return t.which!==32?null:(s2=!0,l2);case"textInput":return e=t.data,e===l2&&s2?null:e;default:return null}}function wT(e,t){if(zo)return e==="compositionend"||!Pg&&$6(e,t)?(e=k6(),pc=kg=Yr=null,zo=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return T6&&t.locale!=="ko"?null:t.data;default:return null}}var bT={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function u2(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!bT[e.type]:t==="textarea"}function R6(e,t,n,r){s6(r),t=Uc(t,"onChange"),0<t.length&&(n=new Tg("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Dl=null,rs=null;function xT(e){U6(e,0)}function xd(e){var t=Ho(e);if(t6(t))return e}function _T(e,t){if(e==="change")return t}var N6=!1;if(xr){var X0;if(xr){var G0="oninput"in document;if(!G0){var c2=document.createElement("div");c2.setAttribute("oninput","return;"),G0=typeof c2.oninput=="function"}X0=G0}else X0=!1;N6=X0&&(!document.documentMode||9<document.documentMode)}function f2(){Dl&&(Dl.detachEvent("onpropertychange",A6),rs=Dl=null)}function A6(e){if(e.propertyName==="value"&&xd(rs)){var t=[];R6(t,rs,e,_g(e)),d6(xT,t)}}function ST(e,t,n){e==="focusin"?(f2(),Dl=t,rs=n,Dl.attachEvent("onpropertychange",A6)):e==="focusout"&&f2()}function MT(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return xd(rs)}function CT(e,t){if(e==="click")return xd(t)}function ET(e,t){if(e==="input"||e==="change")return xd(t)}function kT(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Sn=typeof Object.is=="function"?Object.is:kT;function is(e,t){if(Sn(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!Bp.call(t,i)||!Sn(e[i],t[i]))return!1}return!0}function d2(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function h2(e,t){var n=d2(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=d2(n)}}function I6(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?I6(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function L6(){for(var e=window,t=Lc();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=Lc(e.document)}return t}function Rg(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function TT(e){var t=L6(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&I6(n.ownerDocument.documentElement,n)){if(r!==null&&Rg(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=r.end===void 0?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=h2(n,o);var a=h2(n,r);i&&a&&(e.rangeCount!==1||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&(t=t.createRange(),t.setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var $T=xr&&"documentMode"in document&&11>=document.documentMode,Fo=null,om=null,zl=null,am=!1;function p2(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;am||Fo==null||Fo!==Lc(r)||(r=Fo,"selectionStart"in r&&Rg(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),zl&&is(zl,r)||(zl=r,r=Uc(om,"onSelect"),0<r.length&&(t=new Tg("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Fo)))}function ku(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Bo={animationend:ku("Animation","AnimationEnd"),animationiteration:ku("Animation","AnimationIteration"),animationstart:ku("Animation","AnimationStart"),transitionend:ku("Transition","TransitionEnd")},K0={},O6={};xr&&(O6=document.createElement("div").style,"AnimationEvent"in window||(delete Bo.animationend.animation,delete Bo.animationiteration.animation,delete Bo.animationstart.animation),"TransitionEvent"in window||delete Bo.transitionend.transition);function _d(e){if(K0[e])return K0[e];if(!Bo[e])return e;var t=Bo[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in O6)return K0[e]=t[n];return e}var D6=_d("animationend"),z6=_d("animationiteration"),F6=_d("animationstart"),B6=_d("transitionend"),H6=new Map,m2="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ci(e,t){H6.set(e,t),yo(t,[e])}for(var Q0=0;Q0<m2.length;Q0++){var Z0=m2[Q0],PT=Z0.toLowerCase(),RT=Z0[0].toUpperCase()+Z0.slice(1);Ci(PT,"on"+RT)}Ci(D6,"onAnimationEnd");Ci(z6,"onAnimationIteration");Ci(F6,"onAnimationStart");Ci("dblclick","onDoubleClick");Ci("focusin","onFocus");Ci("focusout","onBlur");Ci(B6,"onTransitionEnd");pa("onMouseEnter",["mouseout","mouseover"]);pa("onMouseLeave",["mouseout","mouseover"]);pa("onPointerEnter",["pointerout","pointerover"]);pa("onPointerLeave",["pointerout","pointerover"]);yo("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));yo("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));yo("onBeforeInput",["compositionend","keypress","textInput","paste"]);yo("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));yo("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));yo("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _l="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),NT=new Set("cancel close invalid load scroll toggle".split(" ").concat(_l));function g2(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,Pk(r,t,void 0,e),e.currentTarget=null}function U6(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==o&&i.isPropagationStopped())break e;g2(i,l,u),o=s}else for(a=0;a<r.length;a++){if(l=r[a],s=l.instance,u=l.currentTarget,l=l.listener,s!==o&&i.isPropagationStopped())break e;g2(i,l,u),o=s}}}if(Dc)throw e=tm,Dc=!1,tm=null,e}function ke(e,t){var n=t[fm];n===void 0&&(n=t[fm]=new Set);var r=e+"__bubble";n.has(r)||(W6(t,e,2,!1),n.add(r))}function J0(e,t,n){var r=0;t&&(r|=4),W6(n,e,r,t)}var Tu="_reactListening"+Math.random().toString(36).slice(2);function os(e){if(!e[Tu]){e[Tu]=!0,K3.forEach(function(n){n!=="selectionchange"&&(NT.has(n)||J0(n,!1,e),J0(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Tu]||(t[Tu]=!0,J0("selectionchange",!1,t))}}function W6(e,t,n,r){switch(E6(t)){case 1:var i=qk;break;case 4:i=Yk;break;default:i=Eg}n=i.bind(null,t,n,e),i=void 0,!em||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(i=!0),r?i!==void 0?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):i!==void 0?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function eh(e,t,n,r,i){var o=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var a=r.tag;if(a===3||a===4){var l=r.stateNode.containerInfo;if(l===i||l.nodeType===8&&l.parentNode===i)break;if(a===4)for(a=r.return;a!==null;){var s=a.tag;if((s===3||s===4)&&(s=a.stateNode.containerInfo,s===i||s.nodeType===8&&s.parentNode===i))return;a=a.return}for(;l!==null;){if(a=Ui(l),a===null)return;if(s=a.tag,s===5||s===6){r=o=a;continue e}l=l.parentNode}}r=r.return}d6(function(){var u=o,c=_g(n),f=[];e:{var d=H6.get(e);if(d!==void 0){var h=Tg,m=e;switch(e){case"keypress":if(mc(n)===0)break e;case"keydown":case"keyup":h=sT;break;case"focusin":m="focus",h=Y0;break;case"focusout":m="blur",h=Y0;break;case"beforeblur":case"afterblur":h=Y0;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":h=i2;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":h=Kk;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":h=fT;break;case D6:case z6:case F6:h=Jk;break;case B6:h=hT;break;case"scroll":h=Xk;break;case"wheel":h=mT;break;case"copy":case"cut":case"paste":h=tT;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":h=a2}var p=(t&4)!==0,w=!p&&e==="scroll",y=p?d!==null?d+"Capture":null:d;p=[];for(var g=u,v;g!==null;){v=g;var b=v.stateNode;if(v.tag===5&&b!==null&&(v=b,y!==null&&(b=Jl(g,y),b!=null&&p.push(as(g,b,v)))),w)break;g=g.return}0<p.length&&(d=new h(d,m,null,n,c),f.push({event:d,listeners:p}))}}if(!(t&7)){e:{if(d=e==="mouseover"||e==="pointerover",h=e==="mouseout"||e==="pointerout",d&&n!==Zp&&(m=n.relatedTarget||n.fromElement)&&(Ui(m)||m[_r]))break e;if((h||d)&&(d=c.window===c?c:(d=c.ownerDocument)?d.defaultView||d.parentWindow:window,h?(m=n.relatedTarget||n.toElement,h=u,m=m?Ui(m):null,m!==null&&(w=vo(m),m!==w||m.tag!==5&&m.tag!==6)&&(m=null)):(h=null,m=u),h!==m)){if(p=i2,b="onMouseLeave",y="onMouseEnter",g="mouse",(e==="pointerout"||e==="pointerover")&&(p=a2,b="onPointerLeave",y="onPointerEnter",g="pointer"),w=h==null?d:Ho(h),v=m==null?d:Ho(m),d=new p(b,g+"leave",h,n,c),d.target=w,d.relatedTarget=v,b=null,Ui(c)===u&&(p=new p(y,g+"enter",m,n,c),p.target=v,p.relatedTarget=w,b=p),w=b,h&&m)t:{for(p=h,y=m,g=0,v=p;v;v=To(v))g++;for(v=0,b=y;b;b=To(b))v++;for(;0<g-v;)p=To(p),g--;for(;0<v-g;)y=To(y),v--;for(;g--;){if(p===y||y!==null&&p===y.alternate)break t;p=To(p),y=To(y)}p=null}else p=null;h!==null&&y2(f,d,h,p,!1),m!==null&&w!==null&&y2(f,w,m,p,!0)}}e:{if(d=u?Ho(u):window,h=d.nodeName&&d.nodeName.toLowerCase(),h==="select"||h==="input"&&d.type==="file")var _=_T;else if(u2(d))if(N6)_=ET;else{_=MT;var M=ST}else(h=d.nodeName)&&h.toLowerCase()==="input"&&(d.type==="checkbox"||d.type==="radio")&&(_=CT);if(_&&(_=_(e,u))){R6(f,_,n,c);break e}M&&M(e,d,u),e==="focusout"&&(M=d._wrapperState)&&M.controlled&&d.type==="number"&&Yp(d,"number",d.value)}switch(M=u?Ho(u):window,e){case"focusin":(u2(M)||M.contentEditable==="true")&&(Fo=M,om=u,zl=null);break;case"focusout":zl=om=Fo=null;break;case"mousedown":am=!0;break;case"contextmenu":case"mouseup":case"dragend":am=!1,p2(f,n,c);break;case"selectionchange":if($T)break;case"keydown":case"keyup":p2(f,n,c)}var S;if(Pg)e:{switch(e){case"compositionstart":var C="onCompositionStart";break e;case"compositionend":C="onCompositionEnd";break e;case"compositionupdate":C="onCompositionUpdate";break e}C=void 0}else zo?$6(e,n)&&(C="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(C="onCompositionStart");C&&(T6&&n.locale!=="ko"&&(zo||C!=="onCompositionStart"?C==="onCompositionEnd"&&zo&&(S=k6()):(Yr=c,kg="value"in Yr?Yr.value:Yr.textContent,zo=!0)),M=Uc(u,C),0<M.length&&(C=new o2(C,e,null,n,c),f.push({event:C,listeners:M}),S?C.data=S:(S=P6(n),S!==null&&(C.data=S)))),(S=yT?vT(e,n):wT(e,n))&&(u=Uc(u,"onBeforeInput"),0<u.length&&(c=new o2("onBeforeInput","beforeinput",null,n,c),f.push({event:c,listeners:u}),c.data=S))}U6(f,t)})}function as(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Uc(e,t){for(var n=t+"Capture",r=[];e!==null;){var i=e,o=i.stateNode;i.tag===5&&o!==null&&(i=o,o=Jl(e,n),o!=null&&r.unshift(as(e,o,i)),o=Jl(e,t),o!=null&&r.push(as(e,o,i))),e=e.return}return r}function To(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function y2(e,t,n,r,i){for(var o=t._reactName,a=[];n!==null&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(s!==null&&s===r)break;l.tag===5&&u!==null&&(l=u,i?(s=Jl(n,o),s!=null&&a.unshift(as(n,s,l))):i||(s=Jl(n,o),s!=null&&a.push(as(n,s,l)))),n=n.return}a.length!==0&&e.push({event:t,listeners:a})}var AT=/\r\n?/g,IT=/\u0000|\uFFFD/g;function v2(e){return(typeof e=="string"?e:""+e).replace(AT,`
`).replace(IT,"")}function $u(e,t,n){if(t=v2(t),v2(e)!==t&&n)throw Error(q(425))}function Wc(){}var lm=null,sm=null;function um(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var cm=typeof setTimeout=="function"?setTimeout:void 0,LT=typeof clearTimeout=="function"?clearTimeout:void 0,w2=typeof Promise=="function"?Promise:void 0,OT=typeof queueMicrotask=="function"?queueMicrotask:typeof w2<"u"?function(e){return w2.resolve(null).then(e).catch(DT)}:cm;function DT(e){setTimeout(function(){throw e})}function th(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&i.nodeType===8)if(n=i.data,n==="/$"){if(r===0){e.removeChild(i),ns(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=i}while(n);ns(t)}function ni(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function b2(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var Wa=Math.random().toString(36).slice(2),On="__reactFiber$"+Wa,ls="__reactProps$"+Wa,_r="__reactContainer$"+Wa,fm="__reactEvents$"+Wa,zT="__reactListeners$"+Wa,FT="__reactHandles$"+Wa;function Ui(e){var t=e[On];if(t)return t;for(var n=e.parentNode;n;){if(t=n[_r]||n[On]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=b2(e);e!==null;){if(n=e[On])return n;e=b2(e)}return t}e=n,n=e.parentNode}return null}function Bs(e){return e=e[On]||e[_r],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Ho(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(q(33))}function Sd(e){return e[ls]||null}var dm=[],Uo=-1;function Ei(e){return{current:e}}function Te(e){0>Uo||(e.current=dm[Uo],dm[Uo]=null,Uo--)}function Ee(e,t){Uo++,dm[Uo]=e.current,e.current=t}var hi={},vt=Ei(hi),Rt=Ei(!1),Ji=hi;function ma(e,t){var n=e.type.contextTypes;if(!n)return hi;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i={},o;for(o in n)i[o]=t[o];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Nt(e){return e=e.childContextTypes,e!=null}function jc(){Te(Rt),Te(vt)}function x2(e,t,n){if(vt.current!==hi)throw Error(q(168));Ee(vt,t),Ee(Rt,n)}function j6(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var i in r)if(!(i in t))throw Error(q(108,Sk(e)||"Unknown",i));return Ne({},n,r)}function Vc(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||hi,Ji=vt.current,Ee(vt,e),Ee(Rt,Rt.current),!0}function _2(e,t,n){var r=e.stateNode;if(!r)throw Error(q(169));n?(e=j6(e,t,Ji),r.__reactInternalMemoizedMergedChildContext=e,Te(Rt),Te(vt),Ee(vt,e)):Te(Rt),Ee(Rt,n)}var ur=null,Md=!1,nh=!1;function V6(e){ur===null?ur=[e]:ur.push(e)}function BT(e){Md=!0,V6(e)}function ki(){if(!nh&&ur!==null){nh=!0;var e=0,t=xe;try{var n=ur;for(xe=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}ur=null,Md=!1}catch(i){throw ur!==null&&(ur=ur.slice(e+1)),g6(Sg,ki),i}finally{xe=t,nh=!1}}return null}var Wo=[],jo=0,qc=null,Yc=0,Jt=[],en=0,eo=null,dr=1,hr="";function Di(e,t){Wo[jo++]=Yc,Wo[jo++]=qc,qc=e,Yc=t}function q6(e,t,n){Jt[en++]=dr,Jt[en++]=hr,Jt[en++]=eo,eo=e;var r=dr;e=hr;var i=32-xn(r)-1;r&=~(1<<i),n+=1;var o=32-xn(t)+i;if(30<o){var a=i-i%5;o=(r&(1<<a)-1).toString(32),r>>=a,i-=a,dr=1<<32-xn(t)+i|n<<i|r,hr=o+e}else dr=1<<o|n<<i|r,hr=e}function Ng(e){e.return!==null&&(Di(e,1),q6(e,1,0))}function Ag(e){for(;e===qc;)qc=Wo[--jo],Wo[jo]=null,Yc=Wo[--jo],Wo[jo]=null;for(;e===eo;)eo=Jt[--en],Jt[en]=null,hr=Jt[--en],Jt[en]=null,dr=Jt[--en],Jt[en]=null}var Ut=null,Ft=null,$e=!1,vn=null;function Y6(e,t){var n=nn(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function S2(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Ut=e,Ft=ni(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Ut=e,Ft=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=eo!==null?{id:dr,overflow:hr}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=nn(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,Ut=e,Ft=null,!0):!1;default:return!1}}function hm(e){return(e.mode&1)!==0&&(e.flags&128)===0}function pm(e){if($e){var t=Ft;if(t){var n=t;if(!S2(e,t)){if(hm(e))throw Error(q(418));t=ni(n.nextSibling);var r=Ut;t&&S2(e,t)?Y6(r,n):(e.flags=e.flags&-4097|2,$e=!1,Ut=e)}}else{if(hm(e))throw Error(q(418));e.flags=e.flags&-4097|2,$e=!1,Ut=e}}}function M2(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Ut=e}function Pu(e){if(e!==Ut)return!1;if(!$e)return M2(e),$e=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!um(e.type,e.memoizedProps)),t&&(t=Ft)){if(hm(e))throw X6(),Error(q(418));for(;t;)Y6(e,t),t=ni(t.nextSibling)}if(M2(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(q(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){Ft=ni(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}Ft=null}}else Ft=Ut?ni(e.stateNode.nextSibling):null;return!0}function X6(){for(var e=Ft;e;)e=ni(e.nextSibling)}function ga(){Ft=Ut=null,$e=!1}function Ig(e){vn===null?vn=[e]:vn.push(e)}var HT=Nr.ReactCurrentBatchConfig;function sl(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(q(309));var r=n.stateNode}if(!r)throw Error(q(147,e));var i=r,o=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===o?t.ref:(t=function(a){var l=i.refs;a===null?delete l[o]:l[o]=a},t._stringRef=o,t)}if(typeof e!="string")throw Error(q(284));if(!n._owner)throw Error(q(290,e))}return e}function Ru(e,t){throw e=Object.prototype.toString.call(t),Error(q(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function C2(e){var t=e._init;return t(e._payload)}function G6(e){function t(y,g){if(e){var v=y.deletions;v===null?(y.deletions=[g],y.flags|=16):v.push(g)}}function n(y,g){if(!e)return null;for(;g!==null;)t(y,g),g=g.sibling;return null}function r(y,g){for(y=new Map;g!==null;)g.key!==null?y.set(g.key,g):y.set(g.index,g),g=g.sibling;return y}function i(y,g){return y=ai(y,g),y.index=0,y.sibling=null,y}function o(y,g,v){return y.index=v,e?(v=y.alternate,v!==null?(v=v.index,v<g?(y.flags|=2,g):v):(y.flags|=2,g)):(y.flags|=1048576,g)}function a(y){return e&&y.alternate===null&&(y.flags|=2),y}function l(y,g,v,b){return g===null||g.tag!==6?(g=uh(v,y.mode,b),g.return=y,g):(g=i(g,v),g.return=y,g)}function s(y,g,v,b){var _=v.type;return _===Do?c(y,g,v.props.children,b,v.key):g!==null&&(g.elementType===_||typeof _=="object"&&_!==null&&_.$$typeof===Ur&&C2(_)===g.type)?(b=i(g,v.props),b.ref=sl(y,g,v),b.return=y,b):(b=_c(v.type,v.key,v.props,null,y.mode,b),b.ref=sl(y,g,v),b.return=y,b)}function u(y,g,v,b){return g===null||g.tag!==4||g.stateNode.containerInfo!==v.containerInfo||g.stateNode.implementation!==v.implementation?(g=ch(v,y.mode,b),g.return=y,g):(g=i(g,v.children||[]),g.return=y,g)}function c(y,g,v,b,_){return g===null||g.tag!==7?(g=Xi(v,y.mode,b,_),g.return=y,g):(g=i(g,v),g.return=y,g)}function f(y,g,v){if(typeof g=="string"&&g!==""||typeof g=="number")return g=uh(""+g,y.mode,v),g.return=y,g;if(typeof g=="object"&&g!==null){switch(g.$$typeof){case bu:return v=_c(g.type,g.key,g.props,null,y.mode,v),v.ref=sl(y,null,g),v.return=y,v;case Oo:return g=ch(g,y.mode,v),g.return=y,g;case Ur:var b=g._init;return f(y,b(g._payload),v)}if(bl(g)||rl(g))return g=Xi(g,y.mode,v,null),g.return=y,g;Ru(y,g)}return null}function d(y,g,v,b){var _=g!==null?g.key:null;if(typeof v=="string"&&v!==""||typeof v=="number")return _!==null?null:l(y,g,""+v,b);if(typeof v=="object"&&v!==null){switch(v.$$typeof){case bu:return v.key===_?s(y,g,v,b):null;case Oo:return v.key===_?u(y,g,v,b):null;case Ur:return _=v._init,d(y,g,_(v._payload),b)}if(bl(v)||rl(v))return _!==null?null:c(y,g,v,b,null);Ru(y,v)}return null}function h(y,g,v,b,_){if(typeof b=="string"&&b!==""||typeof b=="number")return y=y.get(v)||null,l(g,y,""+b,_);if(typeof b=="object"&&b!==null){switch(b.$$typeof){case bu:return y=y.get(b.key===null?v:b.key)||null,s(g,y,b,_);case Oo:return y=y.get(b.key===null?v:b.key)||null,u(g,y,b,_);case Ur:var M=b._init;return h(y,g,v,M(b._payload),_)}if(bl(b)||rl(b))return y=y.get(v)||null,c(g,y,b,_,null);Ru(g,b)}return null}function m(y,g,v,b){for(var _=null,M=null,S=g,C=g=0,k=null;S!==null&&C<v.length;C++){S.index>C?(k=S,S=null):k=S.sibling;var $=d(y,S,v[C],b);if($===null){S===null&&(S=k);break}e&&S&&$.alternate===null&&t(y,S),g=o($,g,C),M===null?_=$:M.sibling=$,M=$,S=k}if(C===v.length)return n(y,S),$e&&Di(y,C),_;if(S===null){for(;C<v.length;C++)S=f(y,v[C],b),S!==null&&(g=o(S,g,C),M===null?_=S:M.sibling=S,M=S);return $e&&Di(y,C),_}for(S=r(y,S);C<v.length;C++)k=h(S,y,C,v[C],b),k!==null&&(e&&k.alternate!==null&&S.delete(k.key===null?C:k.key),g=o(k,g,C),M===null?_=k:M.sibling=k,M=k);return e&&S.forEach(function(E){return t(y,E)}),$e&&Di(y,C),_}function p(y,g,v,b){var _=rl(v);if(typeof _!="function")throw Error(q(150));if(v=_.call(v),v==null)throw Error(q(151));for(var M=_=null,S=g,C=g=0,k=null,$=v.next();S!==null&&!$.done;C++,$=v.next()){S.index>C?(k=S,S=null):k=S.sibling;var E=d(y,S,$.value,b);if(E===null){S===null&&(S=k);break}e&&S&&E.alternate===null&&t(y,S),g=o(E,g,C),M===null?_=E:M.sibling=E,M=E,S=k}if($.done)return n(y,S),$e&&Di(y,C),_;if(S===null){for(;!$.done;C++,$=v.next())$=f(y,$.value,b),$!==null&&(g=o($,g,C),M===null?_=$:M.sibling=$,M=$);return $e&&Di(y,C),_}for(S=r(y,S);!$.done;C++,$=v.next())$=h(S,y,C,$.value,b),$!==null&&(e&&$.alternate!==null&&S.delete($.key===null?C:$.key),g=o($,g,C),M===null?_=$:M.sibling=$,M=$);return e&&S.forEach(function(U){return t(y,U)}),$e&&Di(y,C),_}function w(y,g,v,b){if(typeof v=="object"&&v!==null&&v.type===Do&&v.key===null&&(v=v.props.children),typeof v=="object"&&v!==null){switch(v.$$typeof){case bu:e:{for(var _=v.key,M=g;M!==null;){if(M.key===_){if(_=v.type,_===Do){if(M.tag===7){n(y,M.sibling),g=i(M,v.props.children),g.return=y,y=g;break e}}else if(M.elementType===_||typeof _=="object"&&_!==null&&_.$$typeof===Ur&&C2(_)===M.type){n(y,M.sibling),g=i(M,v.props),g.ref=sl(y,M,v),g.return=y,y=g;break e}n(y,M);break}else t(y,M);M=M.sibling}v.type===Do?(g=Xi(v.props.children,y.mode,b,v.key),g.return=y,y=g):(b=_c(v.type,v.key,v.props,null,y.mode,b),b.ref=sl(y,g,v),b.return=y,y=b)}return a(y);case Oo:e:{for(M=v.key;g!==null;){if(g.key===M)if(g.tag===4&&g.stateNode.containerInfo===v.containerInfo&&g.stateNode.implementation===v.implementation){n(y,g.sibling),g=i(g,v.children||[]),g.return=y,y=g;break e}else{n(y,g);break}else t(y,g);g=g.sibling}g=ch(v,y.mode,b),g.return=y,y=g}return a(y);case Ur:return M=v._init,w(y,g,M(v._payload),b)}if(bl(v))return m(y,g,v,b);if(rl(v))return p(y,g,v,b);Ru(y,v)}return typeof v=="string"&&v!==""||typeof v=="number"?(v=""+v,g!==null&&g.tag===6?(n(y,g.sibling),g=i(g,v),g.return=y,y=g):(n(y,g),g=uh(v,y.mode,b),g.return=y,y=g),a(y)):n(y,g)}return w}var ya=G6(!0),K6=G6(!1),Xc=Ei(null),Gc=null,Vo=null,Lg=null;function Og(){Lg=Vo=Gc=null}function Dg(e){var t=Xc.current;Te(Xc),e._currentValue=t}function mm(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ra(e,t){Gc=e,Lg=Vo=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(Pt=!0),e.firstContext=null)}function un(e){var t=e._currentValue;if(Lg!==e)if(e={context:e,memoizedValue:t,next:null},Vo===null){if(Gc===null)throw Error(q(308));Vo=e,Gc.dependencies={lanes:0,firstContext:e}}else Vo=Vo.next=e;return t}var Wi=null;function zg(e){Wi===null?Wi=[e]:Wi.push(e)}function Q6(e,t,n,r){var i=t.interleaved;return i===null?(n.next=n,zg(t)):(n.next=i.next,i.next=n),t.interleaved=n,Sr(e,r)}function Sr(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var Wr=!1;function Fg(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Z6(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function wr(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ri(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,pe&2){var i=r.pending;return i===null?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Sr(e,n)}return i=r.interleaved,i===null?(t.next=t,zg(r)):(t.next=i.next,i.next=t),r.interleaved=t,Sr(e,n)}function gc(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Mg(e,n)}}function E2(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var i=null,o=null;if(n=n.firstBaseUpdate,n!==null){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};o===null?i=o=a:o=o.next=a,n=n.next}while(n!==null);o===null?i=o=t:o=o.next=t}else i=o=t;n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Kc(e,t,n,r){var i=e.updateQueue;Wr=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,l=i.shared.pending;if(l!==null){i.shared.pending=null;var s=l,u=s.next;s.next=null,a===null?o=u:a.next=u,a=s;var c=e.alternate;c!==null&&(c=c.updateQueue,l=c.lastBaseUpdate,l!==a&&(l===null?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s))}if(o!==null){var f=i.baseState;a=0,c=u=s=null,l=o;do{var d=l.lane,h=l.eventTime;if((r&d)===d){c!==null&&(c=c.next={eventTime:h,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,p=l;switch(d=t,h=n,p.tag){case 1:if(m=p.payload,typeof m=="function"){f=m.call(h,f,d);break e}f=m;break e;case 3:m.flags=m.flags&-65537|128;case 0:if(m=p.payload,d=typeof m=="function"?m.call(h,f,d):m,d==null)break e;f=Ne({},f,d);break e;case 2:Wr=!0}}l.callback!==null&&l.lane!==0&&(e.flags|=64,d=i.effects,d===null?i.effects=[l]:d.push(l))}else h={eventTime:h,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},c===null?(u=c=h,s=f):c=c.next=h,a|=d;if(l=l.next,l===null){if(l=i.shared.pending,l===null)break;d=l,l=d.next,d.next=null,i.lastBaseUpdate=d,i.shared.pending=null}}while(!0);if(c===null&&(s=f),i.baseState=s,i.firstBaseUpdate=u,i.lastBaseUpdate=c,t=i.shared.interleaved,t!==null){i=t;do a|=i.lane,i=i.next;while(i!==t)}else o===null&&(i.shared.lanes=0);no|=a,e.lanes=a,e.memoizedState=f}}function k2(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(i!==null){if(r.callback=null,r=n,typeof i!="function")throw Error(q(191,i));i.call(r)}}}var Hs={},Vn=Ei(Hs),ss=Ei(Hs),us=Ei(Hs);function ji(e){if(e===Hs)throw Error(q(174));return e}function Bg(e,t){switch(Ee(us,t),Ee(ss,e),Ee(Vn,Hs),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Gp(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Gp(t,e)}Te(Vn),Ee(Vn,t)}function va(){Te(Vn),Te(ss),Te(us)}function J6(e){ji(us.current);var t=ji(Vn.current),n=Gp(t,e.type);t!==n&&(Ee(ss,e),Ee(Vn,n))}function Hg(e){ss.current===e&&(Te(Vn),Te(ss))}var Pe=Ei(0);function Qc(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var rh=[];function Ug(){for(var e=0;e<rh.length;e++)rh[e]._workInProgressVersionPrimary=null;rh.length=0}var yc=Nr.ReactCurrentDispatcher,ih=Nr.ReactCurrentBatchConfig,to=0,Re=null,Ve=null,Qe=null,Zc=!1,Fl=!1,cs=0,UT=0;function ft(){throw Error(q(321))}function Wg(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Sn(e[n],t[n]))return!1;return!0}function jg(e,t,n,r,i,o){if(to=o,Re=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,yc.current=e===null||e.memoizedState===null?qT:YT,e=n(r,i),Fl){o=0;do{if(Fl=!1,cs=0,25<=o)throw Error(q(301));o+=1,Qe=Ve=null,t.updateQueue=null,yc.current=XT,e=n(r,i)}while(Fl)}if(yc.current=Jc,t=Ve!==null&&Ve.next!==null,to=0,Qe=Ve=Re=null,Zc=!1,t)throw Error(q(300));return e}function Vg(){var e=cs!==0;return cs=0,e}function Nn(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Qe===null?Re.memoizedState=Qe=e:Qe=Qe.next=e,Qe}function cn(){if(Ve===null){var e=Re.alternate;e=e!==null?e.memoizedState:null}else e=Ve.next;var t=Qe===null?Re.memoizedState:Qe.next;if(t!==null)Qe=t,Ve=e;else{if(e===null)throw Error(q(310));Ve=e,e={memoizedState:Ve.memoizedState,baseState:Ve.baseState,baseQueue:Ve.baseQueue,queue:Ve.queue,next:null},Qe===null?Re.memoizedState=Qe=e:Qe=Qe.next=e}return Qe}function fs(e,t){return typeof t=="function"?t(e):t}function oh(e){var t=cn(),n=t.queue;if(n===null)throw Error(q(311));n.lastRenderedReducer=e;var r=Ve,i=r.baseQueue,o=n.pending;if(o!==null){if(i!==null){var a=i.next;i.next=o.next,o.next=a}r.baseQueue=i=o,n.pending=null}if(i!==null){o=i.next,r=r.baseState;var l=a=null,s=null,u=o;do{var c=u.lane;if((to&c)===c)s!==null&&(s=s.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};s===null?(l=s=f,a=r):s=s.next=f,Re.lanes|=c,no|=c}u=u.next}while(u!==null&&u!==o);s===null?a=r:s.next=l,Sn(r,t.memoizedState)||(Pt=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=s,n.lastRenderedState=r}if(e=n.interleaved,e!==null){i=e;do o=i.lane,Re.lanes|=o,no|=o,i=i.next;while(i!==e)}else i===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ah(e){var t=cn(),n=t.queue;if(n===null)throw Error(q(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(i!==null){n.pending=null;var a=i=i.next;do o=e(o,a.action),a=a.next;while(a!==i);Sn(o,t.memoizedState)||(Pt=!0),t.memoizedState=o,t.baseQueue===null&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function e5(){}function t5(e,t){var n=Re,r=cn(),i=t(),o=!Sn(r.memoizedState,i);if(o&&(r.memoizedState=i,Pt=!0),r=r.queue,qg(i5.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||Qe!==null&&Qe.memoizedState.tag&1){if(n.flags|=2048,ds(9,r5.bind(null,n,r,i,t),void 0,null),et===null)throw Error(q(349));to&30||n5(n,t,i)}return i}function n5(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=Re.updateQueue,t===null?(t={lastEffect:null,stores:null},Re.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function r5(e,t,n,r){t.value=n,t.getSnapshot=r,o5(t)&&a5(e)}function i5(e,t,n){return n(function(){o5(t)&&a5(e)})}function o5(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Sn(e,n)}catch{return!0}}function a5(e){var t=Sr(e,1);t!==null&&_n(t,e,1,-1)}function T2(e){var t=Nn();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:fs,lastRenderedState:e},t.queue=e,e=e.dispatch=VT.bind(null,Re,e),[t.memoizedState,e]}function ds(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=Re.updateQueue,t===null?(t={lastEffect:null,stores:null},Re.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function l5(){return cn().memoizedState}function vc(e,t,n,r){var i=Nn();Re.flags|=e,i.memoizedState=ds(1|t,n,void 0,r===void 0?null:r)}function Cd(e,t,n,r){var i=cn();r=r===void 0?null:r;var o=void 0;if(Ve!==null){var a=Ve.memoizedState;if(o=a.destroy,r!==null&&Wg(r,a.deps)){i.memoizedState=ds(t,n,o,r);return}}Re.flags|=e,i.memoizedState=ds(1|t,n,o,r)}function $2(e,t){return vc(8390656,8,e,t)}function qg(e,t){return Cd(2048,8,e,t)}function s5(e,t){return Cd(4,2,e,t)}function u5(e,t){return Cd(4,4,e,t)}function c5(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function f5(e,t,n){return n=n!=null?n.concat([e]):null,Cd(4,4,c5.bind(null,t,e),n)}function Yg(){}function d5(e,t){var n=cn();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Wg(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function h5(e,t){var n=cn();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Wg(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function p5(e,t,n){return to&21?(Sn(n,t)||(n=w6(),Re.lanes|=n,no|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,Pt=!0),e.memoizedState=n)}function WT(e,t){var n=xe;xe=n!==0&&4>n?n:4,e(!0);var r=ih.transition;ih.transition={};try{e(!1),t()}finally{xe=n,ih.transition=r}}function m5(){return cn().memoizedState}function jT(e,t,n){var r=oi(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},g5(e))y5(t,n);else if(n=Q6(e,t,n,r),n!==null){var i=Ct();_n(n,e,r,i),v5(n,t,r)}}function VT(e,t,n){var r=oi(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(g5(e))y5(t,i);else{var o=e.alternate;if(e.lanes===0&&(o===null||o.lanes===0)&&(o=t.lastRenderedReducer,o!==null))try{var a=t.lastRenderedState,l=o(a,n);if(i.hasEagerState=!0,i.eagerState=l,Sn(l,a)){var s=t.interleaved;s===null?(i.next=i,zg(t)):(i.next=s.next,s.next=i),t.interleaved=i;return}}catch{}finally{}n=Q6(e,t,i,r),n!==null&&(i=Ct(),_n(n,e,r,i),v5(n,t,r))}}function g5(e){var t=e.alternate;return e===Re||t!==null&&t===Re}function y5(e,t){Fl=Zc=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function v5(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Mg(e,n)}}var Jc={readContext:un,useCallback:ft,useContext:ft,useEffect:ft,useImperativeHandle:ft,useInsertionEffect:ft,useLayoutEffect:ft,useMemo:ft,useReducer:ft,useRef:ft,useState:ft,useDebugValue:ft,useDeferredValue:ft,useTransition:ft,useMutableSource:ft,useSyncExternalStore:ft,useId:ft,unstable_isNewReconciler:!1},qT={readContext:un,useCallback:function(e,t){return Nn().memoizedState=[e,t===void 0?null:t],e},useContext:un,useEffect:$2,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,vc(4194308,4,c5.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vc(4194308,4,e,t)},useInsertionEffect:function(e,t){return vc(4,2,e,t)},useMemo:function(e,t){var n=Nn();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Nn();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=jT.bind(null,Re,e),[r.memoizedState,e]},useRef:function(e){var t=Nn();return e={current:e},t.memoizedState=e},useState:T2,useDebugValue:Yg,useDeferredValue:function(e){return Nn().memoizedState=e},useTransition:function(){var e=T2(!1),t=e[0];return e=WT.bind(null,e[1]),Nn().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=Re,i=Nn();if($e){if(n===void 0)throw Error(q(407));n=n()}else{if(n=t(),et===null)throw Error(q(349));to&30||n5(r,t,n)}i.memoizedState=n;var o={value:n,getSnapshot:t};return i.queue=o,$2(i5.bind(null,r,o,e),[e]),r.flags|=2048,ds(9,r5.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=Nn(),t=et.identifierPrefix;if($e){var n=hr,r=dr;n=(r&~(1<<32-xn(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=cs++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=UT++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},YT={readContext:un,useCallback:d5,useContext:un,useEffect:qg,useImperativeHandle:f5,useInsertionEffect:s5,useLayoutEffect:u5,useMemo:h5,useReducer:oh,useRef:l5,useState:function(){return oh(fs)},useDebugValue:Yg,useDeferredValue:function(e){var t=cn();return p5(t,Ve.memoizedState,e)},useTransition:function(){var e=oh(fs)[0],t=cn().memoizedState;return[e,t]},useMutableSource:e5,useSyncExternalStore:t5,useId:m5,unstable_isNewReconciler:!1},XT={readContext:un,useCallback:d5,useContext:un,useEffect:qg,useImperativeHandle:f5,useInsertionEffect:s5,useLayoutEffect:u5,useMemo:h5,useReducer:ah,useRef:l5,useState:function(){return ah(fs)},useDebugValue:Yg,useDeferredValue:function(e){var t=cn();return Ve===null?t.memoizedState=e:p5(t,Ve.memoizedState,e)},useTransition:function(){var e=ah(fs)[0],t=cn().memoizedState;return[e,t]},useMutableSource:e5,useSyncExternalStore:t5,useId:m5,unstable_isNewReconciler:!1};function gn(e,t){if(e&&e.defaultProps){t=Ne({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function gm(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:Ne({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Ed={isMounted:function(e){return(e=e._reactInternals)?vo(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ct(),i=oi(e),o=wr(r,i);o.payload=t,n!=null&&(o.callback=n),t=ri(e,o,i),t!==null&&(_n(t,e,i,r),gc(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ct(),i=oi(e),o=wr(r,i);o.tag=1,o.payload=t,n!=null&&(o.callback=n),t=ri(e,o,i),t!==null&&(_n(t,e,i,r),gc(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ct(),r=oi(e),i=wr(n,r);i.tag=2,t!=null&&(i.callback=t),t=ri(e,i,r),t!==null&&(_n(t,e,r,n),gc(t,e,r))}};function P2(e,t,n,r,i,o,a){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,o,a):t.prototype&&t.prototype.isPureReactComponent?!is(n,r)||!is(i,o):!0}function w5(e,t,n){var r=!1,i=hi,o=t.contextType;return typeof o=="object"&&o!==null?o=un(o):(i=Nt(t)?Ji:vt.current,r=t.contextTypes,o=(r=r!=null)?ma(e,i):hi),t=new t(n,o),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Ed,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function R2(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ed.enqueueReplaceState(t,t.state,null)}function ym(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs={},Fg(e);var o=t.contextType;typeof o=="object"&&o!==null?i.context=un(o):(o=Nt(t)?Ji:vt.current,i.context=ma(e,o)),i.state=e.memoizedState,o=t.getDerivedStateFromProps,typeof o=="function"&&(gm(e,t,o,n),i.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof i.getSnapshotBeforeUpdate=="function"||typeof i.UNSAFE_componentWillMount!="function"&&typeof i.componentWillMount!="function"||(t=i.state,typeof i.componentWillMount=="function"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount=="function"&&i.UNSAFE_componentWillMount(),t!==i.state&&Ed.enqueueReplaceState(i,i.state,null),Kc(e,n,i,r),i.state=e.memoizedState),typeof i.componentDidMount=="function"&&(e.flags|=4194308)}function wa(e,t){try{var n="",r=t;do n+=_k(r),r=r.return;while(r);var i=n}catch(o){i=`
Error generating stack: `+o.message+`
`+o.stack}return{value:e,source:t,stack:i,digest:null}}function lh(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function vm(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var GT=typeof WeakMap=="function"?WeakMap:Map;function b5(e,t,n){n=wr(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){tf||(tf=!0,Tm=r),vm(e,t)},n}function x5(e,t,n){n=wr(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){vm(e,t)}}var o=e.stateNode;return o!==null&&typeof o.componentDidCatch=="function"&&(n.callback=function(){vm(e,t),typeof r!="function"&&(ii===null?ii=new Set([this]):ii.add(this));var a=t.stack;this.componentDidCatch(t.value,{componentStack:a!==null?a:""})}),n}function N2(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new GT;var i=new Set;r.set(t,i)}else i=r.get(t),i===void 0&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=u$.bind(null,e,t,n),t.then(e,e))}function A2(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function I2(e,t,n,r,i){return e.mode&1?(e.flags|=65536,e.lanes=i,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=wr(-1,1),t.tag=2,ri(n,t,1))),n.lanes|=1),e)}var KT=Nr.ReactCurrentOwner,Pt=!1;function xt(e,t,n,r){t.child=e===null?K6(t,null,n,r):ya(t,e.child,n,r)}function L2(e,t,n,r,i){n=n.render;var o=t.ref;return ra(t,i),r=jg(e,t,n,r,o,i),n=Vg(),e!==null&&!Pt?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Mr(e,t,i)):($e&&n&&Ng(t),t.flags|=1,xt(e,t,r,i),t.child)}function O2(e,t,n,r,i){if(e===null){var o=n.type;return typeof o=="function"&&!ty(o)&&o.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=o,_5(e,t,o,r,i)):(e=_c(n.type,null,r,t,t.mode,i),e.ref=t.ref,e.return=t,t.child=e)}if(o=e.child,!(e.lanes&i)){var a=o.memoizedProps;if(n=n.compare,n=n!==null?n:is,n(a,r)&&e.ref===t.ref)return Mr(e,t,i)}return t.flags|=1,e=ai(o,r),e.ref=t.ref,e.return=t,t.child=e}function _5(e,t,n,r,i){if(e!==null){var o=e.memoizedProps;if(is(o,r)&&e.ref===t.ref)if(Pt=!1,t.pendingProps=r=o,(e.lanes&i)!==0)e.flags&131072&&(Pt=!0);else return t.lanes=e.lanes,Mr(e,t,i)}return wm(e,t,n,r,i)}function S5(e,t,n){var r=t.pendingProps,i=r.children,o=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ee(Yo,Dt),Dt|=n;else{if(!(n&1073741824))return e=o!==null?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ee(Yo,Dt),Dt|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=o!==null?o.baseLanes:n,Ee(Yo,Dt),Dt|=r}else o!==null?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ee(Yo,Dt),Dt|=r;return xt(e,t,i,n),t.child}function M5(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function wm(e,t,n,r,i){var o=Nt(n)?Ji:vt.current;return o=ma(t,o),ra(t,i),n=jg(e,t,n,r,o,i),r=Vg(),e!==null&&!Pt?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Mr(e,t,i)):($e&&r&&Ng(t),t.flags|=1,xt(e,t,n,i),t.child)}function D2(e,t,n,r,i){if(Nt(n)){var o=!0;Vc(t)}else o=!1;if(ra(t,i),t.stateNode===null)wc(e,t),w5(t,n,r),ym(t,n,r,i),r=!0;else if(e===null){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;typeof u=="object"&&u!==null?u=un(u):(u=Nt(n)?Ji:vt.current,u=ma(t,u));var c=n.getDerivedStateFromProps,f=typeof c=="function"||typeof a.getSnapshotBeforeUpdate=="function";f||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(l!==r||s!==u)&&R2(t,a,r,u),Wr=!1;var d=t.memoizedState;a.state=d,Kc(t,r,a,i),s=t.memoizedState,l!==r||d!==s||Rt.current||Wr?(typeof c=="function"&&(gm(t,n,c,r),s=t.memoizedState),(l=Wr||P2(t,n,l,r,d,s,u))?(f||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount()),typeof a.componentDidMount=="function"&&(t.flags|=4194308)):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Z6(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:gn(t.type,l),a.props=u,f=t.pendingProps,d=a.context,s=n.contextType,typeof s=="object"&&s!==null?s=un(s):(s=Nt(n)?Ji:vt.current,s=ma(t,s));var h=n.getDerivedStateFromProps;(c=typeof h=="function"||typeof a.getSnapshotBeforeUpdate=="function")||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(l!==f||d!==s)&&R2(t,a,r,s),Wr=!1,d=t.memoizedState,a.state=d,Kc(t,r,a,i);var m=t.memoizedState;l!==f||d!==m||Rt.current||Wr?(typeof h=="function"&&(gm(t,n,h,r),m=t.memoizedState),(u=Wr||P2(t,n,u,r,d,m,s)||!1)?(c||typeof a.UNSAFE_componentWillUpdate!="function"&&typeof a.componentWillUpdate!="function"||(typeof a.componentWillUpdate=="function"&&a.componentWillUpdate(r,m,s),typeof a.UNSAFE_componentWillUpdate=="function"&&a.UNSAFE_componentWillUpdate(r,m,s)),typeof a.componentDidUpdate=="function"&&(t.flags|=4),typeof a.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof a.componentDidUpdate!="function"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),a.props=r,a.state=m,a.context=s,r=u):(typeof a.componentDidUpdate!="function"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return bm(e,t,n,r,o,i)}function bm(e,t,n,r,i,o){M5(e,t);var a=(t.flags&128)!==0;if(!r&&!a)return i&&_2(t,n,!1),Mr(e,t,o);r=t.stateNode,KT.current=t;var l=a&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&a?(t.child=ya(t,e.child,null,o),t.child=ya(t,null,l,o)):xt(e,t,l,o),t.memoizedState=r.state,i&&_2(t,n,!0),t.child}function C5(e){var t=e.stateNode;t.pendingContext?x2(e,t.pendingContext,t.pendingContext!==t.context):t.context&&x2(e,t.context,!1),Bg(e,t.containerInfo)}function z2(e,t,n,r,i){return ga(),Ig(i),t.flags|=256,xt(e,t,n,r),t.child}var xm={dehydrated:null,treeContext:null,retryLane:0};function _m(e){return{baseLanes:e,cachePool:null,transitions:null}}function E5(e,t,n){var r=t.pendingProps,i=Pe.current,o=!1,a=(t.flags&128)!==0,l;if((l=a)||(l=e!==null&&e.memoizedState===null?!1:(i&2)!==0),l?(o=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(i|=1),Ee(Pe,i&1),e===null)return pm(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(a=r.children,e=r.fallback,o?(r=t.mode,o=t.child,a={mode:"hidden",children:a},!(r&1)&&o!==null?(o.childLanes=0,o.pendingProps=a):o=$d(a,r,0,null),e=Xi(e,r,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=_m(n),t.memoizedState=xm,e):Xg(t,a));if(i=e.memoizedState,i!==null&&(l=i.dehydrated,l!==null))return QT(e,t,a,r,l,i,n);if(o){o=r.fallback,a=t.mode,i=e.child,l=i.sibling;var s={mode:"hidden",children:r.children};return!(a&1)&&t.child!==i?(r=t.child,r.childLanes=0,r.pendingProps=s,t.deletions=null):(r=ai(i,s),r.subtreeFlags=i.subtreeFlags&14680064),l!==null?o=ai(l,o):(o=Xi(o,a,n,null),o.flags|=2),o.return=t,r.return=t,r.sibling=o,t.child=r,r=o,o=t.child,a=e.child.memoizedState,a=a===null?_m(n):{baseLanes:a.baseLanes|n,cachePool:null,transitions:a.transitions},o.memoizedState=a,o.childLanes=e.childLanes&~n,t.memoizedState=xm,r}return o=e.child,e=o.sibling,r=ai(o,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Xg(e,t){return t=$d({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Nu(e,t,n,r){return r!==null&&Ig(r),ya(t,e.child,null,n),e=Xg(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function QT(e,t,n,r,i,o,a){if(n)return t.flags&256?(t.flags&=-257,r=lh(Error(q(422))),Nu(e,t,a,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(o=r.fallback,i=t.mode,r=$d({mode:"visible",children:r.children},i,0,null),o=Xi(o,i,a,null),o.flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,t.mode&1&&ya(t,e.child,null,a),t.child.memoizedState=_m(a),t.memoizedState=xm,o);if(!(t.mode&1))return Nu(e,t,a,null);if(i.data==="$!"){if(r=i.nextSibling&&i.nextSibling.dataset,r)var l=r.dgst;return r=l,o=Error(q(419)),r=lh(o,r,void 0),Nu(e,t,a,r)}if(l=(a&e.childLanes)!==0,Pt||l){if(r=et,r!==null){switch(a&-a){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}i=i&(r.suspendedLanes|a)?0:i,i!==0&&i!==o.retryLane&&(o.retryLane=i,Sr(e,i),_n(r,e,i,-1))}return ey(),r=lh(Error(q(421))),Nu(e,t,a,r)}return i.data==="$?"?(t.flags|=128,t.child=e.child,t=c$.bind(null,e),i._reactRetry=t,null):(e=o.treeContext,Ft=ni(i.nextSibling),Ut=t,$e=!0,vn=null,e!==null&&(Jt[en++]=dr,Jt[en++]=hr,Jt[en++]=eo,dr=e.id,hr=e.overflow,eo=t),t=Xg(t,r.children),t.flags|=4096,t)}function F2(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),mm(e.return,t,n)}function sh(e,t,n,r,i){var o=e.memoizedState;o===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function k5(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(xt(e,t,r.children,n),r=Pe.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&F2(e,n,t);else if(e.tag===19)F2(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ee(Pe,r),!(t.mode&1))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;n!==null;)e=n.alternate,e!==null&&Qc(e)===null&&(i=n),n=n.sibling;n=i,n===null?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),sh(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;i!==null;){if(e=i.alternate,e!==null&&Qc(e)===null){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}sh(t,!0,n,null,o);break;case"together":sh(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function wc(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Mr(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),no|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(q(153));if(t.child!==null){for(e=t.child,n=ai(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=ai(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function ZT(e,t,n){switch(t.tag){case 3:C5(t),ga();break;case 5:J6(t);break;case 1:Nt(t.type)&&Vc(t);break;case 4:Bg(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;Ee(Xc,r._currentValue),r._currentValue=i;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(Ee(Pe,Pe.current&1),t.flags|=128,null):n&t.child.childLanes?E5(e,t,n):(Ee(Pe,Pe.current&1),e=Mr(e,t,n),e!==null?e.sibling:null);Ee(Pe,Pe.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return k5(e,t,n);t.flags|=128}if(i=t.memoizedState,i!==null&&(i.rendering=null,i.tail=null,i.lastEffect=null),Ee(Pe,Pe.current),r)break;return null;case 22:case 23:return t.lanes=0,S5(e,t,n)}return Mr(e,t,n)}var T5,Sm,$5,P5;T5=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Sm=function(){};$5=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,ji(Vn.current);var o=null;switch(n){case"input":i=Vp(e,i),r=Vp(e,r),o=[];break;case"select":i=Ne({},i,{value:void 0}),r=Ne({},r,{value:void 0}),o=[];break;case"textarea":i=Xp(e,i),r=Xp(e,r),o=[];break;default:typeof i.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=Wc)}Kp(n,r);var a;n=null;for(u in i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&i[u]!=null)if(u==="style"){var l=i[u];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(Ql.hasOwnProperty(u)?o||(o=[]):(o=o||[]).push(u,null));for(u in r){var s=r[u];if(l=i!=null?i[u]:void 0,r.hasOwnProperty(u)&&s!==l&&(s!=null||l!=null))if(u==="style")if(l){for(a in l)!l.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&l[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(o||(o=[]),o.push(u,n)),n=s;else u==="dangerouslySetInnerHTML"?(s=s?s.__html:void 0,l=l?l.__html:void 0,s!=null&&l!==s&&(o=o||[]).push(u,s)):u==="children"?typeof s!="string"&&typeof s!="number"||(o=o||[]).push(u,""+s):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(Ql.hasOwnProperty(u)?(s!=null&&u==="onScroll"&&ke("scroll",e),o||l===s||(o=[])):(o=o||[]).push(u,s))}n&&(o=o||[]).push("style",n);var u=o;(t.updateQueue=u)&&(t.flags|=4)}};P5=function(e,t,n,r){n!==r&&(t.flags|=4)};function ul(e,t){if(!$e)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function dt(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags&14680064,r|=i.flags&14680064,i.return=e,i=i.sibling;else for(i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function JT(e,t,n){var r=t.pendingProps;switch(Ag(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return dt(t),null;case 1:return Nt(t.type)&&jc(),dt(t),null;case 3:return r=t.stateNode,va(),Te(Rt),Te(vt),Ug(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(Pu(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,vn!==null&&(Rm(vn),vn=null))),Sm(e,t),dt(t),null;case 5:Hg(t);var i=ji(us.current);if(n=t.type,e!==null&&t.stateNode!=null)$5(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(q(166));return dt(t),null}if(e=ji(Vn.current),Pu(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[On]=t,r[ls]=o,e=(t.mode&1)!==0,n){case"dialog":ke("cancel",r),ke("close",r);break;case"iframe":case"object":case"embed":ke("load",r);break;case"video":case"audio":for(i=0;i<_l.length;i++)ke(_l[i],r);break;case"source":ke("error",r);break;case"img":case"image":case"link":ke("error",r),ke("load",r);break;case"details":ke("toggle",r);break;case"input":Xv(r,o),ke("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},ke("invalid",r);break;case"textarea":Kv(r,o),ke("invalid",r)}Kp(n,o),i=null;for(var a in o)if(o.hasOwnProperty(a)){var l=o[a];a==="children"?typeof l=="string"?r.textContent!==l&&(o.suppressHydrationWarning!==!0&&$u(r.textContent,l,e),i=["children",l]):typeof l=="number"&&r.textContent!==""+l&&(o.suppressHydrationWarning!==!0&&$u(r.textContent,l,e),i=["children",""+l]):Ql.hasOwnProperty(a)&&l!=null&&a==="onScroll"&&ke("scroll",r)}switch(n){case"input":xu(r),Gv(r,o,!0);break;case"textarea":xu(r),Qv(r);break;case"select":case"option":break;default:typeof o.onClick=="function"&&(r.onclick=Wc)}r=i,t.updateQueue=r,r!==null&&(t.flags|=4)}else{a=i.nodeType===9?i:i.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=i6(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=a.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=a.createElement(n,{is:r.is}):(e=a.createElement(n),n==="select"&&(a=e,r.multiple?a.multiple=!0:r.size&&(a.size=r.size))):e=a.createElementNS(e,n),e[On]=t,e[ls]=r,T5(e,t,!1,!1),t.stateNode=e;e:{switch(a=Qp(n,r),n){case"dialog":ke("cancel",e),ke("close",e),i=r;break;case"iframe":case"object":case"embed":ke("load",e),i=r;break;case"video":case"audio":for(i=0;i<_l.length;i++)ke(_l[i],e);i=r;break;case"source":ke("error",e),i=r;break;case"img":case"image":case"link":ke("error",e),ke("load",e),i=r;break;case"details":ke("toggle",e),i=r;break;case"input":Xv(e,r),i=Vp(e,r),ke("invalid",e);break;case"option":i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=Ne({},r,{value:void 0}),ke("invalid",e);break;case"textarea":Kv(e,r),i=Xp(e,r),ke("invalid",e);break;default:i=r}Kp(n,i),l=i;for(o in l)if(l.hasOwnProperty(o)){var s=l[o];o==="style"?l6(e,s):o==="dangerouslySetInnerHTML"?(s=s?s.__html:void 0,s!=null&&o6(e,s)):o==="children"?typeof s=="string"?(n!=="textarea"||s!=="")&&Zl(e,s):typeof s=="number"&&Zl(e,""+s):o!=="suppressContentEditableWarning"&&o!=="suppressHydrationWarning"&&o!=="autoFocus"&&(Ql.hasOwnProperty(o)?s!=null&&o==="onScroll"&&ke("scroll",e):s!=null&&vg(e,o,s,a))}switch(n){case"input":xu(e),Gv(e,r,!1);break;case"textarea":xu(e),Qv(e);break;case"option":r.value!=null&&e.setAttribute("value",""+di(r.value));break;case"select":e.multiple=!!r.multiple,o=r.value,o!=null?Jo(e,!!r.multiple,o,!1):r.defaultValue!=null&&Jo(e,!!r.multiple,r.defaultValue,!0);break;default:typeof i.onClick=="function"&&(e.onclick=Wc)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return dt(t),null;case 6:if(e&&t.stateNode!=null)P5(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(q(166));if(n=ji(us.current),ji(Vn.current),Pu(t)){if(r=t.stateNode,n=t.memoizedProps,r[On]=t,(o=r.nodeValue!==n)&&(e=Ut,e!==null))switch(e.tag){case 3:$u(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&$u(r.nodeValue,n,(e.mode&1)!==0)}o&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[On]=t,t.stateNode=r}return dt(t),null;case 13:if(Te(Pe),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if($e&&Ft!==null&&t.mode&1&&!(t.flags&128))X6(),ga(),t.flags|=98560,o=!1;else if(o=Pu(t),r!==null&&r.dehydrated!==null){if(e===null){if(!o)throw Error(q(318));if(o=t.memoizedState,o=o!==null?o.dehydrated:null,!o)throw Error(q(317));o[On]=t}else ga(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;dt(t),o=!1}else vn!==null&&(Rm(vn),vn=null),o=!0;if(!o)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||Pe.current&1?qe===0&&(qe=3):ey())),t.updateQueue!==null&&(t.flags|=4),dt(t),null);case 4:return va(),Sm(e,t),e===null&&os(t.stateNode.containerInfo),dt(t),null;case 10:return Dg(t.type._context),dt(t),null;case 17:return Nt(t.type)&&jc(),dt(t),null;case 19:if(Te(Pe),o=t.memoizedState,o===null)return dt(t),null;if(r=(t.flags&128)!==0,a=o.rendering,a===null)if(r)ul(o,!1);else{if(qe!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(a=Qc(e),a!==null){for(t.flags|=128,ul(o,!1),r=a.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)o=n,e=r,o.flags&=14680066,a=o.alternate,a===null?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=a.childLanes,o.lanes=a.lanes,o.child=a.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=a.memoizedProps,o.memoizedState=a.memoizedState,o.updateQueue=a.updateQueue,o.type=a.type,e=a.dependencies,o.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ee(Pe,Pe.current&1|2),t.child}e=e.sibling}o.tail!==null&&ze()>ba&&(t.flags|=128,r=!0,ul(o,!1),t.lanes=4194304)}else{if(!r)if(e=Qc(a),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),ul(o,!0),o.tail===null&&o.tailMode==="hidden"&&!a.alternate&&!$e)return dt(t),null}else 2*ze()-o.renderingStartTime>ba&&n!==1073741824&&(t.flags|=128,r=!0,ul(o,!1),t.lanes=4194304);o.isBackwards?(a.sibling=t.child,t.child=a):(n=o.last,n!==null?n.sibling=a:t.child=a,o.last=a)}return o.tail!==null?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=ze(),t.sibling=null,n=Pe.current,Ee(Pe,r?n&1|2:n&1),t):(dt(t),null);case 22:case 23:return Jg(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?Dt&1073741824&&(dt(t),t.subtreeFlags&6&&(t.flags|=8192)):dt(t),null;case 24:return null;case 25:return null}throw Error(q(156,t.tag))}function e$(e,t){switch(Ag(t),t.tag){case 1:return Nt(t.type)&&jc(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return va(),Te(Rt),Te(vt),Ug(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return Hg(t),null;case 13:if(Te(Pe),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(q(340));ga()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return Te(Pe),null;case 4:return va(),null;case 10:return Dg(t.type._context),null;case 22:case 23:return Jg(),null;case 24:return null;default:return null}}var Au=!1,pt=!1,t$=typeof WeakSet=="function"?WeakSet:Set,ee=null;function qo(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){Ae(e,t,r)}else n.current=null}function Mm(e,t,n){try{n()}catch(r){Ae(e,t,r)}}var B2=!1;function n$(e,t){if(lm=Bc,e=L6(),Rg(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var i=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch{n=null;break e}var a=0,l=-1,s=-1,u=0,c=0,f=e,d=null;t:for(;;){for(var h;f!==n||i!==0&&f.nodeType!==3||(l=a+i),f!==o||r!==0&&f.nodeType!==3||(s=a+r),f.nodeType===3&&(a+=f.nodeValue.length),(h=f.firstChild)!==null;)d=f,f=h;for(;;){if(f===e)break t;if(d===n&&++u===i&&(l=a),d===o&&++c===r&&(s=a),(h=f.nextSibling)!==null)break;f=d,d=f.parentNode}f=h}n=l===-1||s===-1?null:{start:l,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(sm={focusedElem:e,selectionRange:n},Bc=!1,ee=t;ee!==null;)if(t=ee,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,ee=e;else for(;ee!==null;){t=ee;try{var m=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(m!==null){var p=m.memoizedProps,w=m.memoizedState,y=t.stateNode,g=y.getSnapshotBeforeUpdate(t.elementType===t.type?p:gn(t.type,p),w);y.__reactInternalSnapshotBeforeUpdate=g}break;case 3:var v=t.stateNode.containerInfo;v.nodeType===1?v.textContent="":v.nodeType===9&&v.documentElement&&v.removeChild(v.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(q(163))}}catch(b){Ae(t,t.return,b)}if(e=t.sibling,e!==null){e.return=t.return,ee=e;break}ee=t.return}return m=B2,B2=!1,m}function Bl(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,o!==void 0&&Mm(t,n,o)}i=i.next}while(i!==r)}}function kd(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Cm(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function R5(e){var t=e.alternate;t!==null&&(e.alternate=null,R5(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[On],delete t[ls],delete t[fm],delete t[zT],delete t[FT])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function N5(e){return e.tag===5||e.tag===3||e.tag===4}function H2(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||N5(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Em(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=Wc));else if(r!==4&&(e=e.child,e!==null))for(Em(e,t,n),e=e.sibling;e!==null;)Em(e,t,n),e=e.sibling}function km(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(km(e,t,n),e=e.sibling;e!==null;)km(e,t,n),e=e.sibling}var rt=null,yn=!1;function zr(e,t,n){for(n=n.child;n!==null;)A5(e,t,n),n=n.sibling}function A5(e,t,n){if(jn&&typeof jn.onCommitFiberUnmount=="function")try{jn.onCommitFiberUnmount(wd,n)}catch{}switch(n.tag){case 5:pt||qo(n,t);case 6:var r=rt,i=yn;rt=null,zr(e,t,n),rt=r,yn=i,rt!==null&&(yn?(e=rt,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):rt.removeChild(n.stateNode));break;case 18:rt!==null&&(yn?(e=rt,n=n.stateNode,e.nodeType===8?th(e.parentNode,n):e.nodeType===1&&th(e,n),ns(e)):th(rt,n.stateNode));break;case 4:r=rt,i=yn,rt=n.stateNode.containerInfo,yn=!0,zr(e,t,n),rt=r,yn=i;break;case 0:case 11:case 14:case 15:if(!pt&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){i=r=r.next;do{var o=i,a=o.destroy;o=o.tag,a!==void 0&&(o&2||o&4)&&Mm(n,t,a),i=i.next}while(i!==r)}zr(e,t,n);break;case 1:if(!pt&&(qo(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(l){Ae(n,t,l)}zr(e,t,n);break;case 21:zr(e,t,n);break;case 22:n.mode&1?(pt=(r=pt)||n.memoizedState!==null,zr(e,t,n),pt=r):zr(e,t,n);break;default:zr(e,t,n)}}function U2(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new t$),t.forEach(function(r){var i=f$.bind(null,e,r);n.has(r)||(n.add(r),r.then(i,i))})}}function hn(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var i=n[r];try{var o=e,a=t,l=a;e:for(;l!==null;){switch(l.tag){case 5:rt=l.stateNode,yn=!1;break e;case 3:rt=l.stateNode.containerInfo,yn=!0;break e;case 4:rt=l.stateNode.containerInfo,yn=!0;break e}l=l.return}if(rt===null)throw Error(q(160));A5(o,a,i),rt=null,yn=!1;var s=i.alternate;s!==null&&(s.return=null),i.return=null}catch(u){Ae(i,t,u)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)I5(t,e),t=t.sibling}function I5(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(hn(t,e),Rn(e),r&4){try{Bl(3,e,e.return),kd(3,e)}catch(p){Ae(e,e.return,p)}try{Bl(5,e,e.return)}catch(p){Ae(e,e.return,p)}}break;case 1:hn(t,e),Rn(e),r&512&&n!==null&&qo(n,n.return);break;case 5:if(hn(t,e),Rn(e),r&512&&n!==null&&qo(n,n.return),e.flags&32){var i=e.stateNode;try{Zl(i,"")}catch(p){Ae(e,e.return,p)}}if(r&4&&(i=e.stateNode,i!=null)){var o=e.memoizedProps,a=n!==null?n.memoizedProps:o,l=e.type,s=e.updateQueue;if(e.updateQueue=null,s!==null)try{l==="input"&&o.type==="radio"&&o.name!=null&&n6(i,o),Qp(l,a);var u=Qp(l,o);for(a=0;a<s.length;a+=2){var c=s[a],f=s[a+1];c==="style"?l6(i,f):c==="dangerouslySetInnerHTML"?o6(i,f):c==="children"?Zl(i,f):vg(i,c,f,u)}switch(l){case"input":qp(i,o);break;case"textarea":r6(i,o);break;case"select":var d=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!o.multiple;var h=o.value;h!=null?Jo(i,!!o.multiple,h,!1):d!==!!o.multiple&&(o.defaultValue!=null?Jo(i,!!o.multiple,o.defaultValue,!0):Jo(i,!!o.multiple,o.multiple?[]:"",!1))}i[ls]=o}catch(p){Ae(e,e.return,p)}}break;case 6:if(hn(t,e),Rn(e),r&4){if(e.stateNode===null)throw Error(q(162));i=e.stateNode,o=e.memoizedProps;try{i.nodeValue=o}catch(p){Ae(e,e.return,p)}}break;case 3:if(hn(t,e),Rn(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{ns(t.containerInfo)}catch(p){Ae(e,e.return,p)}break;case 4:hn(t,e),Rn(e);break;case 13:hn(t,e),Rn(e),i=e.child,i.flags&8192&&(o=i.memoizedState!==null,i.stateNode.isHidden=o,!o||i.alternate!==null&&i.alternate.memoizedState!==null||(Qg=ze())),r&4&&U2(e);break;case 22:if(c=n!==null&&n.memoizedState!==null,e.mode&1?(pt=(u=pt)||c,hn(t,e),pt=u):hn(t,e),Rn(e),r&8192){if(u=e.memoizedState!==null,(e.stateNode.isHidden=u)&&!c&&e.mode&1)for(ee=e,c=e.child;c!==null;){for(f=ee=c;ee!==null;){switch(d=ee,h=d.child,d.tag){case 0:case 11:case 14:case 15:Bl(4,d,d.return);break;case 1:qo(d,d.return);var m=d.stateNode;if(typeof m.componentWillUnmount=="function"){r=d,n=d.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(p){Ae(r,n,p)}}break;case 5:qo(d,d.return);break;case 22:if(d.memoizedState!==null){j2(f);continue}}h!==null?(h.return=d,ee=h):j2(f)}c=c.sibling}e:for(c=null,f=e;;){if(f.tag===5){if(c===null){c=f;try{i=f.stateNode,u?(o=i.style,typeof o.setProperty=="function"?o.setProperty("display","none","important"):o.display="none"):(l=f.stateNode,s=f.memoizedProps.style,a=s!=null&&s.hasOwnProperty("display")?s.display:null,l.style.display=a6("display",a))}catch(p){Ae(e,e.return,p)}}}else if(f.tag===6){if(c===null)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(p){Ae(e,e.return,p)}}else if((f.tag!==22&&f.tag!==23||f.memoizedState===null||f===e)&&f.child!==null){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;f.sibling===null;){if(f.return===null||f.return===e)break e;c===f&&(c=null),f=f.return}c===f&&(c=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:hn(t,e),Rn(e),r&4&&U2(e);break;case 21:break;default:hn(t,e),Rn(e)}}function Rn(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(N5(n)){var r=n;break e}n=n.return}throw Error(q(160))}switch(r.tag){case 5:var i=r.stateNode;r.flags&32&&(Zl(i,""),r.flags&=-33);var o=H2(e);km(e,o,i);break;case 3:case 4:var a=r.stateNode.containerInfo,l=H2(e);Em(e,l,a);break;default:throw Error(q(161))}}catch(s){Ae(e,e.return,s)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function r$(e,t,n){ee=e,L5(e)}function L5(e,t,n){for(var r=(e.mode&1)!==0;ee!==null;){var i=ee,o=i.child;if(i.tag===22&&r){var a=i.memoizedState!==null||Au;if(!a){var l=i.alternate,s=l!==null&&l.memoizedState!==null||pt;l=Au;var u=pt;if(Au=a,(pt=s)&&!u)for(ee=i;ee!==null;)a=ee,s=a.child,a.tag===22&&a.memoizedState!==null?V2(i):s!==null?(s.return=a,ee=s):V2(i);for(;o!==null;)ee=o,L5(o),o=o.sibling;ee=i,Au=l,pt=u}W2(e)}else i.subtreeFlags&8772&&o!==null?(o.return=i,ee=o):W2(e)}}function W2(e){for(;ee!==null;){var t=ee;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:pt||kd(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!pt)if(n===null)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:gn(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;o!==null&&k2(t,o,r);break;case 3:var a=t.updateQueue;if(a!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}k2(t,a,n)}break;case 5:var l=t.stateNode;if(n===null&&t.flags&4){n=l;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var u=t.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var f=c.dehydrated;f!==null&&ns(f)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(q(163))}pt||t.flags&512&&Cm(t)}catch(d){Ae(t,t.return,d)}}if(t===e){ee=null;break}if(n=t.sibling,n!==null){n.return=t.return,ee=n;break}ee=t.return}}function j2(e){for(;ee!==null;){var t=ee;if(t===e){ee=null;break}var n=t.sibling;if(n!==null){n.return=t.return,ee=n;break}ee=t.return}}function V2(e){for(;ee!==null;){var t=ee;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{kd(4,t)}catch(s){Ae(t,n,s)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var i=t.return;try{r.componentDidMount()}catch(s){Ae(t,i,s)}}var o=t.return;try{Cm(t)}catch(s){Ae(t,o,s)}break;case 5:var a=t.return;try{Cm(t)}catch(s){Ae(t,a,s)}}}catch(s){Ae(t,t.return,s)}if(t===e){ee=null;break}var l=t.sibling;if(l!==null){l.return=t.return,ee=l;break}ee=t.return}}var i$=Math.ceil,ef=Nr.ReactCurrentDispatcher,Gg=Nr.ReactCurrentOwner,sn=Nr.ReactCurrentBatchConfig,pe=0,et=null,He=null,lt=0,Dt=0,Yo=Ei(0),qe=0,hs=null,no=0,Td=0,Kg=0,Hl=null,Tt=null,Qg=0,ba=1/0,sr=null,tf=!1,Tm=null,ii=null,Iu=!1,Xr=null,nf=0,Ul=0,$m=null,bc=-1,xc=0;function Ct(){return pe&6?ze():bc!==-1?bc:bc=ze()}function oi(e){return e.mode&1?pe&2&&lt!==0?lt&-lt:HT.transition!==null?(xc===0&&(xc=w6()),xc):(e=xe,e!==0||(e=window.event,e=e===void 0?16:E6(e.type)),e):1}function _n(e,t,n,r){if(50<Ul)throw Ul=0,$m=null,Error(q(185));zs(e,n,r),(!(pe&2)||e!==et)&&(e===et&&(!(pe&2)&&(Td|=n),qe===4&&Vr(e,lt)),At(e,r),n===1&&pe===0&&!(t.mode&1)&&(ba=ze()+500,Md&&ki()))}function At(e,t){var n=e.callbackNode;Hk(e,t);var r=Fc(e,e===et?lt:0);if(r===0)n!==null&&e2(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&e2(n),t===1)e.tag===0?BT(q2.bind(null,e)):V6(q2.bind(null,e)),OT(function(){!(pe&6)&&ki()}),n=null;else{switch(b6(r)){case 1:n=Sg;break;case 4:n=y6;break;case 16:n=zc;break;case 536870912:n=v6;break;default:n=zc}n=W5(n,O5.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function O5(e,t){if(bc=-1,xc=0,pe&6)throw Error(q(327));var n=e.callbackNode;if(ia()&&e.callbackNode!==n)return null;var r=Fc(e,e===et?lt:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=rf(e,r);else{t=r;var i=pe;pe|=2;var o=z5();(et!==e||lt!==t)&&(sr=null,ba=ze()+500,Yi(e,t));do try{l$();break}catch(l){D5(e,l)}while(!0);Og(),ef.current=o,pe=i,He!==null?t=0:(et=null,lt=0,t=qe)}if(t!==0){if(t===2&&(i=nm(e),i!==0&&(r=i,t=Pm(e,i))),t===1)throw n=hs,Yi(e,0),Vr(e,r),At(e,ze()),n;if(t===6)Vr(e,r);else{if(i=e.current.alternate,!(r&30)&&!o$(i)&&(t=rf(e,r),t===2&&(o=nm(e),o!==0&&(r=o,t=Pm(e,o))),t===1))throw n=hs,Yi(e,0),Vr(e,r),At(e,ze()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(q(345));case 2:zi(e,Tt,sr);break;case 3:if(Vr(e,r),(r&130023424)===r&&(t=Qg+500-ze(),10<t)){if(Fc(e,0)!==0)break;if(i=e.suspendedLanes,(i&r)!==r){Ct(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=cm(zi.bind(null,e,Tt,sr),t);break}zi(e,Tt,sr);break;case 4:if(Vr(e,r),(r&4194240)===r)break;for(t=e.eventTimes,i=-1;0<r;){var a=31-xn(r);o=1<<a,a=t[a],a>i&&(i=a),r&=~o}if(r=i,r=ze()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*i$(r/1960))-r,10<r){e.timeoutHandle=cm(zi.bind(null,e,Tt,sr),r);break}zi(e,Tt,sr);break;case 5:zi(e,Tt,sr);break;default:throw Error(q(329))}}}return At(e,ze()),e.callbackNode===n?O5.bind(null,e):null}function Pm(e,t){var n=Hl;return e.current.memoizedState.isDehydrated&&(Yi(e,t).flags|=256),e=rf(e,t),e!==2&&(t=Tt,Tt=n,t!==null&&Rm(t)),e}function Rm(e){Tt===null?Tt=e:Tt.push.apply(Tt,e)}function o$(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!Sn(o(),i))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Vr(e,t){for(t&=~Kg,t&=~Td,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-xn(t),r=1<<n;e[n]=-1,t&=~r}}function q2(e){if(pe&6)throw Error(q(327));ia();var t=Fc(e,0);if(!(t&1))return At(e,ze()),null;var n=rf(e,t);if(e.tag!==0&&n===2){var r=nm(e);r!==0&&(t=r,n=Pm(e,r))}if(n===1)throw n=hs,Yi(e,0),Vr(e,t),At(e,ze()),n;if(n===6)throw Error(q(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,zi(e,Tt,sr),At(e,ze()),null}function Zg(e,t){var n=pe;pe|=1;try{return e(t)}finally{pe=n,pe===0&&(ba=ze()+500,Md&&ki())}}function ro(e){Xr!==null&&Xr.tag===0&&!(pe&6)&&ia();var t=pe;pe|=1;var n=sn.transition,r=xe;try{if(sn.transition=null,xe=1,e)return e()}finally{xe=r,sn.transition=n,pe=t,!(pe&6)&&ki()}}function Jg(){Dt=Yo.current,Te(Yo)}function Yi(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,LT(n)),He!==null)for(n=He.return;n!==null;){var r=n;switch(Ag(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&jc();break;case 3:va(),Te(Rt),Te(vt),Ug();break;case 5:Hg(r);break;case 4:va();break;case 13:Te(Pe);break;case 19:Te(Pe);break;case 10:Dg(r.type._context);break;case 22:case 23:Jg()}n=n.return}if(et=e,He=e=ai(e.current,null),lt=Dt=t,qe=0,hs=null,Kg=Td=no=0,Tt=Hl=null,Wi!==null){for(t=0;t<Wi.length;t++)if(n=Wi[t],r=n.interleaved,r!==null){n.interleaved=null;var i=r.next,o=n.pending;if(o!==null){var a=o.next;o.next=i,r.next=a}n.pending=r}Wi=null}return e}function D5(e,t){do{var n=He;try{if(Og(),yc.current=Jc,Zc){for(var r=Re.memoizedState;r!==null;){var i=r.queue;i!==null&&(i.pending=null),r=r.next}Zc=!1}if(to=0,Qe=Ve=Re=null,Fl=!1,cs=0,Gg.current=null,n===null||n.return===null){qe=1,hs=t,He=null;break}e:{var o=e,a=n.return,l=n,s=t;if(t=lt,l.flags|=32768,s!==null&&typeof s=="object"&&typeof s.then=="function"){var u=s,c=l,f=c.tag;if(!(c.mode&1)&&(f===0||f===11||f===15)){var d=c.alternate;d?(c.updateQueue=d.updateQueue,c.memoizedState=d.memoizedState,c.lanes=d.lanes):(c.updateQueue=null,c.memoizedState=null)}var h=A2(a);if(h!==null){h.flags&=-257,I2(h,a,l,o,t),h.mode&1&&N2(o,u,t),t=h,s=u;var m=t.updateQueue;if(m===null){var p=new Set;p.add(s),t.updateQueue=p}else m.add(s);break e}else{if(!(t&1)){N2(o,u,t),ey();break e}s=Error(q(426))}}else if($e&&l.mode&1){var w=A2(a);if(w!==null){!(w.flags&65536)&&(w.flags|=256),I2(w,a,l,o,t),Ig(wa(s,l));break e}}o=s=wa(s,l),qe!==4&&(qe=2),Hl===null?Hl=[o]:Hl.push(o),o=a;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t;var y=b5(o,s,t);E2(o,y);break e;case 1:l=s;var g=o.type,v=o.stateNode;if(!(o.flags&128)&&(typeof g.getDerivedStateFromError=="function"||v!==null&&typeof v.componentDidCatch=="function"&&(ii===null||!ii.has(v)))){o.flags|=65536,t&=-t,o.lanes|=t;var b=x5(o,l,t);E2(o,b);break e}}o=o.return}while(o!==null)}B5(n)}catch(_){t=_,He===n&&n!==null&&(He=n=n.return);continue}break}while(!0)}function z5(){var e=ef.current;return ef.current=Jc,e===null?Jc:e}function ey(){(qe===0||qe===3||qe===2)&&(qe=4),et===null||!(no&268435455)&&!(Td&268435455)||Vr(et,lt)}function rf(e,t){var n=pe;pe|=2;var r=z5();(et!==e||lt!==t)&&(sr=null,Yi(e,t));do try{a$();break}catch(i){D5(e,i)}while(!0);if(Og(),pe=n,ef.current=r,He!==null)throw Error(q(261));return et=null,lt=0,qe}function a$(){for(;He!==null;)F5(He)}function l$(){for(;He!==null&&!Nk();)F5(He)}function F5(e){var t=U5(e.alternate,e,Dt);e.memoizedProps=e.pendingProps,t===null?B5(e):He=t,Gg.current=null}function B5(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=e$(n,t),n!==null){n.flags&=32767,He=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{qe=6,He=null;return}}else if(n=JT(n,t,Dt),n!==null){He=n;return}if(t=t.sibling,t!==null){He=t;return}He=t=e}while(t!==null);qe===0&&(qe=5)}function zi(e,t,n){var r=xe,i=sn.transition;try{sn.transition=null,xe=1,s$(e,t,n,r)}finally{sn.transition=i,xe=r}return null}function s$(e,t,n,r){do ia();while(Xr!==null);if(pe&6)throw Error(q(327));n=e.finishedWork;var i=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(q(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(Uk(e,o),e===et&&(He=et=null,lt=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Iu||(Iu=!0,W5(zc,function(){return ia(),null})),o=(n.flags&15990)!==0,n.subtreeFlags&15990||o){o=sn.transition,sn.transition=null;var a=xe;xe=1;var l=pe;pe|=4,Gg.current=null,n$(e,n),I5(n,e),TT(sm),Bc=!!lm,sm=lm=null,e.current=n,r$(n),Ak(),pe=l,xe=a,sn.transition=o}else e.current=n;if(Iu&&(Iu=!1,Xr=e,nf=i),o=e.pendingLanes,o===0&&(ii=null),Ok(n.stateNode),At(e,ze()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)i=t[n],r(i.value,{componentStack:i.stack,digest:i.digest});if(tf)throw tf=!1,e=Tm,Tm=null,e;return nf&1&&e.tag!==0&&ia(),o=e.pendingLanes,o&1?e===$m?Ul++:(Ul=0,$m=e):Ul=0,ki(),null}function ia(){if(Xr!==null){var e=b6(nf),t=sn.transition,n=xe;try{if(sn.transition=null,xe=16>e?16:e,Xr===null)var r=!1;else{if(e=Xr,Xr=null,nf=0,pe&6)throw Error(q(331));var i=pe;for(pe|=4,ee=e.current;ee!==null;){var o=ee,a=o.child;if(ee.flags&16){var l=o.deletions;if(l!==null){for(var s=0;s<l.length;s++){var u=l[s];for(ee=u;ee!==null;){var c=ee;switch(c.tag){case 0:case 11:case 15:Bl(8,c,o)}var f=c.child;if(f!==null)f.return=c,ee=f;else for(;ee!==null;){c=ee;var d=c.sibling,h=c.return;if(R5(c),c===u){ee=null;break}if(d!==null){d.return=h,ee=d;break}ee=h}}}var m=o.alternate;if(m!==null){var p=m.child;if(p!==null){m.child=null;do{var w=p.sibling;p.sibling=null,p=w}while(p!==null)}}ee=o}}if(o.subtreeFlags&2064&&a!==null)a.return=o,ee=a;else e:for(;ee!==null;){if(o=ee,o.flags&2048)switch(o.tag){case 0:case 11:case 15:Bl(9,o,o.return)}var y=o.sibling;if(y!==null){y.return=o.return,ee=y;break e}ee=o.return}}var g=e.current;for(ee=g;ee!==null;){a=ee;var v=a.child;if(a.subtreeFlags&2064&&v!==null)v.return=a,ee=v;else e:for(a=g;ee!==null;){if(l=ee,l.flags&2048)try{switch(l.tag){case 0:case 11:case 15:kd(9,l)}}catch(_){Ae(l,l.return,_)}if(l===a){ee=null;break e}var b=l.sibling;if(b!==null){b.return=l.return,ee=b;break e}ee=l.return}}if(pe=i,ki(),jn&&typeof jn.onPostCommitFiberRoot=="function")try{jn.onPostCommitFiberRoot(wd,e)}catch{}r=!0}return r}finally{xe=n,sn.transition=t}}return!1}function Y2(e,t,n){t=wa(n,t),t=b5(e,t,1),e=ri(e,t,1),t=Ct(),e!==null&&(zs(e,1,t),At(e,t))}function Ae(e,t,n){if(e.tag===3)Y2(e,e,n);else for(;t!==null;){if(t.tag===3){Y2(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(ii===null||!ii.has(r))){e=wa(n,e),e=x5(t,e,1),t=ri(t,e,1),e=Ct(),t!==null&&(zs(t,1,e),At(t,e));break}}t=t.return}}function u$(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=Ct(),e.pingedLanes|=e.suspendedLanes&n,et===e&&(lt&n)===n&&(qe===4||qe===3&&(lt&130023424)===lt&&500>ze()-Qg?Yi(e,0):Kg|=n),At(e,t)}function H5(e,t){t===0&&(e.mode&1?(t=Mu,Mu<<=1,!(Mu&130023424)&&(Mu=4194304)):t=1);var n=Ct();e=Sr(e,t),e!==null&&(zs(e,t,n),At(e,n))}function c$(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),H5(e,n)}function f$(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;i!==null&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(q(314))}r!==null&&r.delete(t),H5(e,n)}var U5;U5=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||Rt.current)Pt=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return Pt=!1,ZT(e,t,n);Pt=!!(e.flags&131072)}else Pt=!1,$e&&t.flags&1048576&&q6(t,Yc,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;wc(e,t),e=t.pendingProps;var i=ma(t,vt.current);ra(t,n),i=jg(null,t,r,e,i,n);var o=Vg();return t.flags|=1,typeof i=="object"&&i!==null&&typeof i.render=="function"&&i.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Nt(r)?(o=!0,Vc(t)):o=!1,t.memoizedState=i.state!==null&&i.state!==void 0?i.state:null,Fg(t),i.updater=Ed,t.stateNode=i,i._reactInternals=t,ym(t,r,e,n),t=bm(null,t,r,!0,o,n)):(t.tag=0,$e&&o&&Ng(t),xt(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(wc(e,t),e=t.pendingProps,i=r._init,r=i(r._payload),t.type=r,i=t.tag=h$(r),e=gn(r,e),i){case 0:t=wm(null,t,r,e,n);break e;case 1:t=D2(null,t,r,e,n);break e;case 11:t=L2(null,t,r,e,n);break e;case 14:t=O2(null,t,r,gn(r.type,e),n);break e}throw Error(q(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:gn(r,i),wm(e,t,r,i,n);case 1:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:gn(r,i),D2(e,t,r,i,n);case 3:e:{if(C5(t),e===null)throw Error(q(387));r=t.pendingProps,o=t.memoizedState,i=o.element,Z6(e,t),Kc(t,r,null,n);var a=t.memoizedState;if(r=a.element,o.isDehydrated)if(o={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=o,t.memoizedState=o,t.flags&256){i=wa(Error(q(423)),t),t=z2(e,t,r,n,i);break e}else if(r!==i){i=wa(Error(q(424)),t),t=z2(e,t,r,n,i);break e}else for(Ft=ni(t.stateNode.containerInfo.firstChild),Ut=t,$e=!0,vn=null,n=K6(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(ga(),r===i){t=Mr(e,t,n);break e}xt(e,t,r,n)}t=t.child}return t;case 5:return J6(t),e===null&&pm(t),r=t.type,i=t.pendingProps,o=e!==null?e.memoizedProps:null,a=i.children,um(r,i)?a=null:o!==null&&um(r,o)&&(t.flags|=32),M5(e,t),xt(e,t,a,n),t.child;case 6:return e===null&&pm(t),null;case 13:return E5(e,t,n);case 4:return Bg(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=ya(t,null,r,n):xt(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:gn(r,i),L2(e,t,r,i,n);case 7:return xt(e,t,t.pendingProps,n),t.child;case 8:return xt(e,t,t.pendingProps.children,n),t.child;case 12:return xt(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,o=t.memoizedProps,a=i.value,Ee(Xc,r._currentValue),r._currentValue=a,o!==null)if(Sn(o.value,a)){if(o.children===i.children&&!Rt.current){t=Mr(e,t,n);break e}}else for(o=t.child,o!==null&&(o.return=t);o!==null;){var l=o.dependencies;if(l!==null){a=o.child;for(var s=l.firstContext;s!==null;){if(s.context===r){if(o.tag===1){s=wr(-1,n&-n),s.tag=2;var u=o.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?s.next=s:(s.next=c.next,c.next=s),u.pending=s}}o.lanes|=n,s=o.alternate,s!==null&&(s.lanes|=n),mm(o.return,n,t),l.lanes|=n;break}s=s.next}}else if(o.tag===10)a=o.type===t.type?null:o.child;else if(o.tag===18){if(a=o.return,a===null)throw Error(q(341));a.lanes|=n,l=a.alternate,l!==null&&(l.lanes|=n),mm(a,n,t),a=o.sibling}else a=o.child;if(a!==null)a.return=o;else for(a=o;a!==null;){if(a===t){a=null;break}if(o=a.sibling,o!==null){o.return=a.return,a=o;break}a=a.return}o=a}xt(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,ra(t,n),i=un(i),r=r(i),t.flags|=1,xt(e,t,r,n),t.child;case 14:return r=t.type,i=gn(r,t.pendingProps),i=gn(r.type,i),O2(e,t,r,i,n);case 15:return _5(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:gn(r,i),wc(e,t),t.tag=1,Nt(r)?(e=!0,Vc(t)):e=!1,ra(t,n),w5(t,r,i),ym(t,r,i,n),bm(null,t,r,!0,e,n);case 19:return k5(e,t,n);case 22:return S5(e,t,n)}throw Error(q(156,t.tag))};function W5(e,t){return g6(e,t)}function d$(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function nn(e,t,n,r){return new d$(e,t,n,r)}function ty(e){return e=e.prototype,!(!e||!e.isReactComponent)}function h$(e){if(typeof e=="function")return ty(e)?1:0;if(e!=null){if(e=e.$$typeof,e===bg)return 11;if(e===xg)return 14}return 2}function ai(e,t){var n=e.alternate;return n===null?(n=nn(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function _c(e,t,n,r,i,o){var a=2;if(r=e,typeof e=="function")ty(e)&&(a=1);else if(typeof e=="string")a=5;else e:switch(e){case Do:return Xi(n.children,i,o,t);case wg:a=8,i|=8;break;case Hp:return e=nn(12,n,t,i|2),e.elementType=Hp,e.lanes=o,e;case Up:return e=nn(13,n,t,i),e.elementType=Up,e.lanes=o,e;case Wp:return e=nn(19,n,t,i),e.elementType=Wp,e.lanes=o,e;case J3:return $d(n,i,o,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Q3:a=10;break e;case Z3:a=9;break e;case bg:a=11;break e;case xg:a=14;break e;case Ur:a=16,r=null;break e}throw Error(q(130,e==null?e:typeof e,""))}return t=nn(a,n,t,i),t.elementType=e,t.type=r,t.lanes=o,t}function Xi(e,t,n,r){return e=nn(7,e,r,t),e.lanes=n,e}function $d(e,t,n,r){return e=nn(22,e,r,t),e.elementType=J3,e.lanes=n,e.stateNode={isHidden:!1},e}function uh(e,t,n){return e=nn(6,e,null,t),e.lanes=n,e}function ch(e,t,n){return t=nn(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function p$(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=j0(0),this.expirationTimes=j0(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=j0(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function ny(e,t,n,r,i,o,a,l,s){return e=new p$(e,t,n,l,s),t===1?(t=1,o===!0&&(t|=8)):t=0,o=nn(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Fg(o),e}function m$(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Oo,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function j5(e){if(!e)return hi;e=e._reactInternals;e:{if(vo(e)!==e||e.tag!==1)throw Error(q(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Nt(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(q(171))}if(e.tag===1){var n=e.type;if(Nt(n))return j6(e,n,t)}return t}function V5(e,t,n,r,i,o,a,l,s){return e=ny(n,r,!0,e,i,o,a,l,s),e.context=j5(null),n=e.current,r=Ct(),i=oi(n),o=wr(r,i),o.callback=t??null,ri(n,o,i),e.current.lanes=i,zs(e,i,r),At(e,r),e}function Pd(e,t,n,r){var i=t.current,o=Ct(),a=oi(i);return n=j5(n),t.context===null?t.context=n:t.pendingContext=n,t=wr(o,a),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=ri(i,t,a),e!==null&&(_n(e,i,a,o),gc(e,i,a)),a}function of(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function X2(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function ry(e,t){X2(e,t),(e=e.alternate)&&X2(e,t)}function g$(){return null}var q5=typeof reportError=="function"?reportError:function(e){console.error(e)};function iy(e){this._internalRoot=e}Rd.prototype.render=iy.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(q(409));Pd(e,t,null,null)};Rd.prototype.unmount=iy.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;ro(function(){Pd(null,e,null,null)}),t[_r]=null}};function Rd(e){this._internalRoot=e}Rd.prototype.unstable_scheduleHydration=function(e){if(e){var t=S6();e={blockedOn:null,target:e,priority:t};for(var n=0;n<jr.length&&t!==0&&t<jr[n].priority;n++);jr.splice(n,0,e),n===0&&C6(e)}};function oy(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Nd(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function G2(){}function y$(e,t,n,r,i){if(i){if(typeof r=="function"){var o=r;r=function(){var u=of(a);o.call(u)}}var a=V5(t,r,e,0,null,!1,!1,"",G2);return e._reactRootContainer=a,e[_r]=a.current,os(e.nodeType===8?e.parentNode:e),ro(),a}for(;i=e.lastChild;)e.removeChild(i);if(typeof r=="function"){var l=r;r=function(){var u=of(s);l.call(u)}}var s=ny(e,0,!1,null,null,!1,!1,"",G2);return e._reactRootContainer=s,e[_r]=s.current,os(e.nodeType===8?e.parentNode:e),ro(function(){Pd(t,s,n,r)}),s}function Ad(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o;if(typeof i=="function"){var l=i;i=function(){var s=of(a);l.call(s)}}Pd(t,a,e,i)}else a=y$(n,t,e,i,r);return of(a)}x6=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=xl(t.pendingLanes);n!==0&&(Mg(t,n|1),At(t,ze()),!(pe&6)&&(ba=ze()+500,ki()))}break;case 13:ro(function(){var r=Sr(e,1);if(r!==null){var i=Ct();_n(r,e,1,i)}}),ry(e,1)}};Cg=function(e){if(e.tag===13){var t=Sr(e,134217728);if(t!==null){var n=Ct();_n(t,e,134217728,n)}ry(e,134217728)}};_6=function(e){if(e.tag===13){var t=oi(e),n=Sr(e,t);if(n!==null){var r=Ct();_n(n,e,t,r)}ry(e,t)}};S6=function(){return xe};M6=function(e,t){var n=xe;try{return xe=e,t()}finally{xe=n}};Jp=function(e,t,n){switch(t){case"input":if(qp(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Sd(r);if(!i)throw Error(q(90));t6(r),qp(r,i)}}}break;case"textarea":r6(e,n);break;case"select":t=n.value,t!=null&&Jo(e,!!n.multiple,t,!1)}};c6=Zg;f6=ro;var v$={usingClientEntryPoint:!1,Events:[Bs,Ho,Sd,s6,u6,Zg]},cl={findFiberByHostInstance:Ui,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},w$={bundleType:cl.bundleType,version:cl.version,rendererPackageName:cl.rendererPackageName,rendererConfig:cl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Nr.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=p6(e),e===null?null:e.stateNode},findFiberByHostInstance:cl.findFiberByHostInstance||g$,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Lu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Lu.isDisabled&&Lu.supportsFiber)try{wd=Lu.inject(w$),jn=Lu}catch{}}Gt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=v$;Gt.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!oy(t))throw Error(q(200));return m$(e,t,null,n)};Gt.createRoot=function(e,t){if(!oy(e))throw Error(q(299));var n=!1,r="",i=q5;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(i=t.onRecoverableError)),t=ny(e,1,!1,null,null,n,!1,r,i),e[_r]=t.current,os(e.nodeType===8?e.parentNode:e),new iy(t)};Gt.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(q(188)):(e=Object.keys(e).join(","),Error(q(268,e)));return e=p6(t),e=e===null?null:e.stateNode,e};Gt.flushSync=function(e){return ro(e)};Gt.hydrate=function(e,t,n){if(!Nd(t))throw Error(q(200));return Ad(null,e,t,!0,n)};Gt.hydrateRoot=function(e,t,n){if(!oy(e))throw Error(q(405));var r=n!=null&&n.hydratedSources||null,i=!1,o="",a=q5;if(n!=null&&(n.unstable_strictMode===!0&&(i=!0),n.identifierPrefix!==void 0&&(o=n.identifierPrefix),n.onRecoverableError!==void 0&&(a=n.onRecoverableError)),t=V5(t,null,e,1,n??null,i,!1,o,a),e[_r]=t.current,os(e),r)for(e=0;e<r.length;e++)n=r[e],i=n._getVersion,i=i(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Rd(t)};Gt.render=function(e,t,n){if(!Nd(t))throw Error(q(200));return Ad(null,e,t,!1,n)};Gt.unmountComponentAtNode=function(e){if(!Nd(e))throw Error(q(40));return e._reactRootContainer?(ro(function(){Ad(null,null,e,!1,function(){e._reactRootContainer=null,e[_r]=null})}),!0):!1};Gt.unstable_batchedUpdates=Zg;Gt.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Nd(n))throw Error(q(200));if(e==null||e._reactInternals===void 0)throw Error(q(38));return Ad(e,t,n,!1,r)};Gt.version="18.3.1-next-f1338f8080-20240426";function Y5(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(Y5)}catch(e){console.error(e)}}Y5(),Y3.exports=Gt;var wo=Y3.exports;const b$=g3(wo);var X5,K2=wo;X5=K2.createRoot,K2.hydrateRoot;var x$=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,_$=I3(function(e){return x$.test(e)||e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)<91}),S$=pg(function(e,t){var n=e.styles,r=yd([n],void 0,x.useContext(mg)),i=x.useRef();return jv(function(){var o=t.key+"-global",a=new t.sheet.constructor({key:o,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),l=!1,s=document.querySelector('style[data-emotion="'+o+" "+r.name+'"]');return t.sheet.tags.length&&(a.before=t.sheet.tags[0]),s!==null&&(l=!0,s.setAttribute("data-emotion",o),a.hydrate([s])),i.current=[a,l],function(){a.flush()}},[t]),jv(function(){var o=i.current,a=o[0],l=o[1];if(l){o[1]=!1;return}if(r.next!==void 0&&hg(t,r.next,!0),a.tags.length){var s=a.tags[a.tags.length-1].nextElementSibling;a.before=s,a.flush()}t.insert("",r,a,!1)},[t,r.name]),null});function G5(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return yd(t)}var M$=function(){var t=G5.apply(void 0,arguments),n="animation-"+t.name;return{name:n,styles:"@keyframes "+n+"{"+t.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},C$=_$,E$=function(t){return t!=="theme"},Q2=function(t){return typeof t=="string"&&t.charCodeAt(0)>96?C$:E$},Z2=function(t,n,r){var i;if(n){var o=n.shouldForwardProp;i=t.__emotion_forwardProp&&o?function(a){return t.__emotion_forwardProp(a)&&o(a)}:o}return typeof i!="function"&&r&&(i=t.__emotion_forwardProp),i},k$=!1,T$=function(t){var n=t.cache,r=t.serialized,i=t.isStringTag;return dg(n,r,i),W3(function(){return hg(n,r,i)}),null},ie=function e(t,n){var r=t.__emotion_real===t,i=r&&t.__emotion_base||t,o,a;n!==void 0&&(o=n.label,a=n.target);var l=Z2(t,n,r),s=l||Q2(i),u=!s("as");return function(){var c=arguments,f=r&&t.__emotion_styles!==void 0?t.__emotion_styles.slice(0):[];if(o!==void 0&&f.push("label:"+o+";"),c[0]==null||c[0].raw===void 0)f.push.apply(f,c);else{f.push(c[0][0]);for(var d=c.length,h=1;h<d;h++)f.push(c[h],c[0][h])}var m=pg(function(p,w,y){var g=u&&p.as||i,v="",b=[],_=p;if(p.theme==null){_={};for(var M in p)_[M]=p[M];_.theme=x.useContext(mg)}typeof p.className=="string"?v=B3(w.registered,b,p.className):p.className!=null&&(v=p.className+" ");var S=yd(f.concat(b),w.registered,_);v+=w.key+"-"+S.name,a!==void 0&&(v+=" "+a);var C=u&&l===void 0?Q2(g):s,k={};for(var $ in p)u&&$==="as"||C($)&&(k[$]=p[$]);return k.className=v,y&&(k.ref=y),x.createElement(x.Fragment,null,x.createElement(T$,{cache:w,serialized:S,isStringTag:typeof g=="string"}),x.createElement(g,k))});return m.displayName=o!==void 0?o:"Styled("+(typeof i=="string"?i:i.displayName||i.name||"Component")+")",m.defaultProps=t.defaultProps,m.__emotion_real=m,m.__emotion_base=i,m.__emotion_styles=f,m.__emotion_forwardProp=l,Object.defineProperty(m,"toString",{value:function(){return a===void 0&&k$?"NO_COMPONENT_SELECTOR":"."+a}}),m.withComponent=function(p,w){return e(p,zp({},n,w,{shouldForwardProp:Z2(m,w,!0)})).apply(void 0,f)},m}};const K5=(e,t)=>{if(typeof e=="number"){if(t===3)return{mode:"rgb",r:(e>>8&15|e>>4&240)/255,g:(e>>4&15|e&240)/255,b:(e&15|e<<4&240)/255};if(t===4)return{mode:"rgb",r:(e>>12&15|e>>8&240)/255,g:(e>>8&15|e>>4&240)/255,b:(e>>4&15|e&240)/255,alpha:(e&15|e<<4&240)/255};if(t===6)return{mode:"rgb",r:(e>>16&255)/255,g:(e>>8&255)/255,b:(e&255)/255};if(t===8)return{mode:"rgb",r:(e>>24&255)/255,g:(e>>16&255)/255,b:(e>>8&255)/255,alpha:(e&255)/255}}},$$={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},P$=e=>K5($$[e.toLowerCase()],6),R$=/^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i,N$=e=>{let t;return(t=e.match(R$))?K5(parseInt(t[1],16),t[1].length):void 0},li="([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)",Wl=`${li}%`,ay=`(?:${li}%|${li})`,A$=`(?:${li}(deg|grad|rad|turn)|${li})`,xa="\\s*,\\s*",I$=new RegExp(`^rgba?\\(\\s*${li}${xa}${li}${xa}${li}\\s*(?:,\\s*${ay}\\s*)?\\)$`),L$=new RegExp(`^rgba?\\(\\s*${Wl}${xa}${Wl}${xa}${Wl}\\s*(?:,\\s*${ay}\\s*)?\\)$`),O$=e=>{let t={mode:"rgb"},n;if(n=e.match(I$))n[1]!==void 0&&(t.r=n[1]/255),n[2]!==void 0&&(t.g=n[2]/255),n[3]!==void 0&&(t.b=n[3]/255);else if(n=e.match(L$))n[1]!==void 0&&(t.r=n[1]/100),n[2]!==void 0&&(t.g=n[2]/100),n[3]!==void 0&&(t.b=n[3]/100);else return;return n[4]!==void 0?t.alpha=Math.max(0,Math.min(1,n[4]/100)):n[5]!==void 0&&(t.alpha=Math.max(0,Math.min(1,+n[5]))),t},Q5=(e,t)=>e===void 0?void 0:typeof e!="object"?V$(e):e.mode!==void 0?e:t?{...e,mode:t}:void 0,Id=(e="rgb")=>t=>(t=Q5(t,e))!==void 0?t.mode===e?t:Dn[t.mode][e]?Dn[t.mode][e](t):e==="rgb"?Dn[t.mode].rgb(t):Dn.rgb[e](Dn[t.mode].rgb(t)):void 0,Dn={},Z5={},af=[],J5={},D$=e=>e,we=e=>(Dn[e.mode]={...Dn[e.mode],...e.toMode},Object.keys(e.fromMode||{}).forEach(t=>{Dn[t]||(Dn[t]={}),Dn[t][e.mode]=e.fromMode[t]}),e.ranges||(e.ranges={}),e.difference||(e.difference={}),e.channels.forEach(t=>{if(e.ranges[t]===void 0&&(e.ranges[t]=[0,1]),!e.interpolate[t])throw new Error(`Missing interpolator for: ${t}`);typeof e.interpolate[t]=="function"&&(e.interpolate[t]={use:e.interpolate[t]}),e.interpolate[t].fixup||(e.interpolate[t].fixup=D$)}),Z5[e.mode]=e,(e.parse||[]).forEach(t=>{z$(t,e.mode)}),Id(e.mode)),e4=e=>Z5[e],z$=(e,t)=>{if(typeof e=="string"){if(!t)throw new Error("'mode' required when 'parser' is a string");J5[e]=t}else typeof e=="function"&&af.indexOf(e)<0&&af.push(e)},Nm=/[^\x00-\x7F]|[a-zA-Z_]/,F$=/[^\x00-\x7F]|[-\w]/,Y={Function:"function",Ident:"ident",Number:"number",Percentage:"percentage",ParenClose:")",None:"none",Hue:"hue",Alpha:"alpha"};let re=0;function Ou(e){let t=e[re],n=e[re+1];return t==="-"||t==="+"?/\d/.test(n)||n==="."&&/\d/.test(e[re+2]):t==="."?/\d/.test(n):/\d/.test(t)}function Am(e){if(re>=e.length)return!1;let t=e[re];if(Nm.test(t))return!0;if(t==="-"){if(e.length-re<2)return!1;let n=e[re+1];return!!(n==="-"||Nm.test(n))}return!1}const B$={deg:1,rad:180/Math.PI,grad:9/10,turn:360};function fl(e){let t="";if((e[re]==="-"||e[re]==="+")&&(t+=e[re++]),t+=Du(e),e[re]==="."&&/\d/.test(e[re+1])&&(t+=e[re++]+Du(e)),(e[re]==="e"||e[re]==="E")&&((e[re+1]==="-"||e[re+1]==="+")&&/\d/.test(e[re+2])?t+=e[re++]+e[re++]+Du(e):/\d/.test(e[re+1])&&(t+=e[re++]+Du(e))),Am(e)){let n=lf(e);return n==="deg"||n==="rad"||n==="turn"||n==="grad"?{type:Y.Hue,value:t*B$[n]}:void 0}return e[re]==="%"?(re++,{type:Y.Percentage,value:+t}):{type:Y.Number,value:+t}}function Du(e){let t="";for(;/\d/.test(e[re]);)t+=e[re++];return t}function lf(e){let t="";for(;re<e.length&&F$.test(e[re]);)t+=e[re++];return t}function H$(e){let t=lf(e);return e[re]==="("?(re++,{type:Y.Function,value:t}):t==="none"?{type:Y.None,value:void 0}:{type:Y.Ident,value:t}}function U$(e=""){let t=e.trim(),n=[],r;for(re=0;re<t.length;){if(r=t[re++],r===`
`||r==="	"||r===" "){for(;re<t.length&&(t[re]===`
`||t[re]==="	"||t[re]===" ");)re++;continue}if(r===",")return;if(r===")"){n.push({type:Y.ParenClose});continue}if(r==="+"){if(re--,Ou(t)){n.push(fl(t));continue}return}if(r==="-"){if(re--,Ou(t)){n.push(fl(t));continue}if(Am(t)){n.push({type:Y.Ident,value:lf(t)});continue}return}if(r==="."){if(re--,Ou(t)){n.push(fl(t));continue}return}if(r==="/"){for(;re<t.length&&(t[re]===`
`||t[re]==="	"||t[re]===" ");)re++;let i;if(Ou(t)&&(i=fl(t),i.type!==Y.Hue)){n.push({type:Y.Alpha,value:i});continue}if(Am(t)&&lf(t)==="none"){n.push({type:Y.Alpha,value:{type:Y.None,value:void 0}});continue}return}if(/\d/.test(r)){re--,n.push(fl(t));continue}if(Nm.test(r)){re--,n.push(H$(t));continue}return}return n}function W$(e){e._i=0;let t=e[e._i++];if(!t||t.type!==Y.Function||t.value!=="color"||(t=e[e._i++],t.type!==Y.Ident))return;const n=J5[t.value];if(!n)return;const r={mode:n},i=t4(e,!1);if(!i)return;const o=e4(n).channels;for(let a=0,l,s;a<o.length;a++)l=i[a],s=o[a],l.type!==Y.None&&(r[s]=l.type===Y.Number?l.value:l.value/100,s==="alpha"&&(r[s]=Math.max(0,Math.min(1,r[s]))));return r}function t4(e,t){const n=[];let r;for(;e._i<e.length;){if(r=e[e._i++],r.type===Y.None||r.type===Y.Number||r.type===Y.Alpha||r.type===Y.Percentage||t&&r.type===Y.Hue){n.push(r);continue}if(r.type===Y.ParenClose){if(e._i<e.length)return;continue}return}if(!(n.length<3||n.length>4)){if(n.length===4){if(n[3].type!==Y.Alpha)return;n[3]=n[3].value}return n.length===3&&n.push({type:Y.None,value:void 0}),n.every(i=>i.type!==Y.Alpha)?n:void 0}}function j$(e,t){e._i=0;let n=e[e._i++];if(!n||n.type!==Y.Function)return;let r=t4(e,t);if(r)return r.unshift(n.value),r}const V$=e=>{if(typeof e!="string")return;const t=U$(e),n=t?j$(t,!0):void 0;let r,i=0,o=af.length;for(;i<o;)if((r=af[i++](e,n))!==void 0)return r;return t?W$(t):void 0};function q$(e,t){if(!t||t[0]!=="rgb"&&t[0]!=="rgba")return;const n={mode:"rgb"},[,r,i,o,a]=t;if(!(r.type===Y.Hue||i.type===Y.Hue||o.type===Y.Hue))return r.type!==Y.None&&(n.r=r.type===Y.Number?r.value/255:r.value/100),i.type!==Y.None&&(n.g=i.type===Y.Number?i.value/255:i.value/100),o.type!==Y.None&&(n.b=o.type===Y.Number?o.value/255:o.value/100),a.type!==Y.None&&(n.alpha=Math.min(1,Math.max(0,a.type===Y.Number?a.value:a.value/100))),n}const Y$=e=>e==="transparent"?{mode:"rgb",r:0,g:0,b:0,alpha:0}:void 0,X$=(e,t,n)=>e+n*(t-e),G$=e=>{let t=[];for(let n=0;n<e.length-1;n++){let r=e[n],i=e[n+1];r===void 0&&i===void 0?t.push(void 0):r!==void 0&&i!==void 0?t.push([r,i]):t.push(r!==void 0?[r,r]:[i,i])}return t},K$=e=>t=>{let n=G$(t);return r=>{let i=r*n.length,o=r>=1?n.length-1:Math.max(Math.floor(i),0),a=n[o];return a===void 0?void 0:e(a[0],a[1],i-o)}},Q=K$(X$),Ye=e=>{let t=!1,n=e.map(r=>r!==void 0?(t=!0,r):1);return t?n:e},ja={mode:"rgb",channels:["r","g","b","alpha"],parse:[q$,N$,O$,P$,Y$,"srgb"],serialize:"srgb",interpolate:{r:Q,g:Q,b:Q,alpha:{use:Q,fixup:Ye}},gamut:!0,white:{r:1,g:1,b:1},black:{r:0,g:0,b:0}},fh=(e=0)=>Math.pow(Math.abs(e),563/256)*Math.sign(e),J2=e=>{let t=fh(e.r),n=fh(e.g),r=fh(e.b),i={mode:"xyz65",x:.5766690429101305*t+.1855582379065463*n+.1882286462349947*r,y:.297344975250536*t+.6273635662554661*n+.0752914584939979*r,z:.0270313613864123*t+.0706888525358272*n+.9913375368376386*r};return e.alpha!==void 0&&(i.alpha=e.alpha),i},dh=e=>Math.pow(Math.abs(e),256/563)*Math.sign(e),ew=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i={mode:"a98",r:dh(e*2.0415879038107465-t*.5650069742788597-.3447313507783297*n),g:dh(e*-.9692436362808798+t*1.8759675015077206+.0415550574071756*n),b:dh(e*.0134442806320312-t*.1183623922310184+1.0151749943912058*n)};return r!==void 0&&(i.alpha=r),i},hh=(e=0)=>{const t=Math.abs(e);return t<=.04045?e/12.92:(Math.sign(e)||1)*Math.pow((t+.055)/1.055,2.4)},Va=({r:e,g:t,b:n,alpha:r})=>{let i={mode:"lrgb",r:hh(e),g:hh(t),b:hh(n)};return r!==void 0&&(i.alpha=r),i},bo=e=>{let{r:t,g:n,b:r,alpha:i}=Va(e),o={mode:"xyz65",x:.4123907992659593*t+.357584339383878*n+.1804807884018343*r,y:.2126390058715102*t+.715168678767756*n+.0721923153607337*r,z:.0193308187155918*t+.119194779794626*n+.9505321522496607*r};return i!==void 0&&(o.alpha=i),o},ph=(e=0)=>{const t=Math.abs(e);return t>.0031308?(Math.sign(e)||1)*(1.055*Math.pow(t,1/2.4)-.055):e*12.92},qa=({r:e,g:t,b:n,alpha:r},i="rgb")=>{let o={mode:i,r:ph(e),g:ph(t),b:ph(n)};return r!==void 0&&(o.alpha=r),o},xo=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=qa({r:e*3.2409699419045226-t*1.537383177570094-.4986107602930034*n,g:e*-.9692436362808796+t*1.8759675015077204+.0415550574071756*n,b:e*.0556300796969936-t*.2039769588889765+1.0569715142428784*n});return r!==void 0&&(i.alpha=r),i},Q$={...ja,mode:"a98",parse:["a98-rgb"],serialize:"a98-rgb",fromMode:{rgb:e=>ew(bo(e)),xyz65:ew},toMode:{rgb:e=>xo(J2(e)),xyz65:J2}},ut=e=>(e=e%360)<0?e+360:e,Z$=(e,t)=>e.map((n,r,i)=>{if(n===void 0)return n;let o=ut(n);return r===0||e[r-1]===void 0?o:t(o-ut(i[r-1]))}).reduce((n,r)=>!n.length||r===void 0||n[n.length-1]===void 0?(n.push(r),n):(n.push(r+n[n.length-1]),n),[]),Ar=e=>Z$(e,t=>Math.abs(t)<=180?t:t-360*Math.sign(t)),Ze=[-.14861,1.78277,-.29227,-.90649,1.97294,0],J$=Math.PI/180,eP=180/Math.PI;let tw=Ze[3]*Ze[4],nw=Ze[1]*Ze[4],rw=Ze[1]*Ze[2]-Ze[0]*Ze[3];const tP=({r:e,g:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=(rw*n+e*tw-t*nw)/(rw+tw-nw),o=n-i,a=(Ze[4]*(t-i)-Ze[2]*o)/Ze[3],l={mode:"cubehelix",l:i,s:i===0||i===1?void 0:Math.sqrt(o*o+a*a)/(Ze[4]*i*(1-i))};return l.s&&(l.h=Math.atan2(a,o)*eP-120),r!==void 0&&(l.alpha=r),l},nP=({h:e,s:t,l:n,alpha:r})=>{let i={mode:"rgb"};e=(e===void 0?0:e+120)*J$,n===void 0&&(n=0);let o=t===void 0?0:t*n*(1-n),a=Math.cos(e),l=Math.sin(e);return i.r=n+o*(Ze[0]*a+Ze[1]*l),i.g=n+o*(Ze[2]*a+Ze[3]*l),i.b=n+o*(Ze[4]*a+Ze[5]*l),r!==void 0&&(i.alpha=r),i},Ld=(e,t)=>{if(e.h===void 0||t.h===void 0||!e.s||!t.s)return 0;let n=ut(e.h),r=ut(t.h),i=Math.sin((r-n+360)/2*Math.PI/180);return 2*Math.sqrt(e.s*t.s)*i},rP=(e,t)=>{if(e.h===void 0||t.h===void 0)return 0;let n=ut(e.h),r=ut(t.h);return Math.abs(r-n)>180?n-(r-360*Math.sign(r-n)):r-n},Od=(e,t)=>{if(e.h===void 0||t.h===void 0||!e.c||!t.c)return 0;let n=ut(e.h),r=ut(t.h),i=Math.sin((r-n+360)/2*Math.PI/180);return 2*Math.sqrt(e.c*t.c)*i},iP=(e=1,t=1,n=1)=>{let r=Id("lab65");return(i,o)=>{let a=r(i),l=r(o),s=a.l,u=a.a,c=a.b,f=Math.sqrt(u*u+c*c),d=l.l,h=l.a,m=l.b,p=Math.sqrt(h*h+m*m),w=(f+p)/2,y=.5*(1-Math.sqrt(Math.pow(w,7)/(Math.pow(w,7)+Math.pow(25,7)))),g=u*(1+y),v=h*(1+y),b=Math.sqrt(g*g+c*c),_=Math.sqrt(v*v+m*m),M=Math.abs(g)+Math.abs(c)===0?0:Math.atan2(c,g);M+=(M<0)*2*Math.PI;let S=Math.abs(v)+Math.abs(m)===0?0:Math.atan2(m,v);S+=(S<0)*2*Math.PI;let C=d-s,k=_-b,$=b*_===0?0:S-M;$-=($>Math.PI)*2*Math.PI,$+=($<-Math.PI)*2*Math.PI;let E=2*Math.sqrt(b*_)*Math.sin($/2),U=(s+d)/2,D=(b+_)/2,N;b*_===0?N=M+S:(N=(M+S)/2,N-=(Math.abs(M-S)>Math.PI)*Math.PI,N+=(N<0)*2*Math.PI);let P=Math.pow(U-50,2),I=1-.17*Math.cos(N-Math.PI/6)+.24*Math.cos(2*N)+.32*Math.cos(3*N+Math.PI/30)-.2*Math.cos(4*N-63*Math.PI/180),z=1+.015*P/Math.sqrt(20+P),T=1+.045*D,R=1+.015*D*I,A=30*Math.PI/180*Math.exp(-1*Math.pow((180/Math.PI*N-275)/25,2)),L=2*Math.sqrt(Math.pow(D,7)/(Math.pow(D,7)+Math.pow(25,7))),H=-1*Math.sin(2*A)*L;return Math.sqrt(Math.pow(C/(e*z),2)+Math.pow(k/(t*T),2)+Math.pow(E/(n*R),2)+H*k/(t*T)*E/(n*R))}},Ir=e=>{let t=e.reduce((r,i)=>{if(i!==void 0){let o=i*Math.PI/180;r.sin+=Math.sin(o),r.cos+=Math.cos(o)}return r},{sin:0,cos:0}),n=Math.atan2(t.sin,t.cos)*180/Math.PI;return n<0?360+n:n},oP={mode:"cubehelix",channels:["h","s","l","alpha"],parse:["--cubehelix"],serialize:"--cubehelix",ranges:{h:[0,360],s:[0,4.614],l:[0,1]},fromMode:{rgb:tP},toMode:{rgb:nP},interpolate:{h:{use:Q,fixup:Ar},s:Q,l:Q,alpha:{use:Q,fixup:Ye}},difference:{h:Ld},average:{h:Ir}},pi=({l:e,a:t,b:n,alpha:r},i="lch")=>{t===void 0&&(t=0),n===void 0&&(n=0);let o=Math.sqrt(t*t+n*n),a={mode:i,l:e,c:o};return o&&(a.h=ut(Math.atan2(n,t)*180/Math.PI)),r!==void 0&&(a.alpha=r),a},mi=({l:e,c:t,h:n,alpha:r},i="lab")=>{n===void 0&&(n=0);let o={mode:i,l:e,a:t?t*Math.cos(n/180*Math.PI):0,b:t?t*Math.sin(n/180*Math.PI):0};return r!==void 0&&(o.alpha=r),o},n4=Math.pow(29,3)/Math.pow(3,3),r4=Math.pow(6,3)/Math.pow(29,3),Ue={X:.3457/.3585,Y:1,Z:(1-.3457-.3585)/.3585},oa={X:.3127/.329,Y:1,Z:(1-.3127-.329)/.329};let mh=e=>Math.pow(e,3)>r4?Math.pow(e,3):(116*e-16)/n4;const i4=({l:e,a:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=(e+16)/116,o=t/500+i,a=i-n/200,l={mode:"xyz65",x:mh(o)*oa.X,y:mh(i)*oa.Y,z:mh(a)*oa.Z};return r!==void 0&&(l.alpha=r),l},Dd=e=>xo(i4(e)),gh=e=>e>r4?Math.cbrt(e):(n4*e+16)/116,o4=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=gh(e/oa.X),o=gh(t/oa.Y),a=gh(n/oa.Z),l={mode:"lab65",l:116*o-16,a:500*(i-o),b:200*(o-a)};return r!==void 0&&(l.alpha=r),l},zd=e=>{let t=o4(bo(e));return e.r===e.b&&e.b===e.g&&(t.a=t.b=0),t},sf=1,a4=1,ps=26/180*Math.PI,uf=Math.cos(ps),cf=Math.sin(ps),l4=100/Math.log(139/100),Im=({l:e,c:t,h:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i={mode:"lab65",l:(Math.exp(e*sf/l4)-1)/.0039},o=(Math.exp(.0435*t*a4*sf)-1)/.075,a=o*Math.cos(n/180*Math.PI-ps),l=o*Math.sin(n/180*Math.PI-ps);return i.a=a*uf-l/.83*cf,i.b=a*cf+l/.83*uf,r!==void 0&&(i.alpha=r),i},Lm=({l:e,a:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=t*uf+n*cf,o=.83*(n*uf-t*cf),a=Math.sqrt(i*i+o*o),l={mode:"dlch",l:l4/sf*Math.log(1+.0039*e),c:Math.log(1+.075*a)/(.0435*a4*sf)};return l.c&&(l.h=ut((Math.atan2(o,i)+ps)/Math.PI*180)),r!==void 0&&(l.alpha=r),l},iw=e=>Im(pi(e,"dlch")),ow=e=>mi(Lm(e),"dlab"),aP={mode:"dlab",parse:["--din99o-lab"],serialize:"--din99o-lab",toMode:{lab65:iw,rgb:e=>Dd(iw(e))},fromMode:{lab65:ow,rgb:e=>ow(zd(e))},channels:["l","a","b","alpha"],ranges:{l:[0,100],a:[-40.09,45.501],b:[-40.469,44.344]},interpolate:{l:Q,a:Q,b:Q,alpha:{use:Q,fixup:Ye}}},lP={mode:"dlch",parse:["--din99o-lch"],serialize:"--din99o-lch",toMode:{lab65:Im,dlab:e=>mi(e,"dlab"),rgb:e=>Dd(Im(e))},fromMode:{lab65:Lm,dlab:e=>pi(e,"dlch"),rgb:e=>Lm(zd(e))},channels:["l","c","h","alpha"],ranges:{l:[0,100],c:[0,51.484],h:[0,360]},interpolate:{l:Q,c:Q,h:{use:Q,fixup:Ar},alpha:{use:Q,fixup:Ye}},difference:{h:Od},average:{h:Ir}};function sP({h:e,s:t,i:n,alpha:r}){e=ut(e!==void 0?e:0),t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.abs(e/60%2-1),o;switch(Math.floor(e/60)){case 0:o={r:n*(1+t*(3/(2-i)-1)),g:n*(1+t*(3*(1-i)/(2-i)-1)),b:n*(1-t)};break;case 1:o={r:n*(1+t*(3*(1-i)/(2-i)-1)),g:n*(1+t*(3/(2-i)-1)),b:n*(1-t)};break;case 2:o={r:n*(1-t),g:n*(1+t*(3/(2-i)-1)),b:n*(1+t*(3*(1-i)/(2-i)-1))};break;case 3:o={r:n*(1-t),g:n*(1+t*(3*(1-i)/(2-i)-1)),b:n*(1+t*(3/(2-i)-1))};break;case 4:o={r:n*(1+t*(3*(1-i)/(2-i)-1)),g:n*(1-t),b:n*(1+t*(3/(2-i)-1))};break;case 5:o={r:n*(1+t*(3/(2-i)-1)),g:n*(1-t),b:n*(1+t*(3*(1-i)/(2-i)-1))};break;default:o={r:n*(1-t),g:n*(1-t),b:n*(1-t)}}return o.mode="rgb",r!==void 0&&(o.alpha=r),o}function uP({r:e,g:t,b:n,alpha:r}){e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.max(e,t,n),o=Math.min(e,t,n),a={mode:"hsi",s:e+t+n===0?0:1-3*o/(e+t+n),i:(e+t+n)/3};return i-o!==0&&(a.h=(i===e?(t-n)/(i-o)+(t<n)*6:i===t?(n-e)/(i-o)+2:(e-t)/(i-o)+4)*60),r!==void 0&&(a.alpha=r),a}const cP={mode:"hsi",toMode:{rgb:sP},parse:["--hsi"],serialize:"--hsi",fromMode:{rgb:uP},channels:["h","s","i","alpha"],ranges:{h:[0,360]},gamut:"rgb",interpolate:{h:{use:Q,fixup:Ar},s:Q,i:Q,alpha:{use:Q,fixup:Ye}},difference:{h:Ld},average:{h:Ir}};function fP({h:e,s:t,l:n,alpha:r}){e=ut(e!==void 0?e:0),t===void 0&&(t=0),n===void 0&&(n=0);let i=n+t*(n<.5?n:1-n),o=i-(i-n)*2*Math.abs(e/60%2-1),a;switch(Math.floor(e/60)){case 0:a={r:i,g:o,b:2*n-i};break;case 1:a={r:o,g:i,b:2*n-i};break;case 2:a={r:2*n-i,g:i,b:o};break;case 3:a={r:2*n-i,g:o,b:i};break;case 4:a={r:o,g:2*n-i,b:i};break;case 5:a={r:i,g:2*n-i,b:o};break;default:a={r:2*n-i,g:2*n-i,b:2*n-i}}return a.mode="rgb",r!==void 0&&(a.alpha=r),a}function dP({r:e,g:t,b:n,alpha:r}){e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.max(e,t,n),o=Math.min(e,t,n),a={mode:"hsl",s:i===o?0:(i-o)/(1-Math.abs(i+o-1)),l:.5*(i+o)};return i-o!==0&&(a.h=(i===e?(t-n)/(i-o)+(t<n)*6:i===t?(n-e)/(i-o)+2:(e-t)/(i-o)+4)*60),r!==void 0&&(a.alpha=r),a}const hP=(e,t)=>{switch(t){case"deg":return+e;case"rad":return e/Math.PI*180;case"grad":return e/10*9;case"turn":return e*360}},pP=new RegExp(`^hsla?\\(\\s*${A$}${xa}${Wl}${xa}${Wl}\\s*(?:,\\s*${ay}\\s*)?\\)$`),mP=e=>{let t=e.match(pP);if(!t)return;let n={mode:"hsl"};return t[3]!==void 0?n.h=+t[3]:t[1]!==void 0&&t[2]!==void 0&&(n.h=hP(t[1],t[2])),t[4]!==void 0&&(n.s=Math.min(Math.max(0,t[4]/100),1)),t[5]!==void 0&&(n.l=Math.min(Math.max(0,t[5]/100),1)),t[6]!==void 0?n.alpha=Math.max(0,Math.min(1,t[6]/100)):t[7]!==void 0&&(n.alpha=Math.max(0,Math.min(1,+t[7]))),n};function gP(e,t){if(!t||t[0]!=="hsl"&&t[0]!=="hsla")return;const n={mode:"hsl"},[,r,i,o,a]=t;if(r.type!==Y.None){if(r.type===Y.Percentage)return;n.h=r.value}if(i.type!==Y.None){if(i.type===Y.Hue)return;n.s=i.value/100}if(o.type!==Y.None){if(o.type===Y.Hue)return;n.l=o.value/100}return a.type!==Y.None&&(n.alpha=Math.min(1,Math.max(0,a.type===Y.Number?a.value:a.value/100))),n}const s4={mode:"hsl",toMode:{rgb:fP},fromMode:{rgb:dP},channels:["h","s","l","alpha"],ranges:{h:[0,360]},gamut:"rgb",parse:[gP,mP],serialize:e=>`hsl(${e.h!==void 0?e.h:"none"} ${e.s!==void 0?e.s*100+"%":"none"} ${e.l!==void 0?e.l*100+"%":"none"}${e.alpha<1?` / ${e.alpha}`:""})`,interpolate:{h:{use:Q,fixup:Ar},s:Q,l:Q,alpha:{use:Q,fixup:Ye}},difference:{h:Ld},average:{h:Ir}};function u4({h:e,s:t,v:n,alpha:r}){e=ut(e!==void 0?e:0),t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.abs(e/60%2-1),o;switch(Math.floor(e/60)){case 0:o={r:n,g:n*(1-t*i),b:n*(1-t)};break;case 1:o={r:n*(1-t*i),g:n,b:n*(1-t)};break;case 2:o={r:n*(1-t),g:n,b:n*(1-t*i)};break;case 3:o={r:n*(1-t),g:n*(1-t*i),b:n};break;case 4:o={r:n*(1-t*i),g:n*(1-t),b:n};break;case 5:o={r:n,g:n*(1-t),b:n*(1-t*i)};break;default:o={r:n*(1-t),g:n*(1-t),b:n*(1-t)}}return o.mode="rgb",r!==void 0&&(o.alpha=r),o}function c4({r:e,g:t,b:n,alpha:r}){e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.max(e,t,n),o=Math.min(e,t,n),a={mode:"hsv",s:i===0?0:1-o/i,v:i};return i-o!==0&&(a.h=(i===e?(t-n)/(i-o)+(t<n)*6:i===t?(n-e)/(i-o)+2:(e-t)/(i-o)+4)*60),r!==void 0&&(a.alpha=r),a}const f4={mode:"hsv",toMode:{rgb:u4},parse:["--hsv"],serialize:"--hsv",fromMode:{rgb:c4},channels:["h","s","v","alpha"],ranges:{h:[0,360]},gamut:"rgb",interpolate:{h:{use:Q,fixup:Ar},s:Q,v:Q,alpha:{use:Q,fixup:Ye}},difference:{h:Ld},average:{h:Ir}};function yP({h:e,w:t,b:n,alpha:r}){if(t===void 0&&(t=0),n===void 0&&(n=0),t+n>1){let i=t+n;t/=i,n/=i}return u4({h:e,s:n===1?1:1-t/(1-n),v:1-n,alpha:r})}function vP(e){let t=c4(e);if(t===void 0)return;let n=t.s!==void 0?t.s:0,r=t.v!==void 0?t.v:0,i={mode:"hwb",w:(1-n)*r,b:1-r};return t.h!==void 0&&(i.h=t.h),t.alpha!==void 0&&(i.alpha=t.alpha),i}function wP(e,t){if(!t||t[0]!=="hwb")return;const n={mode:"hwb"},[,r,i,o,a]=t;if(r.type!==Y.None){if(r.type===Y.Percentage)return;n.h=r.value}if(i.type!==Y.None){if(i.type===Y.Hue)return;n.w=i.value/100}if(o.type!==Y.None){if(o.type===Y.Hue)return;n.b=o.value/100}return a.type!==Y.None&&(n.alpha=Math.min(1,Math.max(0,a.type===Y.Number?a.value:a.value/100))),n}const bP={mode:"hwb",toMode:{rgb:yP},fromMode:{rgb:vP},channels:["h","w","b","alpha"],ranges:{h:[0,360]},gamut:"rgb",parse:[wP],serialize:e=>`hwb(${e.h!==void 0?e.h:"none"} ${e.w!==void 0?e.w*100+"%":"none"} ${e.b!==void 0?e.b*100+"%":"none"}${e.alpha<1?` / ${e.alpha}`:""})`,interpolate:{h:{use:Q,fixup:Ar},w:Q,b:Q,alpha:{use:Q,fixup:Ye}},difference:{h:rP},average:{h:Ir}},d4=203,Fd=.1593017578125,h4=78.84375,Bd=.8359375,Hd=18.8515625,Ud=18.6875;function yh(e){if(e<0)return 0;const t=Math.pow(e,1/h4);return 1e4*Math.pow(Math.max(0,t-Bd)/(Hd-Ud*t),1/Fd)}function vh(e){if(e<0)return 0;const t=Math.pow(e/1e4,Fd);return Math.pow((Bd+Hd*t)/(1+Ud*t),h4)}const wh=e=>Math.max(e/d4,0),aw=({i:e,t,p:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);const i=yh(e+.008609037037932761*t+.11102962500302593*n),o=yh(e-.00860903703793275*t-.11102962500302599*n),a=yh(e+.5600313357106791*t-.32062717498731885*n),l={mode:"xyz65",x:wh(2.070152218389422*i-1.3263473389671556*o+.2066510476294051*a),y:wh(.3647385209748074*i+.680566024947227*o-.0453045459220346*a),z:wh(-.049747207535812*i-.0492609666966138*o+1.1880659249923042*a)};return r!==void 0&&(l.alpha=r),l},bh=(e=0)=>Math.max(e*d4,0),lw=({x:e,y:t,z:n,alpha:r})=>{const i=bh(e),o=bh(t),a=bh(n),l=vh(.3592832590121217*i+.6976051147779502*o-.0358915932320289*a),s=vh(-.1920808463704995*i+1.1004767970374323*o+.0753748658519118*a),u=vh(.0070797844607477*i+.0748396662186366*o+.8433265453898765*a),c=.5*l+.5*s,f=1.61376953125*l-3.323486328125*s+1.709716796875*u,d=4.378173828125*l-4.24560546875*s-.132568359375*u,h={mode:"itp",i:c,t:f,p:d};return r!==void 0&&(h.alpha=r),h},xP={mode:"itp",channels:["i","t","p","alpha"],parse:["--ictcp"],serialize:"--ictcp",toMode:{xyz65:aw,rgb:e=>xo(aw(e))},fromMode:{xyz65:lw,rgb:e=>lw(bo(e))},ranges:{i:[0,.581],t:[-.369,.272],p:[-.164,.331]},interpolate:{i:Q,t:Q,p:Q,alpha:{use:Q,fixup:Ye}}},_P=134.03437499999998,SP=16295499532821565e-27,xh=e=>{if(e<0)return 0;let t=Math.pow(e/1e4,Fd);return Math.pow((Bd+Hd*t)/(1+Ud*t),_P)},_h=(e=0)=>Math.max(e*203,0),p4=({x:e,y:t,z:n,alpha:r})=>{e=_h(e),t=_h(t),n=_h(n);let i=1.15*e-.15*n,o=.66*t+.34*e,a=xh(.41478972*i+.579999*o+.014648*n),l=xh(-.20151*i+1.120649*o+.0531008*n),s=xh(-.0166008*i+.2648*o+.6684799*n),u=(a+l)/2,c={mode:"jab",j:.44*u/(1-.56*u)-SP,a:3.524*a-4.066708*l+.542708*s,b:.199076*a+1.096799*l-1.295875*s};return r!==void 0&&(c.alpha=r),c},MP=134.03437499999998,sw=16295499532821565e-27,Sh=e=>{if(e<0)return 0;let t=Math.pow(e,1/MP);return 1e4*Math.pow((Bd-t)/(Ud*t-Hd),1/Fd)},Mh=e=>e/203,m4=({j:e,a:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=(e+sw)/(.44+.56*(e+sw)),o=Sh(i+.13860504*t+.058047316*n),a=Sh(i-.13860504*t-.058047316*n),l=Sh(i-.096019242*t-.8118919*n),s={mode:"xyz65",x:Mh(1.661373024652174*o-.914523081304348*a+.23136208173913045*l),y:Mh(-.3250758611844533*o+1.571847026732543*a-.21825383453227928*l),z:Mh(-.090982811*o-.31272829*a+1.5227666*l)};return r!==void 0&&(s.alpha=r),s},g4=e=>{let t=p4(bo(e));return e.r===e.b&&e.b===e.g&&(t.a=t.b=0),t},y4=e=>xo(m4(e)),CP={mode:"jab",channels:["j","a","b","alpha"],parse:["--jzazbz"],serialize:"--jzazbz",fromMode:{rgb:g4,xyz65:p4},toMode:{rgb:y4,xyz65:m4},ranges:{j:[0,.222],a:[-.109,.129],b:[-.185,.134]},interpolate:{j:Q,a:Q,b:Q,alpha:{use:Q,fixup:Ye}}},uw=({j:e,a:t,b:n,alpha:r})=>{t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.sqrt(t*t+n*n),o={mode:"jch",j:e,c:i};return i&&(o.h=ut(Math.atan2(n,t)*180/Math.PI)),r!==void 0&&(o.alpha=r),o},cw=({j:e,c:t,h:n,alpha:r})=>{n===void 0&&(n=0);let i={mode:"jab",j:e,a:t?t*Math.cos(n/180*Math.PI):0,b:t?t*Math.sin(n/180*Math.PI):0};return r!==void 0&&(i.alpha=r),i},EP={mode:"jch",parse:["--jzczhz"],serialize:"--jzczhz",toMode:{jab:cw,rgb:e=>y4(cw(e))},fromMode:{rgb:e=>uw(g4(e)),jab:uw},channels:["j","c","h","alpha"],ranges:{j:[0,.221],c:[0,.19],h:[0,360]},interpolate:{h:{use:Q,fixup:Ar},c:Q,j:Q,alpha:{use:Q,fixup:Ye}},difference:{h:Od},average:{h:Ir}},Wd=Math.pow(29,3)/Math.pow(3,3),ly=Math.pow(6,3)/Math.pow(29,3);let Ch=e=>Math.pow(e,3)>ly?Math.pow(e,3):(116*e-16)/Wd;const sy=({l:e,a:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=(e+16)/116,o=t/500+i,a=i-n/200,l={mode:"xyz50",x:Ch(o)*Ue.X,y:Ch(i)*Ue.Y,z:Ch(a)*Ue.Z};return r!==void 0&&(l.alpha=r),l},Us=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=qa({r:e*3.1341359569958707-t*1.6173863321612538-.4906619460083532*n,g:e*-.978795502912089+t*1.916254567259524+.03344273116131949*n,b:e*.07195537988411677-t*.2289768264158322+1.405386058324125*n});return r!==void 0&&(i.alpha=r),i},v4=e=>Us(sy(e)),Ws=e=>{let{r:t,g:n,b:r,alpha:i}=Va(e),o={mode:"xyz50",x:.436065742824811*t+.3851514688337912*n+.14307845442264197*r,y:.22249319175623702*t+.7168870538238823*n+.06061979053616537*r,z:.013923904500943465*t+.09708128566574634*n+.7140993584005155*r};return i!==void 0&&(o.alpha=i),o},Eh=e=>e>ly?Math.cbrt(e):(Wd*e+16)/116,uy=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=Eh(e/Ue.X),o=Eh(t/Ue.Y),a=Eh(n/Ue.Z),l={mode:"lab",l:116*o-16,a:500*(i-o),b:200*(o-a)};return r!==void 0&&(l.alpha=r),l},w4=e=>{let t=uy(Ws(e));return e.r===e.b&&e.b===e.g&&(t.a=t.b=0),t};function kP(e,t){if(!t||t[0]!=="lab")return;const n={mode:"lab"},[,r,i,o,a]=t;if(!(r.type===Y.Hue||i.type===Y.Hue||o.type===Y.Hue))return r.type!==Y.None&&(n.l=Math.min(Math.max(0,r.value),100)),i.type!==Y.None&&(n.a=i.type===Y.Number?i.value:i.value*125/100),o.type!==Y.None&&(n.b=o.type===Y.Number?o.value:o.value*125/100),a.type!==Y.None&&(n.alpha=Math.min(1,Math.max(0,a.type===Y.Number?a.value:a.value/100))),n}const cy={mode:"lab",toMode:{xyz50:sy,rgb:v4},fromMode:{xyz50:uy,rgb:w4},channels:["l","a","b","alpha"],ranges:{l:[0,100],a:[-100,100],b:[-100,100]},parse:[kP],serialize:e=>`lab(${e.l!==void 0?e.l:"none"} ${e.a!==void 0?e.a:"none"} ${e.b!==void 0?e.b:"none"}${e.alpha<1?` / ${e.alpha}`:""})`,interpolate:{l:Q,a:Q,b:Q,alpha:{use:Q,fixup:Ye}}},TP={...cy,mode:"lab65",parse:["--lab-d65"],serialize:"--lab-d65",toMode:{xyz65:i4,rgb:Dd},fromMode:{xyz65:o4,rgb:zd},ranges:{l:[0,100],a:[-86.182,98.234],b:[-107.86,94.477]}};function $P(e,t){if(!t||t[0]!=="lch")return;const n={mode:"lch"},[,r,i,o,a]=t;if(r.type!==Y.None){if(r.type===Y.Hue)return;n.l=Math.min(Math.max(0,r.value),100)}if(i.type!==Y.None&&(n.c=Math.max(0,i.type===Y.Number?i.value:i.value*150/100)),o.type!==Y.None){if(o.type===Y.Percentage)return;n.h=o.value}return a.type!==Y.None&&(n.alpha=Math.min(1,Math.max(0,a.type===Y.Number?a.value:a.value/100))),n}const fy={mode:"lch",toMode:{lab:mi,rgb:e=>v4(mi(e))},fromMode:{rgb:e=>pi(w4(e)),lab:pi},channels:["l","c","h","alpha"],ranges:{l:[0,100],c:[0,150],h:[0,360]},parse:[$P],serialize:e=>`lch(${e.l!==void 0?e.l:"none"} ${e.c!==void 0?e.c:"none"} ${e.h!==void 0?e.h:"none"}${e.alpha<1?` / ${e.alpha}`:""})`,interpolate:{h:{use:Q,fixup:Ar},c:Q,l:Q,alpha:{use:Q,fixup:Ye}},difference:{h:Od},average:{h:Ir}},PP={...fy,mode:"lch65",parse:["--lch-d65"],serialize:"--lch-d65",toMode:{lab65:e=>mi(e,"lab65"),rgb:e=>Dd(mi(e,"lab65"))},fromMode:{rgb:e=>pi(zd(e),"lch65"),lab65:e=>pi(e,"lch65")},ranges:{l:[0,100],c:[0,133.807],h:[0,360]}},b4=({l:e,u:t,v:n,alpha:r})=>{t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.sqrt(t*t+n*n),o={mode:"lchuv",l:e,c:i};return i&&(o.h=ut(Math.atan2(n,t)*180/Math.PI)),r!==void 0&&(o.alpha=r),o},x4=({l:e,c:t,h:n,alpha:r})=>{n===void 0&&(n=0);let i={mode:"luv",l:e,u:t?t*Math.cos(n/180*Math.PI):0,v:t?t*Math.sin(n/180*Math.PI):0};return r!==void 0&&(i.alpha=r),i},_4=(e,t,n)=>4*e/(e+15*t+3*n),S4=(e,t,n)=>9*t/(e+15*t+3*n),RP=_4(Ue.X,Ue.Y,Ue.Z),NP=S4(Ue.X,Ue.Y,Ue.Z),AP=e=>e<=ly?Wd*e:116*Math.cbrt(e)-16,Om=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=AP(t/Ue.Y),o=_4(e,t,n),a=S4(e,t,n);!isFinite(o)||!isFinite(a)?i=o=a=0:(o=13*i*(o-RP),a=13*i*(a-NP));let l={mode:"luv",l:i,u:o,v:a};return r!==void 0&&(l.alpha=r),l},IP=(e,t,n)=>4*e/(e+15*t+3*n),LP=(e,t,n)=>9*t/(e+15*t+3*n),OP=IP(Ue.X,Ue.Y,Ue.Z),DP=LP(Ue.X,Ue.Y,Ue.Z),Dm=({l:e,u:t,v:n,alpha:r})=>{if(e===void 0&&(e=0),e===0)return{mode:"xyz50",x:0,y:0,z:0};t===void 0&&(t=0),n===void 0&&(n=0);let i=t/(13*e)+OP,o=n/(13*e)+DP,a=Ue.Y*(e<=8?e/Wd:Math.pow((e+16)/116,3)),l=a*(9*i)/(4*o),s=a*(12-3*i-20*o)/(4*o),u={mode:"xyz50",x:l,y:a,z:s};return r!==void 0&&(u.alpha=r),u},zP=e=>b4(Om(Ws(e))),FP=e=>Us(Dm(x4(e))),BP={mode:"lchuv",toMode:{luv:x4,rgb:FP},fromMode:{rgb:zP,luv:b4},channels:["l","c","h","alpha"],parse:["--lchuv"],serialize:"--lchuv",ranges:{l:[0,100],c:[0,176.956],h:[0,360]},interpolate:{h:{use:Q,fixup:Ar},c:Q,l:Q,alpha:{use:Q,fixup:Ye}},difference:{h:Od},average:{h:Ir}},HP={...ja,mode:"lrgb",toMode:{rgb:qa},fromMode:{rgb:Va},parse:["srgb-linear"],serialize:"srgb-linear"},UP={mode:"luv",toMode:{xyz50:Dm,rgb:e=>Us(Dm(e))},fromMode:{xyz50:Om,rgb:e=>Om(Ws(e))},channels:["l","u","v","alpha"],parse:["--luv"],serialize:"--luv",ranges:{l:[0,100],u:[-84.936,175.042],v:[-125.882,87.243]},interpolate:{l:Q,u:Q,v:Q,alpha:{use:Q,fixup:Ye}}},M4=({r:e,g:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.cbrt(.41222147079999993*e+.5363325363*t+.0514459929*n),o=Math.cbrt(.2119034981999999*e+.6806995450999999*t+.1073969566*n),a=Math.cbrt(.08830246189999998*e+.2817188376*t+.6299787005000002*n),l={mode:"oklab",l:.2104542553*i+.793617785*o-.0040720468*a,a:1.9779984951*i-2.428592205*o+.4505937099*a,b:.0259040371*i+.7827717662*o-.808675766*a};return r!==void 0&&(l.alpha=r),l},jd=e=>{let t=M4(Va(e));return e.r===e.b&&e.b===e.g&&(t.a=t.b=0),t},js=({l:e,a:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=Math.pow(e*.9999999984505198+.39633779217376786*t+.2158037580607588*n,3),o=Math.pow(e*1.0000000088817609-.10556134232365635*t-.06385417477170591*n,3),a=Math.pow(e*1.0000000546724108-.08948418209496575*t-1.2914855378640917*n,3),l={mode:"lrgb",r:4.076741661347994*i-3.307711590408193*o+.230969928729428*a,g:-1.2684380040921763*i+2.6097574006633715*o-.3413193963102197*a,b:-.004196086541837188*i-.7034186144594493*o+1.7076147009309444*a};return r!==void 0&&(l.alpha=r),l},Vd=e=>qa(js(e));function zm(e){const r=1.170873786407767;return .5*(r*e-.206+Math.sqrt((r*e-.206)*(r*e-.206)+4*.03*r*e))}function ff(e){return(e*e+.206*e)/(1.170873786407767*(e+.03))}function WP(e,t){let n,r,i,o,a,l,s,u;-1.88170328*e-.80936493*t>1?(n=1.19086277,r=1.76576728,i=.59662641,o=.75515197,a=.56771245,l=4.0767416621,s=-3.3077115913,u=.2309699292):1.81444104*e-1.19445276*t>1?(n=.73956515,r=-.45954404,i=.08285427,o=.1254107,a=.14503204,l=-1.2684380046,s=2.6097574011,u=-.3413193965):(n=1.35733652,r=-.00915799,i=-1.1513021,o=-.50559606,a=.00692167,l=-.0041960863,s=-.7034186147,u=1.707614701);let c=n+r*e+i*t+o*e*e+a*e*t,f=.3963377774*e+.2158037573*t,d=-.1055613458*e-.0638541728*t,h=-.0894841775*e-1.291485548*t;{let m=1+c*f,p=1+c*d,w=1+c*h,y=m*m*m,g=p*p*p,v=w*w*w,b=3*f*m*m,_=3*d*p*p,M=3*h*w*w,S=6*f*f*m,C=6*d*d*p,k=6*h*h*w,$=l*y+s*g+u*v,E=l*b+s*_+u*M,U=l*S+s*C+u*k;c=c-$*E/(E*E-.5*$*U)}return c}function dy(e,t){let n=WP(e,t),r=js({l:1,a:n*e,b:n*t}),i=Math.cbrt(1/Math.max(r.r,r.g,r.b)),o=i*n;return[i,o]}function jP(e,t,n,r,i,o=null){o||(o=dy(e,t));let a;if((n-i)*o[1]-(o[0]-i)*r<=0)a=o[1]*i/(r*o[0]+o[1]*(i-n));else{a=o[1]*(i-1)/(r*(o[0]-1)+o[1]*(i-n));{let l=n-i,s=r,u=.3963377774*e+.2158037573*t,c=-.1055613458*e-.0638541728*t,f=-.0894841775*e-1.291485548*t,d=l+s*u,h=l+s*c,m=l+s*f;{let p=i*(1-a)+a*n,w=a*r,y=p+w*u,g=p+w*c,v=p+w*f,b=y*y*y,_=g*g*g,M=v*v*v,S=3*d*y*y,C=3*h*g*g,k=3*m*v*v,$=6*d*d*y,E=6*h*h*g,U=6*m*m*v,D=4.0767416621*b-3.3077115913*_+.2309699292*M-1,N=4.0767416621*S-3.3077115913*C+.2309699292*k,P=4.0767416621*$-3.3077115913*E+.2309699292*U,I=N/(N*N-.5*D*P),z=-D*I,T=-1.2684380046*b+2.6097574011*_-.3413193965*M-1,R=-1.2684380046*S+2.6097574011*C-.3413193965*k,A=-1.2684380046*$+2.6097574011*E-.3413193965*U,L=R/(R*R-.5*T*A),H=-T*L,G=-.0041960863*b-.7034186147*_+1.707614701*M-1,J=-.0041960863*S-.7034186147*C+1.707614701*k,te=-.0041960863*$-.7034186147*E+1.707614701*U,Z=J/(J*J-.5*G*te),B=-G*Z;z=I>=0?z:1e6,H=L>=0?H:1e6,B=Z>=0?B:1e6,a+=Math.min(z,Math.min(H,B))}}}return a}function hy(e,t,n=null){n||(n=dy(e,t));let r=n[0],i=n[1];return[i/r,i/(1-r)]}function C4(e,t,n){let r=dy(t,n),i=jP(t,n,e,1,e,r),o=hy(t,n,r),a=.11516993+1/(7.4477897+4.1590124*n+t*(-2.19557347+1.75198401*n+t*(-2.13704948-10.02301043*n+t*(-4.24894561+5.38770819*n+4.69891013*t)))),l=.11239642+1/(1.6132032-.68124379*n+t*(.40370612+.90148123*n+t*(-.27087943+.6122399*n+t*(.00299215-.45399568*n-.14661872*t)))),s=i/Math.min(e*o[0],(1-e)*o[1]),u=e*a,c=(1-e)*l,f=.9*s*Math.sqrt(Math.sqrt(1/(1/(u*u*u*u)+1/(c*c*c*c))));return u=e*.4,c=(1-e)*.8,[Math.sqrt(1/(1/(u*u)+1/(c*c))),f,i]}function fw(e){const t=e.l!==void 0?e.l:0,n=e.a!==void 0?e.a:0,r=e.b!==void 0?e.b:0,i={mode:"okhsl",l:zm(t)};e.alpha!==void 0&&(i.alpha=e.alpha);let o=Math.sqrt(n*n+r*r);if(!o)return i.s=0,i;let[a,l,s]=C4(t,n/o,r/o),u;if(o<l){let c=0,f=.8*a,d=1-f/l;u=(o-c)/(f+d*(o-c))*.8}else{let c=l,f=.2*l*l*1.25*1.25/a,d=1-f/(s-l);u=.8+.2*((o-c)/(f+d*(o-c)))}return u&&(i.s=u,i.h=ut(Math.atan2(r,n)*180/Math.PI)),i}function dw(e){let t=e.h!==void 0?e.h:0,n=e.s!==void 0?e.s:0,r=e.l!==void 0?e.l:0;const i={mode:"oklab",l:ff(r)};if(e.alpha!==void 0&&(i.alpha=e.alpha),!n||r===1)return i.a=i.b=0,i;let o=Math.cos(t/180*Math.PI),a=Math.sin(t/180*Math.PI),[l,s,u]=C4(i.l,o,a),c,f,d,h;n<.8?(c=1.25*n,f=0,d=.8*l,h=1-d/s):(c=5*(n-.8),f=s,d=.2*s*s*1.25*1.25/l,h=1-d/(u-s));let m=f+c*d/(1-h*c);return i.a=m*o,i.b=m*a,i}const VP={...s4,mode:"okhsl",channels:["h","s","l","alpha"],parse:["--okhsl"],serialize:"--okhsl",fromMode:{oklab:fw,rgb:e=>fw(jd(e))},toMode:{oklab:dw,rgb:e=>Vd(dw(e))}};function hw(e){let t=e.l!==void 0?e.l:0,n=e.a!==void 0?e.a:0,r=e.b!==void 0?e.b:0,i=Math.sqrt(n*n+r*r),o=i?n/i:1,a=i?r/i:1,[l,s]=hy(o,a),u=.5,c=1-u/l,f=s/(i+t*s),d=f*t,h=f*i,m=ff(d),p=h*m/d,w=js({l:m,a:o*p,b:a*p}),y=Math.cbrt(1/Math.max(w.r,w.g,w.b,0));t=t/y,i=i/y*zm(t)/t,t=zm(t);const g={mode:"okhsv",s:i?(u+s)*h/(s*u+s*c*h):0,v:t?t/d:0};return g.s&&(g.h=ut(Math.atan2(r,n)*180/Math.PI)),e.alpha!==void 0&&(g.alpha=e.alpha),g}function pw(e){const t={mode:"oklab"};e.alpha!==void 0&&(t.alpha=e.alpha);const n=e.h!==void 0?e.h:0,r=e.s!==void 0?e.s:0,i=e.v!==void 0?e.v:0,o=Math.cos(n/180*Math.PI),a=Math.sin(n/180*Math.PI),[l,s]=hy(o,a),u=.5,c=1-u/l,f=1-r*u/(u+s-s*c*r),d=r*s*u/(u+s-s*c*r),h=ff(f),m=d*h/f,p=js({l:h,a:o*m,b:a*m}),w=Math.cbrt(1/Math.max(p.r,p.g,p.b,0)),y=ff(i*f),g=d*y/f;return t.l=y*w,t.a=g*o*w,t.b=g*a*w,t}const qP={...f4,mode:"okhsv",channels:["h","s","v","alpha"],parse:["--okhsv"],serialize:"--okhsv",fromMode:{oklab:hw,rgb:e=>hw(jd(e))},toMode:{oklab:pw,rgb:e=>Vd(pw(e))}};function YP(e,t){if(!t||t[0]!=="oklab")return;const n={mode:"oklab"},[,r,i,o,a]=t;if(!(r.type===Y.Hue||i.type===Y.Hue||o.type===Y.Hue))return r.type!==Y.None&&(n.l=Math.min(Math.max(0,r.type===Y.Number?r.value:r.value/100),1)),i.type!==Y.None&&(n.a=i.type===Y.Number?i.value:i.value*.4/100),o.type!==Y.None&&(n.b=o.type===Y.Number?o.value:o.value*.4/100),a.type!==Y.None&&(n.alpha=Math.min(1,Math.max(0,a.type===Y.Number?a.value:a.value/100))),n}const XP={...cy,mode:"oklab",toMode:{lrgb:js,rgb:Vd},fromMode:{lrgb:M4,rgb:jd},ranges:{l:[0,1],a:[-.4,.4],b:[-.4,.4]},parse:[YP],serialize:e=>`oklab(${e.l!==void 0?e.l:"none"} ${e.a!==void 0?e.a:"none"} ${e.b!==void 0?e.b:"none"}${e.alpha<1?` / ${e.alpha}`:""})`};function GP(e,t){if(!t||t[0]!=="oklch")return;const n={mode:"oklch"},[,r,i,o,a]=t;if(r.type!==Y.None){if(r.type===Y.Hue)return;n.l=Math.min(Math.max(0,r.type===Y.Number?r.value:r.value/100),1)}if(i.type!==Y.None&&(n.c=Math.max(0,i.type===Y.Number?i.value:i.value*.4/100)),o.type!==Y.None){if(o.type===Y.Percentage)return;n.h=o.value}return a.type!==Y.None&&(n.alpha=Math.min(1,Math.max(0,a.type===Y.Number?a.value:a.value/100))),n}const KP={...fy,mode:"oklch",toMode:{oklab:e=>mi(e,"oklab"),rgb:e=>Vd(mi(e,"oklab"))},fromMode:{rgb:e=>pi(jd(e),"oklch"),oklab:e=>pi(e,"oklch")},parse:[GP],serialize:e=>`oklch(${e.l!==void 0?e.l:"none"} ${e.c!==void 0?e.c:"none"} ${e.h!==void 0?e.h:"none"}${e.alpha<1?` / ${e.alpha}`:""})`,ranges:{l:[0,1],c:[0,.4],h:[0,360]}},mw=e=>{let{r:t,g:n,b:r,alpha:i}=Va(e),o={mode:"xyz65",x:.486570948648216*t+.265667693169093*n+.1982172852343625*r,y:.2289745640697487*t+.6917385218365062*n+.079286914093745*r,z:0*t+.0451133818589026*n+1.043944368900976*r};return i!==void 0&&(o.alpha=i),o},gw=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i=qa({r:e*2.4934969119414263-t*.9313836179191242-.402710784450717*n,g:e*-.8294889695615749+t*1.7626640603183465+.0236246858419436*n,b:e*.0358458302437845-t*.0761723892680418+.9568845240076871*n},"p3");return r!==void 0&&(i.alpha=r),i},QP={...ja,mode:"p3",parse:["display-p3"],serialize:"display-p3",fromMode:{rgb:e=>gw(bo(e)),xyz65:gw},toMode:{rgb:e=>xo(mw(e)),xyz65:mw}},kh=e=>{let t=Math.abs(e);return t>=1/512?Math.sign(e)*Math.pow(t,1/1.8):16*e},yw=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i={mode:"prophoto",r:kh(e*1.3457868816471585-t*.2555720873797946-.0511018649755453*n),g:kh(e*-.5446307051249019+t*1.5082477428451466+.0205274474364214*n),b:kh(e*0+t*0+1.2119675456389452*n)};return r!==void 0&&(i.alpha=r),i},Th=(e=0)=>{let t=Math.abs(e);return t>=16/512?Math.sign(e)*Math.pow(t,1.8):e/16},vw=e=>{let t=Th(e.r),n=Th(e.g),r=Th(e.b),i={mode:"xyz50",x:.7977666449006423*t+.1351812974005331*n+.0313477341283922*r,y:.2880748288194013*t+.7118352342418731*n+899369387256e-16*r,z:0*t+0*n+.8251046025104602*r};return e.alpha!==void 0&&(i.alpha=e.alpha),i},ZP={...ja,mode:"prophoto",parse:["prophoto-rgb"],serialize:"prophoto-rgb",fromMode:{xyz50:yw,rgb:e=>yw(Ws(e))},toMode:{xyz50:vw,rgb:e=>Us(vw(e))}},ww=1.09929682680944,JP=.018053968510807,$h=e=>{const t=Math.abs(e);return t>JP?(Math.sign(e)||1)*(ww*Math.pow(t,.45)-(ww-1)):4.5*e},bw=({x:e,y:t,z:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);let i={mode:"rec2020",r:$h(e*1.7166511879712683-t*.3556707837763925-.2533662813736599*n),g:$h(e*-.6666843518324893+t*1.6164812366349395+.0157685458139111*n),b:$h(e*.0176398574453108-t*.0427706132578085+.9421031212354739*n)};return r!==void 0&&(i.alpha=r),i},xw=1.09929682680944,eR=.018053968510807,Ph=(e=0)=>{let t=Math.abs(e);return t<eR*4.5?e/4.5:(Math.sign(e)||1)*Math.pow((t+xw-1)/xw,1/.45)},_w=e=>{let t=Ph(e.r),n=Ph(e.g),r=Ph(e.b),i={mode:"xyz65",x:.6369580483012911*t+.1446169035862083*n+.1688809751641721*r,y:.262700212011267*t+.6779980715188708*n+.059301716469862*r,z:0*t+.0280726930490874*n+1.0609850577107909*r};return e.alpha!==void 0&&(i.alpha=e.alpha),i},tR={...ja,mode:"rec2020",fromMode:{xyz65:bw,rgb:e=>bw(bo(e))},toMode:{xyz65:_w,rgb:e=>xo(_w(e))},parse:["rec2020"],serialize:"rec2020"},Gi=.0037930732552754493,E4=Math.cbrt(Gi),Rh=e=>Math.cbrt(e)-E4,nR=e=>{const{r:t,g:n,b:r,alpha:i}=Va(e),o=Rh(.3*t+.622*n+.078*r+Gi),a=Rh(.23*t+.692*n+.078*r+Gi),l=Rh(.2434226892454782*t+.2047674442449682*n+.5518098665095535*r+Gi),s={mode:"xyb",x:(o-a)/2,y:(o+a)/2,b:l-(o+a)/2};return i!==void 0&&(s.alpha=i),s},Nh=e=>Math.pow(e+E4,3),rR=({x:e,y:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);const i=Nh(e+t)-Gi,o=Nh(t-e)-Gi,a=Nh(n+t)-Gi,l=qa({r:11.031566904639861*i-9.866943908131562*o-.16462299650829934*a,g:-3.2541473810744237*i+4.418770377582723*o-.16462299650829934*a,b:-3.6588512867136815*i+2.7129230459360922*o+1.9459282407775895*a});return r!==void 0&&(l.alpha=r),l},iR={mode:"xyb",channels:["x","y","b","alpha"],parse:["--xyb"],serialize:"--xyb",toMode:{rgb:rR},fromMode:{rgb:nR},ranges:{x:[-.0154,.0281],y:[0,.8453],b:[-.2778,.388]},interpolate:{x:Q,y:Q,b:Q,alpha:{use:Q,fixup:Ye}}},oR={mode:"xyz50",parse:["xyz-d50"],serialize:"xyz-d50",toMode:{rgb:Us,lab:uy},fromMode:{rgb:Ws,lab:sy},channels:["x","y","z","alpha"],ranges:{x:[0,.964],y:[0,.999],z:[0,.825]},interpolate:{x:Q,y:Q,z:Q,alpha:{use:Q,fixup:Ye}}},aR=e=>{let{x:t,y:n,z:r,alpha:i}=e;t===void 0&&(t=0),n===void 0&&(n=0),r===void 0&&(r=0);let o={mode:"xyz50",x:1.0479298208405488*t+.0229467933410191*n-.0501922295431356*r,y:.0296278156881593*t+.990434484573249*n-.0170738250293851*r,z:-.0092430581525912*t+.0150551448965779*n+.7518742899580008*r};return i!==void 0&&(o.alpha=i),o},lR=e=>{let{x:t,y:n,z:r,alpha:i}=e;t===void 0&&(t=0),n===void 0&&(n=0),r===void 0&&(r=0);let o={mode:"xyz65",x:.9554734527042182*t-.0230985368742614*n+.0632593086610217*r,y:-.0283697069632081*t+1.0099954580058226*n+.021041398966943*r,z:.0123140016883199*t-.0205076964334779*n+1.3303659366080753*r};return i!==void 0&&(o.alpha=i),o},sR={mode:"xyz65",toMode:{rgb:xo,xyz50:aR},fromMode:{rgb:bo,xyz50:lR},ranges:{x:[0,.95],y:[0,1],z:[0,1.088]},channels:["x","y","z","alpha"],parse:["xyz","xyz-d65"],serialize:"xyz-d65",interpolate:{x:Q,y:Q,z:Q,alpha:{use:Q,fixup:Ye}}},uR=({r:e,g:t,b:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);const i={mode:"yiq",y:.29889531*e+.58662247*t+.11448223*n,i:.59597799*e-.2741761*t-.32180189*n,q:.21147017*e-.52261711*t+.31114694*n};return r!==void 0&&(i.alpha=r),i},cR=({y:e,i:t,q:n,alpha:r})=>{e===void 0&&(e=0),t===void 0&&(t=0),n===void 0&&(n=0);const i={mode:"rgb",r:e+.95608445*t+.6208885*n,g:e-.27137664*t-.6486059*n,b:e-1.10561724*t+1.70250126*n};return r!==void 0&&(i.alpha=r),i},fR={mode:"yiq",toMode:{rgb:cR},fromMode:{rgb:uR},channels:["y","i","q","alpha"],parse:["--yiq"],serialize:"--yiq",ranges:{i:[-.595,.595],q:[-.522,.522]},interpolate:{y:Q,i:Q,q:Q,alpha:{use:Q,fixup:Ye}}},dR=e=>Math.max(0,Math.min(1,e||0)),Ah=e=>Math.round(dR(e)*255),hR=Id("rgb"),pR=e=>{if(e===void 0)return;let t=Ah(e.r),n=Ah(e.g),r=Ah(e.b);return"#"+(1<<24|t<<16|n<<8|r).toString(16).slice(1)},Sw=e=>{const t=Q5(e);if(!t)return;const n=e4(t.mode);if(!n.serialize||typeof n.serialize=="string"){let r=`color(${n.serialize||`--${t.mode}`} `;return n.channels.forEach((i,o)=>{i!=="alpha"&&(r+=(o?" ":"")+(t[i]!==void 0?t[i]:"none"))}),t.alpha!==void 0&&t.alpha<1&&(r+=` / ${t.alpha}`),r+")"}if(typeof n.serialize=="function")return n.serialize(t)},_a=e=>pR(hR(e));function Mw(e){let t=Id("lrgb")(e);return .2126*t.r+.7152*t.g+.0722*t.b}function Sl(e,t){let n=Mw(e),r=Mw(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}we(Q$);we(oP);we(aP);we(lP);we(cP);const mR=we(s4);we(f4);we(bP);we(xP);we(CP);we(EP);we(cy);we(TP);we(fy);we(PP);we(BP);we(HP);we(UP);const gi=we(VP);we(qP);we(XP);const gR=we(KP),yR=we(QP);we(ZP);we(tR);const k4=we(ja);we(iR);we(oR);we(sR);we(fR);var vR={name:"65q3c0",styles:`*{box-sizing:border-box;}html{font-family:"IBM Plex Mono",'Courier New',Courier,monospace;-webkit-font-smoothing:antialiased;}body{min-height:100vh;}#root{height:100%;width:100%;}a{text-decoration:none;color:initial;}img,svg{user-select:none;}`};const wR=()=>W(S$,{styles:vR});function T4(e){const t=x.useRef(e);return x.useEffect(()=>{t.current=e}),x.useMemo(()=>(...n)=>{var r;return(r=t.current)==null?void 0:r.call(t,...n)},[])}function bR({prop:e,defaultProp:t,onChange:n=()=>{}}){const[r,i]=xR({defaultProp:t,onChange:n}),o=e!==void 0,a=o?e:r,l=T4(n),s=x.useCallback(u=>{if(o){const f=typeof u=="function"?u(e):u;f!==e&&l(f)}else i(u)},[o,e,i,l]);return[a,s]}function xR({defaultProp:e,onChange:t}){const n=x.useState(e),[r]=n,i=x.useRef(r),o=T4(t);return x.useEffect(()=>{i.current!==r&&(o(r),i.current=r)},[r,i,o]),n}/** @preserve
/////    SAPC APCA - Advanced Perceptual Contrast Algorithm
/////           Beta 0.1.9 W3 • contrast function only
/////           DIST: W3 • Revision date: July 3, 2022
/////    Function to parse color values and determine Lc contrast
/////    Copyright © 2019-2022 by Andrew Somers. All Rights Reserved.
/////    LICENSE: W3 LICENSE
/////    CONTACT: Please use the ISSUES or DISCUSSIONS tab at:
/////    https://github.com/Myndex/SAPC-APCA/
/////
///////////////////////////////////////////////////////////////////////////////
/////
/////    MINIMAL IMPORTS:
/////      import { APCAcontrast, sRGBtoY, displayP3toY,
/////               calcAPCA, fontLookupAPCA } from 'apca-w3';
/////      import { colorParsley } from 'colorparsley';
/////
/////    FORWARD CONTRAST USAGE:
/////      Lc = APCAcontrast( sRGBtoY( TEXTcolor ) , sRGBtoY( BACKGNDcolor ) );
/////    Where the colors are sent as an rgba array [255,255,255,1]
/////
/////    Retrieving an array of font sizes for the contrast:
/////      fontArray = fontLookupAPCA(Lc);
/////
/////    Live Demonstrator at https://www.myndex.com/APCA/
// */const De={mainTRC:2.4,get mainTRCencode(){return 1/this.mainTRC},sRco:.2126729,sGco:.7151522,sBco:.072175,normBG:.56,normTXT:.57,revTXT:.62,revBG:.65,blkThrs:.022,blkClmp:1.414,scaleBoW:1.14,scaleWoB:1.14,loBoWoffset:.027,loWoBoffset:.027,deltaYmin:5e-4,loClip:.1,mFactor:1.9468554433171,get mFactInv(){return 1/this.mFactor},mOffsetIn:.0387393816571401,mExpAdj:.283343396420869,get mExp(){return this.mExpAdj/this.blkClmp},mOffsetOut:.312865795870758};function _R(e,t,n=-1){const r=[0,1.1];if(isNaN(e)||isNaN(t)||Math.min(e,t)<r[0]||Math.max(e,t)>r[1])return 0;let i=0,o=0,a="BoW";return e=e>De.blkThrs?e:e+Math.pow(De.blkThrs-e,De.blkClmp),t=t>De.blkThrs?t:t+Math.pow(De.blkThrs-t,De.blkClmp),Math.abs(t-e)<De.deltaYmin?0:(t>e?(i=(Math.pow(t,De.normBG)-Math.pow(e,De.normTXT))*De.scaleBoW,o=i<De.loClip?0:i-De.loBoWoffset):(a="WoB",i=(Math.pow(t,De.revBG)-Math.pow(e,De.revTXT))*De.scaleWoB,o=i>-De.loClip?0:i+De.loWoBoffset),n<0?o*100:n==0?Math.round(Math.abs(o)*100)+"<sub>"+a+"</sub>":Number.isInteger(n)?(o*100).toFixed(n):0)}function Cw(e=[0,0,0]){function t(n){return Math.pow(n/255,De.mainTRC)}return De.sRco*t(e[0])+De.sGco*t(e[1])+De.sBco*t(e[2])}const ms=(e,t,n)=>e*(1-n)+t*n,$4=(e,t=0,n=1)=>Math.min(n,Math.max(t,e)),gs=(e,t,n)=>$4((n-e)/(t-e)),Ew=(e,t,n,r,i)=>ms(n,r,gs(e,t,i)),SR=(e,t,n,r,i)=>{{const o=l=>Math.pow(1-l,2)*t[0]+2*l*(1-l)*n[0]+Math.pow(l,2)*r[0],a=l=>Math.pow(1-l,2)*t[1]+2*l*(1-l)*n[1]+Math.pow(l,2)*r[1];return[o(e),a(e)]}},P4=(e,t,n,r)=>r+t*(e-n);function aa(e,t=2){return Math.round(e*Math.pow(10,t))/Math.pow(10,t)}function MR(e,t){return[...new Array(t)].map((n,r)=>ms(e.at(0),e.at(-1),r/(t-1)))}const Xo="#000000",Go="#ffffff",kw=[104.0277401822167,0],Tw=[0,-107.88473318309848],$w=[-105.65824801241264,0],Pw=[0,106.04067321268862];function py(e){const t=_a(e);return{hex:_a(e),rgb:k4(t),hsl:mR(t),okhsl:gi(t),oklch:gR(t),apca:{onBlack:Gr(t,Xo),onWhite:Gr(t,Go),blackOn:Gr(Xo,t),whiteOn:Gr(Go,t)},wcag:{onBlack:Sl(t,Xo),onWhite:Sl(t,Go),blackOn:Sl(Xo,t),whiteOn:Sl(Go,t)}}}const CR=iP(),Ih=new Map;function Gr(e,t){const n=`${e}:${t}`;if(Ih.has(`${e}:${t}`))return Ih.get(n);const r=+_R(Cw(Rw(e)),Cw(Rw(t)));return Ih.set(n,r),r}function Rw(e){const t=k4(e);return[Lh(t.r),Lh(t.g),Lh(t.b)]}function Lh(e){return Math.round($4(e)*255)}function R4(e,t){return t.map(n=>[n,n-e]).reduce((n,r)=>Math.abs(n[1])<Math.abs(r[1])?n:r)[0]}function ER(e){const{baseColor:t,baseTone:n,tone:r,scale:i,fixBase:o,hueShift:a=0,decreaseSaturationRatio:l=0}=e,s=n??RR(t,i),u=gs(i.at(0),i.at(-1),s),c=gs(i.at(0),i.at(-1),r),f={...gi(t)};return(!o||r!==s)&&(a!==0&&(f.h=kR(c,f.h,u,a)),0<l&&l<1&&(f.s=TR(c,f.s*(1-l),f.s,u)),f.l=$R(c,f)),py(f)}function kR(e,t,n=1,r){return P4(e,-r,n,t)}function TR(e,t,n,r){return e<r?(t-n)/Math.pow(0-r,2)*Math.pow(e-r,2)+n:(t-n)/Math.pow(1-r,2)*Math.pow(e-r,2)+n}function $R(e,t){const n=e<=.5?Xo:Go,r=e<=.5?ms($w.at(0),$w.at(-1),e):ms(Pw.at(0),Pw.at(-1),e);return PR(t,n,r)}function PR(e,t,n){let r=null,i=110;for(let o=0;o<100;o++){const a=o/100,l=_a({...e,l:a}),s=Gr(l,t),u=Math.abs(Math.abs(n)-Math.abs(s));u<i&&(i=u,r=a)}return r}function RR(e,t){const n=_a(e),r=Gr(Xo,n),i=Gr(Go,n),o=Ew(kw[0],kw[1],t.at(0),t.at(-1),r),a=Ew(Tw[0],Tw[1],t.at(0),t.at(-1),i);let l=500;return i===0?l=o:r===0?l=a:l=(o+a)/2,R4(l,t)}function NR(e){const{baseColor:t,baseTone:n,tone:r,scale:i,fixBase:o,hueShift:a=0,decreaseSaturationRatio:l=0}=e,s=n??OR(t,i),u=gs(i.at(0),i.at(-1),s),c=gs(i.at(0),i.at(-1),r),f={...gi(t)};return(!o||r!==s)&&(a!==0&&(f.h=AR(c,f.h,u,a)),0<l&&l<1&&(f.s=LR(c,f.s*(1-l),f.s,u)),f.l=IR(c)),py(f)}function AR(e,t,n=1,r){return P4(e,-r,n,t)}const N4=[0,0],A4=[.7,.15],I4=[1,1];function IR(e){return 1-SR(e,N4,A4,I4)[1]}function LR(e,t,n,r){return e<r?(t-n)/Math.pow(0-r,2)*Math.pow(e-r,2)+n:(t-n)/Math.pow(1-r,2)*Math.pow(e-r,2)+n}function OR(e,t){const r=1-gi(e).l,i=N4[1],o=A4[1],a=I4[1],l=(i-o+Math.sqrt(r*(i-2*o+a)+Math.pow(o,2)-i*a))/(i-2*o+a),s=ms(t.at(0),t.at(-1),l);return R4(s,t)}const DR=[0,50,100,200,300,400,500,600,700,800,900,950,1e3];function zR(e){const{baseColor:t,scale:n=DR,method:r="apca",fixBase:i,hueShift:o=0,decreaseSaturationRatio:a=0}=e||{},l=py(t),s=new Map,u={lightness:NR,apca:ER}[r];n.forEach(f=>{const d=u({baseColor:l.okhsl,tone:f,scale:n,fixBase:i,hueShift:o,decreaseSaturationRatio:a});s.set(f,{number:f,...d,delta:CR(l.okhsl,d.okhsl)})});let c=s.values().reduce((f,d)=>f.delta<d.delta?f:d);return{input:l,shades:n.map(f=>s.get(f)),closestShade:c}}const Sa=ie("div",{target:"eeub2x23"})({name:"cp1wjl",styles:"display:flex;flex-direction:column;row-gap:6px"}),io=ie("label",{target:"eeub2x22"})({name:"mmdt3g",styles:"font-size:14px"}),my=ie("input",{target:"eeub2x21"})({name:"1w81jz2",styles:"margin:0;border:0;font-size:14px;line-height:20px;padding-inline:12px;height:40px;border-radius:6px;background-color:rgba(0 0 0 / .1);&:focus{outline:2px solid transparent;outline-offset:2px;box-shadow:0 0 0 1px white, 0 0 0 3px black;}"});function Oh(e){const{value:t,onChange:n,channel:r,step:i=.01,...o}=e,a=t[r],l=s=>{n==null||n({...t,[r]:s})};return de(FR,{...o,children:[W(UR,{color:t,channel:r,value:a,onChange:s=>l(s),step:i}),W(BR,{color:t,channel:r,value:a,onChange:s=>l(s),step:i})]})}const FR=ie("div",{target:"e9ptfsg4"})(()=>({display:"flex",columnGap:"12px"}),""),BR=e=>{const{color:t,channel:n,value:r,onChange:i,step:o=.01}=e,a=L4(t,n),l=r,s=u=>{i==null||i(u)};return W(HR,{type:"number",value:l,min:a[0],max:a[1],step:o,onChange:u=>s(parseFloat(u.target.value))})},HR=ie(my,{target:"e9ptfsg3"})({name:"1pzk433",styles:"width:100px"}),UR=e=>{const{color:t,channel:n,value:r,onChange:i,step:o=.01}=e,a=L4(t,n),l=s=>{i==null||i(s)};return W(WR,{type:"range",style:{backgroundImage:jR(t,n,a)},value:r,onChange:s=>l(+s.target.value),min:a.at(0),max:a.at(-1),step:o,trumbColor:O4(t)})},WR=ie("input",{target:"e9ptfsg2"})(({trumbColor:e})=>({appearance:"none",position:"relative",touchAction:"none",height:"40px",minWidth:"200px",flexGrow:1,borderRadius:"6px",backgroundClip:"content-box",border:"1px dashed rgba(0 0 0 / .1)","&::-webkit-slider-thumb":{appearance:"none",width:"10px",height:"40px",boxShadow:"0 0 0 1px white, 0 0 0 2px black",cursor:"grab",borderRadius:"2px",backgroundColor:e},"&::-moz-range-thumb":{appearance:"none",border:"none",width:"10px",height:"40px",boxShadow:"0 0 0 1px white, 0 0 0 2px black",cursor:"grab",borderRadius:"2px",backgroundColor:e}}),"");function jR(e,t,n){let r=[];t==="h"?r=VR():t==="l"?r=Aw(MR(n,5)):r=Aw(n);const i=r.map(o=>O4({...e,[t]:o})).join(", ");return`linear-gradient(to right ${e.mode==="oklch"?"in oklch":""}, ${i})`}function L4(e,t){return e.mode==="okhsl"?{h:[0,360],s:[0,1],l:[0,1]}[t]:e.mode==="oklch"?{l:[0,1],c:[0,.4],h:[0,360]}[t]:null}const Nw=.01;function Aw(e){return e.map((t,n)=>n===0?t+Nw:n===e.length-1?t-Nw:t)}function VR(){return new Array(360/30+1).fill(0).reduce((e,t,n)=>[...e,n*30],[])}function O4(e){return typeof e=="object"&&e.mode==="oklch"?Sw(e):Sw(yR(e))}const D4=e=>{const{labelText:t,id:n,checked:r,onChange:i,...o}=e;return de(qR,{children:[W("input",{id:n,type:"checkbox",checked:r,onChange:a=>i==null?void 0:i(a.target.checked),...o}),t?W(io,{htmlFor:n,children:t}):null]})},qR=ie("div",{target:"e1kz4ufq0"})(({})=>({display:"flex",columnGap:"8px"}),""),Iw=e=>{const{labelText:t,id:n,defaultValue:r="",value:i,onChange:o,...a}=e;return de(YR,{children:[t?W(io,{htmlFor:n,children:t}):null,W(my,{id:n,type:"number",value:typeof i=="number"?i.toString():"",onChange:l=>o==null?void 0:o(l.target.value?parseFloat(l.target.value):null),...a})]})},YR=ie(Sa,{target:"eqvv40g0"})(()=>({}),""),XR=e=>{const{value:t,onChange:n}=e,[r,i]=bR({defaultProp:gi("#d03531"),prop:t,onChange:n});return de(GR,{children:[W(Oh,{value:r,onChange:i,channel:"h",step:1}),W(Oh,{value:r,onChange:i,channel:"s"}),W(Oh,{value:r,onChange:i,channel:"l"})]})},GR=ie("div",{target:"eao5m790"})(({})=>({display:"flex",flexDirection:"column",rowGap:"12px"}),"");function Lw(e,[t,n]){return Math.min(n,Math.max(t,e))}function Fe(e,t,{checkForDefaultPrevented:n=!0}={}){return function(i){if(e==null||e(i),n===!1||!i.defaultPrevented)return t==null?void 0:t(i)}}function KR(e,t=[]){let n=[];function r(o,a){const l=x.createContext(a),s=n.length;n=[...n,a];function u(f){const{scope:d,children:h,...m}=f,p=(d==null?void 0:d[e][s])||l,w=x.useMemo(()=>m,Object.values(m));return K.jsx(p.Provider,{value:w,children:h})}function c(f,d){const h=(d==null?void 0:d[e][s])||l,m=x.useContext(h);if(m)return m;if(a!==void 0)return a;throw new Error(`\`${f}\` must be used within \`${o}\``)}return u.displayName=o+"Provider",[u,c]}const i=()=>{const o=n.map(a=>x.createContext(a));return function(l){const s=(l==null?void 0:l[e])||o;return x.useMemo(()=>({[`__scope${e}`]:{...l,[e]:s}}),[l,s])}};return i.scopeName=e,[r,QR(i,...t)]}function QR(...e){const t=e[0];if(e.length===1)return t;const n=()=>{const r=e.map(i=>({useScope:i(),scopeName:i.scopeName}));return function(o){const a=r.reduce((l,{useScope:s,scopeName:u})=>{const f=s(o)[`__scope${u}`];return{...l,...f}},{});return x.useMemo(()=>({[`__scope${t.scopeName}`]:a}),[a])}};return n.scopeName=t.scopeName,n}function ZR(e,t){typeof e=="function"?e(t):e!=null&&(e.current=t)}function z4(...e){return t=>e.forEach(n=>ZR(n,t))}function ct(...e){return x.useCallback(z4(...e),e)}var ys=x.forwardRef((e,t)=>{const{children:n,...r}=e,i=x.Children.toArray(n),o=i.find(eN);if(o){const a=o.props.children,l=i.map(s=>s===o?x.Children.count(a)>1?x.Children.only(null):x.isValidElement(a)?a.props.children:null:s);return K.jsx(Fm,{...r,ref:t,children:x.isValidElement(a)?x.cloneElement(a,void 0,l):null})}return K.jsx(Fm,{...r,ref:t,children:n})});ys.displayName="Slot";var Fm=x.forwardRef((e,t)=>{const{children:n,...r}=e;if(x.isValidElement(n)){const i=nN(n);return x.cloneElement(n,{...tN(r,n.props),ref:t?z4(t,i):i})}return x.Children.count(n)>1?x.Children.only(null):null});Fm.displayName="SlotClone";var JR=({children:e})=>K.jsx(K.Fragment,{children:e});function eN(e){return x.isValidElement(e)&&e.type===JR}function tN(e,t){const n={...t};for(const r in t){const i=e[r],o=t[r];/^on[A-Z]/.test(r)?i&&o?n[r]=(...l)=>{o(...l),i(...l)}:i&&(n[r]=i):r==="style"?n[r]={...i,...o}:r==="className"&&(n[r]=[i,o].filter(Boolean).join(" "))}return{...e,...n}}function nN(e){var r,i;let t=(r=Object.getOwnPropertyDescriptor(e.props,"ref"))==null?void 0:r.get,n=t&&"isReactWarning"in t&&t.isReactWarning;return n?e.ref:(t=(i=Object.getOwnPropertyDescriptor(e,"ref"))==null?void 0:i.get,n=t&&"isReactWarning"in t&&t.isReactWarning,n?e.props.ref:e.props.ref||e.ref)}function rN(e){const t=e+"CollectionProvider",[n,r]=KR(t),[i,o]=n(t,{collectionRef:{current:null},itemMap:new Map}),a=h=>{const{scope:m,children:p}=h,w=Fr.useRef(null),y=Fr.useRef(new Map).current;return K.jsx(i,{scope:m,itemMap:y,collectionRef:w,children:p})};a.displayName=t;const l=e+"CollectionSlot",s=Fr.forwardRef((h,m)=>{const{scope:p,children:w}=h,y=o(l,p),g=ct(m,y.collectionRef);return K.jsx(ys,{ref:g,children:w})});s.displayName=l;const u=e+"CollectionItemSlot",c="data-radix-collection-item",f=Fr.forwardRef((h,m)=>{const{scope:p,children:w,...y}=h,g=Fr.useRef(null),v=ct(m,g),b=o(u,p);return Fr.useEffect(()=>(b.itemMap.set(g,{ref:g,...y}),()=>void b.itemMap.delete(g))),K.jsx(ys,{[c]:"",ref:v,children:w})});f.displayName=u;function d(h){const m=o(e+"CollectionConsumer",h);return Fr.useCallback(()=>{const w=m.collectionRef.current;if(!w)return[];const y=Array.from(w.querySelectorAll(`[${c}]`));return Array.from(m.itemMap.values()).sort((b,_)=>y.indexOf(b.ref.current)-y.indexOf(_.ref.current))},[m.collectionRef,m.itemMap])}return[{Provider:a,Slot:s,ItemSlot:f},d,r]}function iN(e,t=[]){let n=[];function r(o,a){const l=x.createContext(a),s=n.length;n=[...n,a];const u=f=>{var y;const{scope:d,children:h,...m}=f,p=((y=d==null?void 0:d[e])==null?void 0:y[s])||l,w=x.useMemo(()=>m,Object.values(m));return K.jsx(p.Provider,{value:w,children:h})};u.displayName=o+"Provider";function c(f,d){var p;const h=((p=d==null?void 0:d[e])==null?void 0:p[s])||l,m=x.useContext(h);if(m)return m;if(a!==void 0)return a;throw new Error(`\`${f}\` must be used within \`${o}\``)}return[u,c]}const i=()=>{const o=n.map(a=>x.createContext(a));return function(l){const s=(l==null?void 0:l[e])||o;return x.useMemo(()=>({[`__scope${e}`]:{...l,[e]:s}}),[l,s])}};return i.scopeName=e,[r,oN(i,...t)]}function oN(...e){const t=e[0];if(e.length===1)return t;const n=()=>{const r=e.map(i=>({useScope:i(),scopeName:i.scopeName}));return function(o){const a=r.reduce((l,{useScope:s,scopeName:u})=>{const f=s(o)[`__scope${u}`];return{...l,...f}},{});return x.useMemo(()=>({[`__scope${t.scopeName}`]:a}),[a])}};return n.scopeName=t.scopeName,n}var aN=x.createContext(void 0);function lN(e){const t=x.useContext(aN);return e||t||"ltr"}var sN=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","span","svg","ul"],We=sN.reduce((e,t)=>{const n=x.forwardRef((r,i)=>{const{asChild:o,...a}=r,l=o?ys:t;return typeof window<"u"&&(window[Symbol.for("radix-ui")]=!0),K.jsx(l,{...a,ref:i})});return n.displayName=`Primitive.${t}`,{...e,[t]:n}},{});function uN(e,t){e&&wo.flushSync(()=>e.dispatchEvent(t))}function Cr(e){const t=x.useRef(e);return x.useEffect(()=>{t.current=e}),x.useMemo(()=>(...n)=>{var r;return(r=t.current)==null?void 0:r.call(t,...n)},[])}function cN(e,t=globalThis==null?void 0:globalThis.document){const n=Cr(e);x.useEffect(()=>{const r=i=>{i.key==="Escape"&&n(i)};return t.addEventListener("keydown",r,{capture:!0}),()=>t.removeEventListener("keydown",r,{capture:!0})},[n,t])}var fN="DismissableLayer",Bm="dismissableLayer.update",dN="dismissableLayer.pointerDownOutside",hN="dismissableLayer.focusOutside",Ow,F4=x.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),B4=x.forwardRef((e,t)=>{const{disableOutsidePointerEvents:n=!1,onEscapeKeyDown:r,onPointerDownOutside:i,onFocusOutside:o,onInteractOutside:a,onDismiss:l,...s}=e,u=x.useContext(F4),[c,f]=x.useState(null),d=(c==null?void 0:c.ownerDocument)??(globalThis==null?void 0:globalThis.document),[,h]=x.useState({}),m=ct(t,S=>f(S)),p=Array.from(u.layers),[w]=[...u.layersWithOutsidePointerEventsDisabled].slice(-1),y=p.indexOf(w),g=c?p.indexOf(c):-1,v=u.layersWithOutsidePointerEventsDisabled.size>0,b=g>=y,_=gN(S=>{const C=S.target,k=[...u.branches].some($=>$.contains(C));!b||k||(i==null||i(S),a==null||a(S),S.defaultPrevented||l==null||l())},d),M=yN(S=>{const C=S.target;[...u.branches].some($=>$.contains(C))||(o==null||o(S),a==null||a(S),S.defaultPrevented||l==null||l())},d);return cN(S=>{g===u.layers.size-1&&(r==null||r(S),!S.defaultPrevented&&l&&(S.preventDefault(),l()))},d),x.useEffect(()=>{if(c)return n&&(u.layersWithOutsidePointerEventsDisabled.size===0&&(Ow=d.body.style.pointerEvents,d.body.style.pointerEvents="none"),u.layersWithOutsidePointerEventsDisabled.add(c)),u.layers.add(c),Dw(),()=>{n&&u.layersWithOutsidePointerEventsDisabled.size===1&&(d.body.style.pointerEvents=Ow)}},[c,d,n,u]),x.useEffect(()=>()=>{c&&(u.layers.delete(c),u.layersWithOutsidePointerEventsDisabled.delete(c),Dw())},[c,u]),x.useEffect(()=>{const S=()=>h({});return document.addEventListener(Bm,S),()=>document.removeEventListener(Bm,S)},[]),K.jsx(We.div,{...s,ref:m,style:{pointerEvents:v?b?"auto":"none":void 0,...e.style},onFocusCapture:Fe(e.onFocusCapture,M.onFocusCapture),onBlurCapture:Fe(e.onBlurCapture,M.onBlurCapture),onPointerDownCapture:Fe(e.onPointerDownCapture,_.onPointerDownCapture)})});B4.displayName=fN;var pN="DismissableLayerBranch",mN=x.forwardRef((e,t)=>{const n=x.useContext(F4),r=x.useRef(null),i=ct(t,r);return x.useEffect(()=>{const o=r.current;if(o)return n.branches.add(o),()=>{n.branches.delete(o)}},[n.branches]),K.jsx(We.div,{...e,ref:i})});mN.displayName=pN;function gN(e,t=globalThis==null?void 0:globalThis.document){const n=Cr(e),r=x.useRef(!1),i=x.useRef(()=>{});return x.useEffect(()=>{const o=l=>{if(l.target&&!r.current){let s=function(){H4(dN,n,u,{discrete:!0})};const u={originalEvent:l};l.pointerType==="touch"?(t.removeEventListener("click",i.current),i.current=s,t.addEventListener("click",i.current,{once:!0})):s()}else t.removeEventListener("click",i.current);r.current=!1},a=window.setTimeout(()=>{t.addEventListener("pointerdown",o)},0);return()=>{window.clearTimeout(a),t.removeEventListener("pointerdown",o),t.removeEventListener("click",i.current)}},[t,n]),{onPointerDownCapture:()=>r.current=!0}}function yN(e,t=globalThis==null?void 0:globalThis.document){const n=Cr(e),r=x.useRef(!1);return x.useEffect(()=>{const i=o=>{o.target&&!r.current&&H4(hN,n,{originalEvent:o},{discrete:!1})};return t.addEventListener("focusin",i),()=>t.removeEventListener("focusin",i)},[t,n]),{onFocusCapture:()=>r.current=!0,onBlurCapture:()=>r.current=!1}}function Dw(){const e=new CustomEvent(Bm);document.dispatchEvent(e)}function H4(e,t,n,{discrete:r}){const i=n.originalEvent.target,o=new CustomEvent(e,{bubbles:!1,cancelable:!0,detail:n});t&&i.addEventListener(e,t,{once:!0}),r?uN(i,o):i.dispatchEvent(o)}var Dh=0;function vN(){x.useEffect(()=>{const e=document.querySelectorAll("[data-radix-focus-guard]");return document.body.insertAdjacentElement("afterbegin",e[0]??zw()),document.body.insertAdjacentElement("beforeend",e[1]??zw()),Dh++,()=>{Dh===1&&document.querySelectorAll("[data-radix-focus-guard]").forEach(t=>t.remove()),Dh--}},[])}function zw(){const e=document.createElement("span");return e.setAttribute("data-radix-focus-guard",""),e.tabIndex=0,e.style.outline="none",e.style.opacity="0",e.style.position="fixed",e.style.pointerEvents="none",e}var zh="focusScope.autoFocusOnMount",Fh="focusScope.autoFocusOnUnmount",Fw={bubbles:!1,cancelable:!0},wN="FocusScope",U4=x.forwardRef((e,t)=>{const{loop:n=!1,trapped:r=!1,onMountAutoFocus:i,onUnmountAutoFocus:o,...a}=e,[l,s]=x.useState(null),u=Cr(i),c=Cr(o),f=x.useRef(null),d=ct(t,p=>s(p)),h=x.useRef({paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}}).current;x.useEffect(()=>{if(r){let p=function(v){if(h.paused||!l)return;const b=v.target;l.contains(b)?f.current=b:Br(f.current,{select:!0})},w=function(v){if(h.paused||!l)return;const b=v.relatedTarget;b!==null&&(l.contains(b)||Br(f.current,{select:!0}))},y=function(v){if(document.activeElement===document.body)for(const _ of v)_.removedNodes.length>0&&Br(l)};document.addEventListener("focusin",p),document.addEventListener("focusout",w);const g=new MutationObserver(y);return l&&g.observe(l,{childList:!0,subtree:!0}),()=>{document.removeEventListener("focusin",p),document.removeEventListener("focusout",w),g.disconnect()}}},[r,l,h.paused]),x.useEffect(()=>{if(l){Hw.add(h);const p=document.activeElement;if(!l.contains(p)){const y=new CustomEvent(zh,Fw);l.addEventListener(zh,u),l.dispatchEvent(y),y.defaultPrevented||(bN(CN(W4(l)),{select:!0}),document.activeElement===p&&Br(l))}return()=>{l.removeEventListener(zh,u),setTimeout(()=>{const y=new CustomEvent(Fh,Fw);l.addEventListener(Fh,c),l.dispatchEvent(y),y.defaultPrevented||Br(p??document.body,{select:!0}),l.removeEventListener(Fh,c),Hw.remove(h)},0)}}},[l,u,c,h]);const m=x.useCallback(p=>{if(!n&&!r||h.paused)return;const w=p.key==="Tab"&&!p.altKey&&!p.ctrlKey&&!p.metaKey,y=document.activeElement;if(w&&y){const g=p.currentTarget,[v,b]=xN(g);v&&b?!p.shiftKey&&y===b?(p.preventDefault(),n&&Br(v,{select:!0})):p.shiftKey&&y===v&&(p.preventDefault(),n&&Br(b,{select:!0})):y===g&&p.preventDefault()}},[n,r,h.paused]);return K.jsx(We.div,{tabIndex:-1,...a,ref:d,onKeyDown:m})});U4.displayName=wN;function bN(e,{select:t=!1}={}){const n=document.activeElement;for(const r of e)if(Br(r,{select:t}),document.activeElement!==n)return}function xN(e){const t=W4(e),n=Bw(t,e),r=Bw(t.reverse(),e);return[n,r]}function W4(e){const t=[],n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode:r=>{const i=r.tagName==="INPUT"&&r.type==="hidden";return r.disabled||r.hidden||i?NodeFilter.FILTER_SKIP:r.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;n.nextNode();)t.push(n.currentNode);return t}function Bw(e,t){for(const n of e)if(!_N(n,{upTo:t}))return n}function _N(e,{upTo:t}){if(getComputedStyle(e).visibility==="hidden")return!0;for(;e;){if(t!==void 0&&e===t)return!1;if(getComputedStyle(e).display==="none")return!0;e=e.parentElement}return!1}function SN(e){return e instanceof HTMLInputElement&&"select"in e}function Br(e,{select:t=!1}={}){if(e&&e.focus){const n=document.activeElement;e.focus({preventScroll:!0}),e!==n&&SN(e)&&t&&e.select()}}var Hw=MN();function MN(){let e=[];return{add(t){const n=e[0];t!==n&&(n==null||n.pause()),e=Uw(e,t),e.unshift(t)},remove(t){var n;e=Uw(e,t),(n=e[0])==null||n.resume()}}}function Uw(e,t){const n=[...e],r=n.indexOf(t);return r!==-1&&n.splice(r,1),n}function CN(e){return e.filter(t=>t.tagName!=="A")}var jt=globalThis!=null&&globalThis.document?x.useLayoutEffect:()=>{},EN=Ac.useId||(()=>{}),kN=0;function gy(e){const[t,n]=x.useState(EN());return jt(()=>{n(r=>r??String(kN++))},[e]),t?`radix-${t}`:""}const TN=["top","right","bottom","left"],yi=Math.min,zt=Math.max,df=Math.round,zu=Math.floor,qn=e=>({x:e,y:e}),$N={left:"right",right:"left",bottom:"top",top:"bottom"},PN={start:"end",end:"start"};function Hm(e,t,n){return zt(e,yi(t,n))}function Er(e,t){return typeof e=="function"?e(t):e}function kr(e){return e.split("-")[0]}function Ya(e){return e.split("-")[1]}function yy(e){return e==="x"?"y":"x"}function vy(e){return e==="y"?"height":"width"}function vi(e){return["top","bottom"].includes(kr(e))?"y":"x"}function wy(e){return yy(vi(e))}function RN(e,t,n){n===void 0&&(n=!1);const r=Ya(e),i=wy(e),o=vy(i);let a=i==="x"?r===(n?"end":"start")?"right":"left":r==="start"?"bottom":"top";return t.reference[o]>t.floating[o]&&(a=hf(a)),[a,hf(a)]}function NN(e){const t=hf(e);return[Um(e),t,Um(t)]}function Um(e){return e.replace(/start|end/g,t=>PN[t])}function AN(e,t,n){const r=["left","right"],i=["right","left"],o=["top","bottom"],a=["bottom","top"];switch(e){case"top":case"bottom":return n?t?i:r:t?r:i;case"left":case"right":return t?o:a;default:return[]}}function IN(e,t,n,r){const i=Ya(e);let o=AN(kr(e),n==="start",r);return i&&(o=o.map(a=>a+"-"+i),t&&(o=o.concat(o.map(Um)))),o}function hf(e){return e.replace(/left|right|bottom|top/g,t=>$N[t])}function LN(e){return{top:0,right:0,bottom:0,left:0,...e}}function j4(e){return typeof e!="number"?LN(e):{top:e,right:e,bottom:e,left:e}}function pf(e){const{x:t,y:n,width:r,height:i}=e;return{width:r,height:i,top:n,left:t,right:t+r,bottom:n+i,x:t,y:n}}function Ww(e,t,n){let{reference:r,floating:i}=e;const o=vi(t),a=wy(t),l=vy(a),s=kr(t),u=o==="y",c=r.x+r.width/2-i.width/2,f=r.y+r.height/2-i.height/2,d=r[l]/2-i[l]/2;let h;switch(s){case"top":h={x:c,y:r.y-i.height};break;case"bottom":h={x:c,y:r.y+r.height};break;case"right":h={x:r.x+r.width,y:f};break;case"left":h={x:r.x-i.width,y:f};break;default:h={x:r.x,y:r.y}}switch(Ya(t)){case"start":h[a]-=d*(n&&u?-1:1);break;case"end":h[a]+=d*(n&&u?-1:1);break}return h}const ON=async(e,t,n)=>{const{placement:r="bottom",strategy:i="absolute",middleware:o=[],platform:a}=n,l=o.filter(Boolean),s=await(a.isRTL==null?void 0:a.isRTL(t));let u=await a.getElementRects({reference:e,floating:t,strategy:i}),{x:c,y:f}=Ww(u,r,s),d=r,h={},m=0;for(let p=0;p<l.length;p++){const{name:w,fn:y}=l[p],{x:g,y:v,data:b,reset:_}=await y({x:c,y:f,initialPlacement:r,placement:d,strategy:i,middlewareData:h,rects:u,platform:a,elements:{reference:e,floating:t}});c=g??c,f=v??f,h={...h,[w]:{...h[w],...b}},_&&m<=50&&(m++,typeof _=="object"&&(_.placement&&(d=_.placement),_.rects&&(u=_.rects===!0?await a.getElementRects({reference:e,floating:t,strategy:i}):_.rects),{x:c,y:f}=Ww(u,d,s)),p=-1)}return{x:c,y:f,placement:d,strategy:i,middlewareData:h}};async function vs(e,t){var n;t===void 0&&(t={});const{x:r,y:i,platform:o,rects:a,elements:l,strategy:s}=e,{boundary:u="clippingAncestors",rootBoundary:c="viewport",elementContext:f="floating",altBoundary:d=!1,padding:h=0}=Er(t,e),m=j4(h),w=l[d?f==="floating"?"reference":"floating":f],y=pf(await o.getClippingRect({element:(n=await(o.isElement==null?void 0:o.isElement(w)))==null||n?w:w.contextElement||await(o.getDocumentElement==null?void 0:o.getDocumentElement(l.floating)),boundary:u,rootBoundary:c,strategy:s})),g=f==="floating"?{x:r,y:i,width:a.floating.width,height:a.floating.height}:a.reference,v=await(o.getOffsetParent==null?void 0:o.getOffsetParent(l.floating)),b=await(o.isElement==null?void 0:o.isElement(v))?await(o.getScale==null?void 0:o.getScale(v))||{x:1,y:1}:{x:1,y:1},_=pf(o.convertOffsetParentRelativeRectToViewportRelativeRect?await o.convertOffsetParentRelativeRectToViewportRelativeRect({elements:l,rect:g,offsetParent:v,strategy:s}):g);return{top:(y.top-_.top+m.top)/b.y,bottom:(_.bottom-y.bottom+m.bottom)/b.y,left:(y.left-_.left+m.left)/b.x,right:(_.right-y.right+m.right)/b.x}}const DN=e=>({name:"arrow",options:e,async fn(t){const{x:n,y:r,placement:i,rects:o,platform:a,elements:l,middlewareData:s}=t,{element:u,padding:c=0}=Er(e,t)||{};if(u==null)return{};const f=j4(c),d={x:n,y:r},h=wy(i),m=vy(h),p=await a.getDimensions(u),w=h==="y",y=w?"top":"left",g=w?"bottom":"right",v=w?"clientHeight":"clientWidth",b=o.reference[m]+o.reference[h]-d[h]-o.floating[m],_=d[h]-o.reference[h],M=await(a.getOffsetParent==null?void 0:a.getOffsetParent(u));let S=M?M[v]:0;(!S||!await(a.isElement==null?void 0:a.isElement(M)))&&(S=l.floating[v]||o.floating[m]);const C=b/2-_/2,k=S/2-p[m]/2-1,$=yi(f[y],k),E=yi(f[g],k),U=$,D=S-p[m]-E,N=S/2-p[m]/2+C,P=Hm(U,N,D),I=!s.arrow&&Ya(i)!=null&&N!==P&&o.reference[m]/2-(N<U?$:E)-p[m]/2<0,z=I?N<U?N-U:N-D:0;return{[h]:d[h]+z,data:{[h]:P,centerOffset:N-P-z,...I&&{alignmentOffset:z}},reset:I}}}),zN=function(e){return e===void 0&&(e={}),{name:"flip",options:e,async fn(t){var n,r;const{placement:i,middlewareData:o,rects:a,initialPlacement:l,platform:s,elements:u}=t,{mainAxis:c=!0,crossAxis:f=!0,fallbackPlacements:d,fallbackStrategy:h="bestFit",fallbackAxisSideDirection:m="none",flipAlignment:p=!0,...w}=Er(e,t);if((n=o.arrow)!=null&&n.alignmentOffset)return{};const y=kr(i),g=vi(l),v=kr(l)===l,b=await(s.isRTL==null?void 0:s.isRTL(u.floating)),_=d||(v||!p?[hf(l)]:NN(l)),M=m!=="none";!d&&M&&_.push(...IN(l,p,m,b));const S=[l,..._],C=await vs(t,w),k=[];let $=((r=o.flip)==null?void 0:r.overflows)||[];if(c&&k.push(C[y]),f){const N=RN(i,a,b);k.push(C[N[0]],C[N[1]])}if($=[...$,{placement:i,overflows:k}],!k.every(N=>N<=0)){var E,U;const N=(((E=o.flip)==null?void 0:E.index)||0)+1,P=S[N];if(P)return{data:{index:N,overflows:$},reset:{placement:P}};let I=(U=$.filter(z=>z.overflows[0]<=0).sort((z,T)=>z.overflows[1]-T.overflows[1])[0])==null?void 0:U.placement;if(!I)switch(h){case"bestFit":{var D;const z=(D=$.filter(T=>{if(M){const R=vi(T.placement);return R===g||R==="y"}return!0}).map(T=>[T.placement,T.overflows.filter(R=>R>0).reduce((R,A)=>R+A,0)]).sort((T,R)=>T[1]-R[1])[0])==null?void 0:D[0];z&&(I=z);break}case"initialPlacement":I=l;break}if(i!==I)return{reset:{placement:I}}}return{}}}};function jw(e,t){return{top:e.top-t.height,right:e.right-t.width,bottom:e.bottom-t.height,left:e.left-t.width}}function Vw(e){return TN.some(t=>e[t]>=0)}const FN=function(e){return e===void 0&&(e={}),{name:"hide",options:e,async fn(t){const{rects:n}=t,{strategy:r="referenceHidden",...i}=Er(e,t);switch(r){case"referenceHidden":{const o=await vs(t,{...i,elementContext:"reference"}),a=jw(o,n.reference);return{data:{referenceHiddenOffsets:a,referenceHidden:Vw(a)}}}case"escaped":{const o=await vs(t,{...i,altBoundary:!0}),a=jw(o,n.floating);return{data:{escapedOffsets:a,escaped:Vw(a)}}}default:return{}}}}};async function BN(e,t){const{placement:n,platform:r,elements:i}=e,o=await(r.isRTL==null?void 0:r.isRTL(i.floating)),a=kr(n),l=Ya(n),s=vi(n)==="y",u=["left","top"].includes(a)?-1:1,c=o&&s?-1:1,f=Er(t,e);let{mainAxis:d,crossAxis:h,alignmentAxis:m}=typeof f=="number"?{mainAxis:f,crossAxis:0,alignmentAxis:null}:{mainAxis:f.mainAxis||0,crossAxis:f.crossAxis||0,alignmentAxis:f.alignmentAxis};return l&&typeof m=="number"&&(h=l==="end"?m*-1:m),s?{x:h*c,y:d*u}:{x:d*u,y:h*c}}const HN=function(e){return e===void 0&&(e=0),{name:"offset",options:e,async fn(t){var n,r;const{x:i,y:o,placement:a,middlewareData:l}=t,s=await BN(t,e);return a===((n=l.offset)==null?void 0:n.placement)&&(r=l.arrow)!=null&&r.alignmentOffset?{}:{x:i+s.x,y:o+s.y,data:{...s,placement:a}}}}},UN=function(e){return e===void 0&&(e={}),{name:"shift",options:e,async fn(t){const{x:n,y:r,placement:i}=t,{mainAxis:o=!0,crossAxis:a=!1,limiter:l={fn:w=>{let{x:y,y:g}=w;return{x:y,y:g}}},...s}=Er(e,t),u={x:n,y:r},c=await vs(t,s),f=vi(kr(i)),d=yy(f);let h=u[d],m=u[f];if(o){const w=d==="y"?"top":"left",y=d==="y"?"bottom":"right",g=h+c[w],v=h-c[y];h=Hm(g,h,v)}if(a){const w=f==="y"?"top":"left",y=f==="y"?"bottom":"right",g=m+c[w],v=m-c[y];m=Hm(g,m,v)}const p=l.fn({...t,[d]:h,[f]:m});return{...p,data:{x:p.x-n,y:p.y-r,enabled:{[d]:o,[f]:a}}}}}},WN=function(e){return e===void 0&&(e={}),{options:e,fn(t){const{x:n,y:r,placement:i,rects:o,middlewareData:a}=t,{offset:l=0,mainAxis:s=!0,crossAxis:u=!0}=Er(e,t),c={x:n,y:r},f=vi(i),d=yy(f);let h=c[d],m=c[f];const p=Er(l,t),w=typeof p=="number"?{mainAxis:p,crossAxis:0}:{mainAxis:0,crossAxis:0,...p};if(s){const v=d==="y"?"height":"width",b=o.reference[d]-o.floating[v]+w.mainAxis,_=o.reference[d]+o.reference[v]-w.mainAxis;h<b?h=b:h>_&&(h=_)}if(u){var y,g;const v=d==="y"?"width":"height",b=["top","left"].includes(kr(i)),_=o.reference[f]-o.floating[v]+(b&&((y=a.offset)==null?void 0:y[f])||0)+(b?0:w.crossAxis),M=o.reference[f]+o.reference[v]+(b?0:((g=a.offset)==null?void 0:g[f])||0)-(b?w.crossAxis:0);m<_?m=_:m>M&&(m=M)}return{[d]:h,[f]:m}}}},jN=function(e){return e===void 0&&(e={}),{name:"size",options:e,async fn(t){var n,r;const{placement:i,rects:o,platform:a,elements:l}=t,{apply:s=()=>{},...u}=Er(e,t),c=await vs(t,u),f=kr(i),d=Ya(i),h=vi(i)==="y",{width:m,height:p}=o.floating;let w,y;f==="top"||f==="bottom"?(w=f,y=d===(await(a.isRTL==null?void 0:a.isRTL(l.floating))?"start":"end")?"left":"right"):(y=f,w=d==="end"?"top":"bottom");const g=p-c.top-c.bottom,v=m-c.left-c.right,b=yi(p-c[w],g),_=yi(m-c[y],v),M=!t.middlewareData.shift;let S=b,C=_;if((n=t.middlewareData.shift)!=null&&n.enabled.x&&(C=v),(r=t.middlewareData.shift)!=null&&r.enabled.y&&(S=g),M&&!d){const $=zt(c.left,0),E=zt(c.right,0),U=zt(c.top,0),D=zt(c.bottom,0);h?C=m-2*($!==0||E!==0?$+E:zt(c.left,c.right)):S=p-2*(U!==0||D!==0?U+D:zt(c.top,c.bottom))}await s({...t,availableWidth:C,availableHeight:S});const k=await a.getDimensions(l.floating);return m!==k.width||p!==k.height?{reset:{rects:!0}}:{}}}};function qd(){return typeof window<"u"}function Xa(e){return V4(e)?(e.nodeName||"").toLowerCase():"#document"}function It(e){var t;return(e==null||(t=e.ownerDocument)==null?void 0:t.defaultView)||window}function er(e){var t;return(t=(V4(e)?e.ownerDocument:e.document)||window.document)==null?void 0:t.documentElement}function V4(e){return qd()?e instanceof Node||e instanceof It(e).Node:!1}function Me(e){return qd()?e instanceof Element||e instanceof It(e).Element:!1}function Vt(e){return qd()?e instanceof HTMLElement||e instanceof It(e).HTMLElement:!1}function Wm(e){return!qd()||typeof ShadowRoot>"u"?!1:e instanceof ShadowRoot||e instanceof It(e).ShadowRoot}function Vs(e){const{overflow:t,overflowX:n,overflowY:r,display:i}=fn(e);return/auto|scroll|overlay|hidden|clip/.test(t+r+n)&&!["inline","contents"].includes(i)}function VN(e){return["table","td","th"].includes(Xa(e))}function Yd(e){return[":popover-open",":modal"].some(t=>{try{return e.matches(t)}catch{return!1}})}function by(e){const t=Xd(),n=Me(e)?fn(e):e;return n.transform!=="none"||n.perspective!=="none"||(n.containerType?n.containerType!=="normal":!1)||!t&&(n.backdropFilter?n.backdropFilter!=="none":!1)||!t&&(n.filter?n.filter!=="none":!1)||["transform","perspective","filter"].some(r=>(n.willChange||"").includes(r))||["paint","layout","strict","content"].some(r=>(n.contain||"").includes(r))}function qN(e){let t=Tr(e);for(;Vt(t)&&!wi(t);){if(by(t))return t;if(Yd(t))return null;t=Tr(t)}return null}function Xd(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function wi(e){return["html","body","#document"].includes(Xa(e))}function fn(e){return It(e).getComputedStyle(e)}function Gd(e){return Me(e)?{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}:{scrollLeft:e.scrollX,scrollTop:e.scrollY}}function Tr(e){if(Xa(e)==="html")return e;const t=e.assignedSlot||e.parentNode||Wm(e)&&e.host||er(e);return Wm(t)?t.host:t}function q4(e){const t=Tr(e);return wi(t)?e.ownerDocument?e.ownerDocument.body:e.body:Vt(t)&&Vs(t)?t:q4(t)}function si(e,t,n){var r;t===void 0&&(t=[]),n===void 0&&(n=!0);const i=q4(e),o=i===((r=e.ownerDocument)==null?void 0:r.body),a=It(i);if(o){const l=jm(a);return t.concat(a,a.visualViewport||[],Vs(i)?i:[],l&&n?si(l):[])}return t.concat(i,si(i,[],n))}function jm(e){return e.parent&&Object.getPrototypeOf(e.parent)?e.frameElement:null}function Y4(e){const t=fn(e);let n=parseFloat(t.width)||0,r=parseFloat(t.height)||0;const i=Vt(e),o=i?e.offsetWidth:n,a=i?e.offsetHeight:r,l=df(n)!==o||df(r)!==a;return l&&(n=o,r=a),{width:n,height:r,$:l}}function xy(e){return Me(e)?e:e.contextElement}function la(e){const t=xy(e);if(!Vt(t))return qn(1);const n=t.getBoundingClientRect(),{width:r,height:i,$:o}=Y4(t);let a=(o?df(n.width):n.width)/r,l=(o?df(n.height):n.height)/i;return(!a||!Number.isFinite(a))&&(a=1),(!l||!Number.isFinite(l))&&(l=1),{x:a,y:l}}const YN=qn(0);function X4(e){const t=It(e);return!Xd()||!t.visualViewport?YN:{x:t.visualViewport.offsetLeft,y:t.visualViewport.offsetTop}}function XN(e,t,n){return t===void 0&&(t=!1),!n||t&&n!==It(e)?!1:t}function oo(e,t,n,r){t===void 0&&(t=!1),n===void 0&&(n=!1);const i=e.getBoundingClientRect(),o=xy(e);let a=qn(1);t&&(r?Me(r)&&(a=la(r)):a=la(e));const l=XN(o,n,r)?X4(o):qn(0);let s=(i.left+l.x)/a.x,u=(i.top+l.y)/a.y,c=i.width/a.x,f=i.height/a.y;if(o){const d=It(o),h=r&&Me(r)?It(r):r;let m=d,p=jm(m);for(;p&&r&&h!==m;){const w=la(p),y=p.getBoundingClientRect(),g=fn(p),v=y.left+(p.clientLeft+parseFloat(g.paddingLeft))*w.x,b=y.top+(p.clientTop+parseFloat(g.paddingTop))*w.y;s*=w.x,u*=w.y,c*=w.x,f*=w.y,s+=v,u+=b,m=It(p),p=jm(m)}}return pf({width:c,height:f,x:s,y:u})}function _y(e,t){const n=Gd(e).scrollLeft;return t?t.left+n:oo(er(e)).left+n}function G4(e,t,n){n===void 0&&(n=!1);const r=e.getBoundingClientRect(),i=r.left+t.scrollLeft-(n?0:_y(e,r)),o=r.top+t.scrollTop;return{x:i,y:o}}function GN(e){let{elements:t,rect:n,offsetParent:r,strategy:i}=e;const o=i==="fixed",a=er(r),l=t?Yd(t.floating):!1;if(r===a||l&&o)return n;let s={scrollLeft:0,scrollTop:0},u=qn(1);const c=qn(0),f=Vt(r);if((f||!f&&!o)&&((Xa(r)!=="body"||Vs(a))&&(s=Gd(r)),Vt(r))){const h=oo(r);u=la(r),c.x=h.x+r.clientLeft,c.y=h.y+r.clientTop}const d=a&&!f&&!o?G4(a,s,!0):qn(0);return{width:n.width*u.x,height:n.height*u.y,x:n.x*u.x-s.scrollLeft*u.x+c.x+d.x,y:n.y*u.y-s.scrollTop*u.y+c.y+d.y}}function KN(e){return Array.from(e.getClientRects())}function QN(e){const t=er(e),n=Gd(e),r=e.ownerDocument.body,i=zt(t.scrollWidth,t.clientWidth,r.scrollWidth,r.clientWidth),o=zt(t.scrollHeight,t.clientHeight,r.scrollHeight,r.clientHeight);let a=-n.scrollLeft+_y(e);const l=-n.scrollTop;return fn(r).direction==="rtl"&&(a+=zt(t.clientWidth,r.clientWidth)-i),{width:i,height:o,x:a,y:l}}function ZN(e,t){const n=It(e),r=er(e),i=n.visualViewport;let o=r.clientWidth,a=r.clientHeight,l=0,s=0;if(i){o=i.width,a=i.height;const u=Xd();(!u||u&&t==="fixed")&&(l=i.offsetLeft,s=i.offsetTop)}return{width:o,height:a,x:l,y:s}}function JN(e,t){const n=oo(e,!0,t==="fixed"),r=n.top+e.clientTop,i=n.left+e.clientLeft,o=Vt(e)?la(e):qn(1),a=e.clientWidth*o.x,l=e.clientHeight*o.y,s=i*o.x,u=r*o.y;return{width:a,height:l,x:s,y:u}}function qw(e,t,n){let r;if(t==="viewport")r=ZN(e,n);else if(t==="document")r=QN(er(e));else if(Me(t))r=JN(t,n);else{const i=X4(e);r={x:t.x-i.x,y:t.y-i.y,width:t.width,height:t.height}}return pf(r)}function K4(e,t){const n=Tr(e);return n===t||!Me(n)||wi(n)?!1:fn(n).position==="fixed"||K4(n,t)}function eA(e,t){const n=t.get(e);if(n)return n;let r=si(e,[],!1).filter(l=>Me(l)&&Xa(l)!=="body"),i=null;const o=fn(e).position==="fixed";let a=o?Tr(e):e;for(;Me(a)&&!wi(a);){const l=fn(a),s=by(a);!s&&l.position==="fixed"&&(i=null),(o?!s&&!i:!s&&l.position==="static"&&!!i&&["absolute","fixed"].includes(i.position)||Vs(a)&&!s&&K4(e,a))?r=r.filter(c=>c!==a):i=l,a=Tr(a)}return t.set(e,r),r}function tA(e){let{element:t,boundary:n,rootBoundary:r,strategy:i}=e;const a=[...n==="clippingAncestors"?Yd(t)?[]:eA(t,this._c):[].concat(n),r],l=a[0],s=a.reduce((u,c)=>{const f=qw(t,c,i);return u.top=zt(f.top,u.top),u.right=yi(f.right,u.right),u.bottom=yi(f.bottom,u.bottom),u.left=zt(f.left,u.left),u},qw(t,l,i));return{width:s.right-s.left,height:s.bottom-s.top,x:s.left,y:s.top}}function nA(e){const{width:t,height:n}=Y4(e);return{width:t,height:n}}function rA(e,t,n){const r=Vt(t),i=er(t),o=n==="fixed",a=oo(e,!0,o,t);let l={scrollLeft:0,scrollTop:0};const s=qn(0);if(r||!r&&!o)if((Xa(t)!=="body"||Vs(i))&&(l=Gd(t)),r){const d=oo(t,!0,o,t);s.x=d.x+t.clientLeft,s.y=d.y+t.clientTop}else i&&(s.x=_y(i));const u=i&&!r&&!o?G4(i,l):qn(0),c=a.left+l.scrollLeft-s.x-u.x,f=a.top+l.scrollTop-s.y-u.y;return{x:c,y:f,width:a.width,height:a.height}}function Bh(e){return fn(e).position==="static"}function Yw(e,t){if(!Vt(e)||fn(e).position==="fixed")return null;if(t)return t(e);let n=e.offsetParent;return er(e)===n&&(n=n.ownerDocument.body),n}function Q4(e,t){const n=It(e);if(Yd(e))return n;if(!Vt(e)){let i=Tr(e);for(;i&&!wi(i);){if(Me(i)&&!Bh(i))return i;i=Tr(i)}return n}let r=Yw(e,t);for(;r&&VN(r)&&Bh(r);)r=Yw(r,t);return r&&wi(r)&&Bh(r)&&!by(r)?n:r||qN(e)||n}const iA=async function(e){const t=this.getOffsetParent||Q4,n=this.getDimensions,r=await n(e.floating);return{reference:rA(e.reference,await t(e.floating),e.strategy),floating:{x:0,y:0,width:r.width,height:r.height}}};function oA(e){return fn(e).direction==="rtl"}const aA={convertOffsetParentRelativeRectToViewportRelativeRect:GN,getDocumentElement:er,getClippingRect:tA,getOffsetParent:Q4,getElementRects:iA,getClientRects:KN,getDimensions:nA,getScale:la,isElement:Me,isRTL:oA};function lA(e,t){let n=null,r;const i=er(e);function o(){var l;clearTimeout(r),(l=n)==null||l.disconnect(),n=null}function a(l,s){l===void 0&&(l=!1),s===void 0&&(s=1),o();const{left:u,top:c,width:f,height:d}=e.getBoundingClientRect();if(l||t(),!f||!d)return;const h=zu(c),m=zu(i.clientWidth-(u+f)),p=zu(i.clientHeight-(c+d)),w=zu(u),g={rootMargin:-h+"px "+-m+"px "+-p+"px "+-w+"px",threshold:zt(0,yi(1,s))||1};let v=!0;function b(_){const M=_[0].intersectionRatio;if(M!==s){if(!v)return a();M?a(!1,M):r=setTimeout(()=>{a(!1,1e-7)},1e3)}v=!1}try{n=new IntersectionObserver(b,{...g,root:i.ownerDocument})}catch{n=new IntersectionObserver(b,g)}n.observe(e)}return a(!0),o}function Z4(e,t,n,r){r===void 0&&(r={});const{ancestorScroll:i=!0,ancestorResize:o=!0,elementResize:a=typeof ResizeObserver=="function",layoutShift:l=typeof IntersectionObserver=="function",animationFrame:s=!1}=r,u=xy(e),c=i||o?[...u?si(u):[],...si(t)]:[];c.forEach(y=>{i&&y.addEventListener("scroll",n,{passive:!0}),o&&y.addEventListener("resize",n)});const f=u&&l?lA(u,n):null;let d=-1,h=null;a&&(h=new ResizeObserver(y=>{let[g]=y;g&&g.target===u&&h&&(h.unobserve(t),cancelAnimationFrame(d),d=requestAnimationFrame(()=>{var v;(v=h)==null||v.observe(t)})),n()}),u&&!s&&h.observe(u),h.observe(t));let m,p=s?oo(e):null;s&&w();function w(){const y=oo(e);p&&(y.x!==p.x||y.y!==p.y||y.width!==p.width||y.height!==p.height)&&n(),p=y,m=requestAnimationFrame(w)}return n(),()=>{var y;c.forEach(g=>{i&&g.removeEventListener("scroll",n),o&&g.removeEventListener("resize",n)}),f==null||f(),(y=h)==null||y.disconnect(),h=null,s&&cancelAnimationFrame(m)}}const sA=HN,uA=UN,cA=zN,fA=jN,dA=FN,Xw=DN,hA=WN,pA=(e,t,n)=>{const r=new Map,i={platform:aA,...n},o={...i.platform,_c:r};return ON(e,t,{...i,platform:o})};var Sc=typeof document<"u"?x.useLayoutEffect:x.useEffect;function mf(e,t){if(e===t)return!0;if(typeof e!=typeof t)return!1;if(typeof e=="function"&&e.toString()===t.toString())return!0;let n,r,i;if(e&&t&&typeof e=="object"){if(Array.isArray(e)){if(n=e.length,n!==t.length)return!1;for(r=n;r--!==0;)if(!mf(e[r],t[r]))return!1;return!0}if(i=Object.keys(e),n=i.length,n!==Object.keys(t).length)return!1;for(r=n;r--!==0;)if(!{}.hasOwnProperty.call(t,i[r]))return!1;for(r=n;r--!==0;){const o=i[r];if(!(o==="_owner"&&e.$$typeof)&&!mf(e[o],t[o]))return!1}return!0}return e!==e&&t!==t}function J4(e){return typeof window>"u"?1:(e.ownerDocument.defaultView||window).devicePixelRatio||1}function Gw(e,t){const n=J4(e);return Math.round(t*n)/n}function Hh(e){const t=x.useRef(e);return Sc(()=>{t.current=e}),t}function e8(e){e===void 0&&(e={});const{placement:t="bottom",strategy:n="absolute",middleware:r=[],platform:i,elements:{reference:o,floating:a}={},transform:l=!0,whileElementsMounted:s,open:u}=e,[c,f]=x.useState({x:0,y:0,strategy:n,placement:t,middlewareData:{},isPositioned:!1}),[d,h]=x.useState(r);mf(d,r)||h(r);const[m,p]=x.useState(null),[w,y]=x.useState(null),g=x.useCallback(T=>{T!==M.current&&(M.current=T,p(T))},[]),v=x.useCallback(T=>{T!==S.current&&(S.current=T,y(T))},[]),b=o||m,_=a||w,M=x.useRef(null),S=x.useRef(null),C=x.useRef(c),k=s!=null,$=Hh(s),E=Hh(i),U=Hh(u),D=x.useCallback(()=>{if(!M.current||!S.current)return;const T={placement:t,strategy:n,middleware:d};E.current&&(T.platform=E.current),pA(M.current,S.current,T).then(R=>{const A={...R,isPositioned:U.current!==!1};N.current&&!mf(C.current,A)&&(C.current=A,wo.flushSync(()=>{f(A)}))})},[d,t,n,E,U]);Sc(()=>{u===!1&&C.current.isPositioned&&(C.current.isPositioned=!1,f(T=>({...T,isPositioned:!1})))},[u]);const N=x.useRef(!1);Sc(()=>(N.current=!0,()=>{N.current=!1}),[]),Sc(()=>{if(b&&(M.current=b),_&&(S.current=_),b&&_){if($.current)return $.current(b,_,D);D()}},[b,_,D,$,k]);const P=x.useMemo(()=>({reference:M,floating:S,setReference:g,setFloating:v}),[g,v]),I=x.useMemo(()=>({reference:b,floating:_}),[b,_]),z=x.useMemo(()=>{const T={position:n,left:0,top:0};if(!I.floating)return T;const R=Gw(I.floating,c.x),A=Gw(I.floating,c.y);return l?{...T,transform:"translate("+R+"px, "+A+"px)",...J4(I.floating)>=1.5&&{willChange:"transform"}}:{position:n,left:R,top:A}},[n,l,I.floating,c.x,c.y]);return x.useMemo(()=>({...c,update:D,refs:P,elements:I,floatingStyles:z}),[c,D,P,I,z])}const mA=e=>{function t(n){return{}.hasOwnProperty.call(n,"current")}return{name:"arrow",options:e,fn(n){const{element:r,padding:i}=typeof e=="function"?e(n):e;return r&&t(r)?r.current!=null?Xw({element:r.current,padding:i}).fn(n):{}:r?Xw({element:r,padding:i}).fn(n):{}}}},t8=(e,t)=>({...sA(e),options:[e,t]}),n8=(e,t)=>({...uA(e),options:[e,t]}),gA=(e,t)=>({...hA(e),options:[e,t]}),r8=(e,t)=>({...cA(e),options:[e,t]}),yA=(e,t)=>({...fA(e),options:[e,t]}),vA=(e,t)=>({...dA(e),options:[e,t]}),wA=(e,t)=>({...mA(e),options:[e,t]});var bA="Arrow",i8=x.forwardRef((e,t)=>{const{children:n,width:r=10,height:i=5,...o}=e;return K.jsx(We.svg,{...o,ref:t,width:r,height:i,viewBox:"0 0 30 10",preserveAspectRatio:"none",children:e.asChild?n:K.jsx("polygon",{points:"0,0 30,0 15,10"})})});i8.displayName=bA;var xA=i8;function _A(e,t=[]){let n=[];function r(o,a){const l=x.createContext(a),s=n.length;n=[...n,a];function u(f){const{scope:d,children:h,...m}=f,p=(d==null?void 0:d[e][s])||l,w=x.useMemo(()=>m,Object.values(m));return K.jsx(p.Provider,{value:w,children:h})}function c(f,d){const h=(d==null?void 0:d[e][s])||l,m=x.useContext(h);if(m)return m;if(a!==void 0)return a;throw new Error(`\`${f}\` must be used within \`${o}\``)}return u.displayName=o+"Provider",[u,c]}const i=()=>{const o=n.map(a=>x.createContext(a));return function(l){const s=(l==null?void 0:l[e])||o;return x.useMemo(()=>({[`__scope${e}`]:{...l,[e]:s}}),[l,s])}};return i.scopeName=e,[r,SA(i,...t)]}function SA(...e){const t=e[0];if(e.length===1)return t;const n=()=>{const r=e.map(i=>({useScope:i(),scopeName:i.scopeName}));return function(o){const a=r.reduce((l,{useScope:s,scopeName:u})=>{const f=s(o)[`__scope${u}`];return{...l,...f}},{});return x.useMemo(()=>({[`__scope${t.scopeName}`]:a}),[a])}};return n.scopeName=t.scopeName,n}function MA(e){const[t,n]=x.useState(void 0);return jt(()=>{if(e){n({width:e.offsetWidth,height:e.offsetHeight});const r=new ResizeObserver(i=>{if(!Array.isArray(i)||!i.length)return;const o=i[0];let a,l;if("borderBoxSize"in o){const s=o.borderBoxSize,u=Array.isArray(s)?s[0]:s;a=u.inlineSize,l=u.blockSize}else a=e.offsetWidth,l=e.offsetHeight;n({width:a,height:l})});return r.observe(e,{box:"border-box"}),()=>r.unobserve(e)}else n(void 0)},[e]),t}var Sy="Popper",[o8,a8]=_A(Sy),[CA,l8]=o8(Sy),s8=e=>{const{__scopePopper:t,children:n}=e,[r,i]=x.useState(null);return K.jsx(CA,{scope:t,anchor:r,onAnchorChange:i,children:n})};s8.displayName=Sy;var u8="PopperAnchor",c8=x.forwardRef((e,t)=>{const{__scopePopper:n,virtualRef:r,...i}=e,o=l8(u8,n),a=x.useRef(null),l=ct(t,a);return x.useEffect(()=>{o.onAnchorChange((r==null?void 0:r.current)||a.current)}),r?null:K.jsx(We.div,{...i,ref:l})});c8.displayName=u8;var My="PopperContent",[EA,kA]=o8(My),f8=x.forwardRef((e,t)=>{var B,j,F,V,X,O;const{__scopePopper:n,side:r="bottom",sideOffset:i=0,align:o="center",alignOffset:a=0,arrowPadding:l=0,avoidCollisions:s=!0,collisionBoundary:u=[],collisionPadding:c=0,sticky:f="partial",hideWhenDetached:d=!1,updatePositionStrategy:h="optimized",onPlaced:m,...p}=e,w=l8(My,n),[y,g]=x.useState(null),v=ct(t,le=>g(le)),[b,_]=x.useState(null),M=MA(b),S=(M==null?void 0:M.width)??0,C=(M==null?void 0:M.height)??0,k=r+(o!=="center"?"-"+o:""),$=typeof c=="number"?c:{top:0,right:0,bottom:0,left:0,...c},E=Array.isArray(u)?u:[u],U=E.length>0,D={padding:$,boundary:E.filter($A),altBoundary:U},{refs:N,floatingStyles:P,placement:I,isPositioned:z,middlewareData:T}=e8({strategy:"fixed",placement:k,whileElementsMounted:(...le)=>Z4(...le,{animationFrame:h==="always"}),elements:{reference:w.anchor},middleware:[t8({mainAxis:i+C,alignmentAxis:a}),s&&n8({mainAxis:!0,crossAxis:!1,limiter:f==="partial"?gA():void 0,...D}),s&&r8({...D}),yA({...D,apply:({elements:le,rects:ne,availableWidth:ge,availableHeight:Se})=>{const{width:je,height:Dr}=ne.reference,Pn=le.floating.style;Pn.setProperty("--radix-popper-available-width",`${ge}px`),Pn.setProperty("--radix-popper-available-height",`${Se}px`),Pn.setProperty("--radix-popper-anchor-width",`${je}px`),Pn.setProperty("--radix-popper-anchor-height",`${Dr}px`)}}),b&&wA({element:b,padding:l}),PA({arrowWidth:S,arrowHeight:C}),d&&vA({strategy:"referenceHidden",...D})]}),[R,A]=p8(I),L=Cr(m);jt(()=>{z&&(L==null||L())},[z,L]);const H=(B=T.arrow)==null?void 0:B.x,G=(j=T.arrow)==null?void 0:j.y,J=((F=T.arrow)==null?void 0:F.centerOffset)!==0,[te,Z]=x.useState();return jt(()=>{y&&Z(window.getComputedStyle(y).zIndex)},[y]),K.jsx("div",{ref:N.setFloating,"data-radix-popper-content-wrapper":"",style:{...P,transform:z?P.transform:"translate(0, -200%)",minWidth:"max-content",zIndex:te,"--radix-popper-transform-origin":[(V=T.transformOrigin)==null?void 0:V.x,(X=T.transformOrigin)==null?void 0:X.y].join(" "),...((O=T.hide)==null?void 0:O.referenceHidden)&&{visibility:"hidden",pointerEvents:"none"}},dir:e.dir,children:K.jsx(EA,{scope:n,placedSide:R,onArrowChange:_,arrowX:H,arrowY:G,shouldHideArrow:J,children:K.jsx(We.div,{"data-side":R,"data-align":A,...p,ref:v,style:{...p.style,animation:z?void 0:"none"}})})})});f8.displayName=My;var d8="PopperArrow",TA={top:"bottom",right:"left",bottom:"top",left:"right"},h8=x.forwardRef(function(t,n){const{__scopePopper:r,...i}=t,o=kA(d8,r),a=TA[o.placedSide];return K.jsx("span",{ref:o.onArrowChange,style:{position:"absolute",left:o.arrowX,top:o.arrowY,[a]:0,transformOrigin:{top:"",right:"0 0",bottom:"center 0",left:"100% 0"}[o.placedSide],transform:{top:"translateY(100%)",right:"translateY(50%) rotate(90deg) translateX(-50%)",bottom:"rotate(180deg)",left:"translateY(50%) rotate(-90deg) translateX(50%)"}[o.placedSide],visibility:o.shouldHideArrow?"hidden":void 0},children:K.jsx(xA,{...i,ref:n,style:{...i.style,display:"block"}})})});h8.displayName=d8;function $A(e){return e!==null}var PA=e=>({name:"transformOrigin",options:e,fn(t){var w,y,g;const{placement:n,rects:r,middlewareData:i}=t,a=((w=i.arrow)==null?void 0:w.centerOffset)!==0,l=a?0:e.arrowWidth,s=a?0:e.arrowHeight,[u,c]=p8(n),f={start:"0%",center:"50%",end:"100%"}[c],d=(((y=i.arrow)==null?void 0:y.x)??0)+l/2,h=(((g=i.arrow)==null?void 0:g.y)??0)+s/2;let m="",p="";return u==="bottom"?(m=a?f:`${d}px`,p=`${-s}px`):u==="top"?(m=a?f:`${d}px`,p=`${r.floating.height+s}px`):u==="right"?(m=`${-s}px`,p=a?f:`${h}px`):u==="left"&&(m=`${r.floating.width+s}px`,p=a?f:`${h}px`),{data:{x:m,y:p}}}});function p8(e){const[t,n="center"]=e.split("-");return[t,n]}var RA=s8,NA=c8,AA=f8,IA=h8,LA="Portal",m8=x.forwardRef((e,t)=>{var l;const{container:n,...r}=e,[i,o]=x.useState(!1);jt(()=>o(!0),[]);const a=n||i&&((l=globalThis==null?void 0:globalThis.document)==null?void 0:l.body);return a?b$.createPortal(K.jsx(We.div,{...r,ref:t}),a):null});m8.displayName=LA;function Kw({prop:e,defaultProp:t,onChange:n=()=>{}}){const[r,i]=OA({defaultProp:t,onChange:n}),o=e!==void 0,a=o?e:r,l=Cr(n),s=x.useCallback(u=>{if(o){const f=typeof u=="function"?u(e):u;f!==e&&l(f)}else i(u)},[o,e,i,l]);return[a,s]}function OA({defaultProp:e,onChange:t}){const n=x.useState(e),[r]=n,i=x.useRef(r),o=Cr(t);return x.useEffect(()=>{i.current!==r&&(o(r),i.current=r)},[r,i,o]),n}function DA(e){const t=x.useRef({value:e,previous:e});return x.useMemo(()=>(t.current.value!==e&&(t.current.previous=t.current.value,t.current.value=e),t.current.previous),[e])}var zA="VisuallyHidden",g8=x.forwardRef((e,t)=>K.jsx(We.span,{...e,ref:t,style:{position:"absolute",border:0,width:1,height:1,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",wordWrap:"normal",...e.style}}));g8.displayName=zA;var FA=function(e){if(typeof document>"u")return null;var t=Array.isArray(e)?e[0]:e;return t.ownerDocument.body},$o=new WeakMap,Fu=new WeakMap,Bu={},Uh=0,y8=function(e){return e&&(e.host||y8(e.parentNode))},BA=function(e,t){return t.map(function(n){if(e.contains(n))return n;var r=y8(n);return r&&e.contains(r)?r:(console.error("aria-hidden",n,"in not contained inside",e,". Doing nothing"),null)}).filter(function(n){return!!n})},HA=function(e,t,n,r){var i=BA(t,Array.isArray(e)?e:[e]);Bu[n]||(Bu[n]=new WeakMap);var o=Bu[n],a=[],l=new Set,s=new Set(i),u=function(f){!f||l.has(f)||(l.add(f),u(f.parentNode))};i.forEach(u);var c=function(f){!f||s.has(f)||Array.prototype.forEach.call(f.children,function(d){if(l.has(d))c(d);else try{var h=d.getAttribute(r),m=h!==null&&h!=="false",p=($o.get(d)||0)+1,w=(o.get(d)||0)+1;$o.set(d,p),o.set(d,w),a.push(d),p===1&&m&&Fu.set(d,!0),w===1&&d.setAttribute(n,"true"),m||d.setAttribute(r,"true")}catch(y){console.error("aria-hidden: cannot operate on ",d,y)}})};return c(t),l.clear(),Uh++,function(){a.forEach(function(f){var d=$o.get(f)-1,h=o.get(f)-1;$o.set(f,d),o.set(f,h),d||(Fu.has(f)||f.removeAttribute(r),Fu.delete(f)),h||f.removeAttribute(n)}),Uh--,Uh||($o=new WeakMap,$o=new WeakMap,Fu=new WeakMap,Bu={})}},UA=function(e,t,n){n===void 0&&(n="data-aria-hidden");var r=Array.from(Array.isArray(e)?e:[e]),i=FA(e);return i?(r.push.apply(r,Array.from(i.querySelectorAll("[aria-live]"))),HA(r,i,n,"aria-hidden")):function(){return null}},zn=function(){return zn=Object.assign||function(t){for(var n,r=1,i=arguments.length;r<i;r++){n=arguments[r];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},zn.apply(this,arguments)};function v8(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]]);return n}function WA(e,t,n){if(n||arguments.length===2)for(var r=0,i=t.length,o;r<i;r++)(o||!(r in t))&&(o||(o=Array.prototype.slice.call(t,0,r)),o[r]=t[r]);return e.concat(o||Array.prototype.slice.call(t))}var Mc="right-scroll-bar-position",Cc="width-before-scroll-bar",jA="with-scroll-bars-hidden",VA="--removed-body-scroll-bar-size";function Wh(e,t){return typeof e=="function"?e(t):e&&(e.current=t),e}function qA(e,t){var n=x.useState(function(){return{value:e,callback:t,facade:{get current(){return n.value},set current(r){var i=n.value;i!==r&&(n.value=r,n.callback(r,i))}}}})[0];return n.callback=t,n.facade}var YA=typeof window<"u"?x.useLayoutEffect:x.useEffect,Qw=new WeakMap;function XA(e,t){var n=qA(null,function(r){return e.forEach(function(i){return Wh(i,r)})});return YA(function(){var r=Qw.get(n);if(r){var i=new Set(r),o=new Set(e),a=n.current;i.forEach(function(l){o.has(l)||Wh(l,null)}),o.forEach(function(l){i.has(l)||Wh(l,a)})}Qw.set(n,e)},[e]),n}function GA(e){return e}function KA(e,t){t===void 0&&(t=GA);var n=[],r=!1,i={read:function(){if(r)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return n.length?n[n.length-1]:e},useMedium:function(o){var a=t(o,r);return n.push(a),function(){n=n.filter(function(l){return l!==a})}},assignSyncMedium:function(o){for(r=!0;n.length;){var a=n;n=[],a.forEach(o)}n={push:function(l){return o(l)},filter:function(){return n}}},assignMedium:function(o){r=!0;var a=[];if(n.length){var l=n;n=[],l.forEach(o),a=n}var s=function(){var c=a;a=[],c.forEach(o)},u=function(){return Promise.resolve().then(s)};u(),n={push:function(c){a.push(c),u()},filter:function(c){return a=a.filter(c),n}}}};return i}function QA(e){e===void 0&&(e={});var t=KA(null);return t.options=zn({async:!0,ssr:!1},e),t}var w8=function(e){var t=e.sideCar,n=v8(e,["sideCar"]);if(!t)throw new Error("Sidecar: please provide `sideCar` property to import the right car");var r=t.read();if(!r)throw new Error("Sidecar medium not found");return x.createElement(r,zn({},n))};w8.isSideCarExport=!0;function ZA(e,t){return e.useMedium(t),w8}var b8=QA(),jh=function(){},Kd=x.forwardRef(function(e,t){var n=x.useRef(null),r=x.useState({onScrollCapture:jh,onWheelCapture:jh,onTouchMoveCapture:jh}),i=r[0],o=r[1],a=e.forwardProps,l=e.children,s=e.className,u=e.removeScrollBar,c=e.enabled,f=e.shards,d=e.sideCar,h=e.noIsolation,m=e.inert,p=e.allowPinchZoom,w=e.as,y=w===void 0?"div":w,g=e.gapMode,v=v8(e,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noIsolation","inert","allowPinchZoom","as","gapMode"]),b=d,_=XA([n,t]),M=zn(zn({},v),i);return x.createElement(x.Fragment,null,c&&x.createElement(b,{sideCar:b8,removeScrollBar:u,shards:f,noIsolation:h,inert:m,setCallbacks:o,allowPinchZoom:!!p,lockRef:n,gapMode:g}),a?x.cloneElement(x.Children.only(l),zn(zn({},M),{ref:_})):x.createElement(y,zn({},M,{className:s,ref:_}),l))});Kd.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1};Kd.classNames={fullWidth:Cc,zeroRight:Mc};var JA=function(){if(typeof __webpack_nonce__<"u")return __webpack_nonce__};function eI(){if(!document)return null;var e=document.createElement("style");e.type="text/css";var t=JA();return t&&e.setAttribute("nonce",t),e}function tI(e,t){e.styleSheet?e.styleSheet.cssText=t:e.appendChild(document.createTextNode(t))}function nI(e){var t=document.head||document.getElementsByTagName("head")[0];t.appendChild(e)}var rI=function(){var e=0,t=null;return{add:function(n){e==0&&(t=eI())&&(tI(t,n),nI(t)),e++},remove:function(){e--,!e&&t&&(t.parentNode&&t.parentNode.removeChild(t),t=null)}}},iI=function(){var e=rI();return function(t,n){x.useEffect(function(){return e.add(t),function(){e.remove()}},[t&&n])}},x8=function(){var e=iI(),t=function(n){var r=n.styles,i=n.dynamic;return e(r,i),null};return t},oI={left:0,top:0,right:0,gap:0},Vh=function(e){return parseInt(e||"",10)||0},aI=function(e){var t=window.getComputedStyle(document.body),n=t[e==="padding"?"paddingLeft":"marginLeft"],r=t[e==="padding"?"paddingTop":"marginTop"],i=t[e==="padding"?"paddingRight":"marginRight"];return[Vh(n),Vh(r),Vh(i)]},lI=function(e){if(e===void 0&&(e="margin"),typeof window>"u")return oI;var t=aI(e),n=document.documentElement.clientWidth,r=window.innerWidth;return{left:t[0],top:t[1],right:t[2],gap:Math.max(0,r-n+t[2]-t[0])}},sI=x8(),sa="data-scroll-locked",uI=function(e,t,n,r){var i=e.left,o=e.top,a=e.right,l=e.gap;return n===void 0&&(n="margin"),`
  .`.concat(jA,` {
   overflow: hidden `).concat(r,`;
   padding-right: `).concat(l,"px ").concat(r,`;
  }
  body[`).concat(sa,`] {
    overflow: hidden `).concat(r,`;
    overscroll-behavior: contain;
    `).concat([t&&"position: relative ".concat(r,";"),n==="margin"&&`
    padding-left: `.concat(i,`px;
    padding-top: `).concat(o,`px;
    padding-right: `).concat(a,`px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(l,"px ").concat(r,`;
    `),n==="padding"&&"padding-right: ".concat(l,"px ").concat(r,";")].filter(Boolean).join(""),`
  }
  
  .`).concat(Mc,` {
    right: `).concat(l,"px ").concat(r,`;
  }
  
  .`).concat(Cc,` {
    margin-right: `).concat(l,"px ").concat(r,`;
  }
  
  .`).concat(Mc," .").concat(Mc,` {
    right: 0 `).concat(r,`;
  }
  
  .`).concat(Cc," .").concat(Cc,` {
    margin-right: 0 `).concat(r,`;
  }
  
  body[`).concat(sa,`] {
    `).concat(VA,": ").concat(l,`px;
  }
`)},Zw=function(){var e=parseInt(document.body.getAttribute(sa)||"0",10);return isFinite(e)?e:0},cI=function(){x.useEffect(function(){return document.body.setAttribute(sa,(Zw()+1).toString()),function(){var e=Zw()-1;e<=0?document.body.removeAttribute(sa):document.body.setAttribute(sa,e.toString())}},[])},fI=function(e){var t=e.noRelative,n=e.noImportant,r=e.gapMode,i=r===void 0?"margin":r;cI();var o=x.useMemo(function(){return lI(i)},[i]);return x.createElement(sI,{styles:uI(o,!t,i,n?"":"!important")})},Vm=!1;if(typeof window<"u")try{var Hu=Object.defineProperty({},"passive",{get:function(){return Vm=!0,!0}});window.addEventListener("test",Hu,Hu),window.removeEventListener("test",Hu,Hu)}catch{Vm=!1}var Po=Vm?{passive:!1}:!1,dI=function(e){return e.tagName==="TEXTAREA"},_8=function(e,t){if(!(e instanceof Element))return!1;var n=window.getComputedStyle(e);return n[t]!=="hidden"&&!(n.overflowY===n.overflowX&&!dI(e)&&n[t]==="visible")},hI=function(e){return _8(e,"overflowY")},pI=function(e){return _8(e,"overflowX")},Jw=function(e,t){var n=t.ownerDocument,r=t;do{typeof ShadowRoot<"u"&&r instanceof ShadowRoot&&(r=r.host);var i=S8(e,r);if(i){var o=M8(e,r),a=o[1],l=o[2];if(a>l)return!0}r=r.parentNode}while(r&&r!==n.body);return!1},mI=function(e){var t=e.scrollTop,n=e.scrollHeight,r=e.clientHeight;return[t,n,r]},gI=function(e){var t=e.scrollLeft,n=e.scrollWidth,r=e.clientWidth;return[t,n,r]},S8=function(e,t){return e==="v"?hI(t):pI(t)},M8=function(e,t){return e==="v"?mI(t):gI(t)},yI=function(e,t){return e==="h"&&t==="rtl"?-1:1},vI=function(e,t,n,r,i){var o=yI(e,window.getComputedStyle(t).direction),a=o*r,l=n.target,s=t.contains(l),u=!1,c=a>0,f=0,d=0;do{var h=M8(e,l),m=h[0],p=h[1],w=h[2],y=p-w-o*m;(m||y)&&S8(e,l)&&(f+=y,d+=m),l instanceof ShadowRoot?l=l.host:l=l.parentNode}while(!s&&l!==document.body||s&&(t.contains(l)||t===l));return(c&&(Math.abs(f)<1||!i)||!c&&(Math.abs(d)<1||!i))&&(u=!0),u},Uu=function(e){return"changedTouches"in e?[e.changedTouches[0].clientX,e.changedTouches[0].clientY]:[0,0]},eb=function(e){return[e.deltaX,e.deltaY]},tb=function(e){return e&&"current"in e?e.current:e},wI=function(e,t){return e[0]===t[0]&&e[1]===t[1]},bI=function(e){return`
  .block-interactivity-`.concat(e,` {pointer-events: none;}
  .allow-interactivity-`).concat(e,` {pointer-events: all;}
`)},xI=0,Ro=[];function _I(e){var t=x.useRef([]),n=x.useRef([0,0]),r=x.useRef(),i=x.useState(xI++)[0],o=x.useState(x8)[0],a=x.useRef(e);x.useEffect(function(){a.current=e},[e]),x.useEffect(function(){if(e.inert){document.body.classList.add("block-interactivity-".concat(i));var p=WA([e.lockRef.current],(e.shards||[]).map(tb),!0).filter(Boolean);return p.forEach(function(w){return w.classList.add("allow-interactivity-".concat(i))}),function(){document.body.classList.remove("block-interactivity-".concat(i)),p.forEach(function(w){return w.classList.remove("allow-interactivity-".concat(i))})}}},[e.inert,e.lockRef.current,e.shards]);var l=x.useCallback(function(p,w){if("touches"in p&&p.touches.length===2||p.type==="wheel"&&p.ctrlKey)return!a.current.allowPinchZoom;var y=Uu(p),g=n.current,v="deltaX"in p?p.deltaX:g[0]-y[0],b="deltaY"in p?p.deltaY:g[1]-y[1],_,M=p.target,S=Math.abs(v)>Math.abs(b)?"h":"v";if("touches"in p&&S==="h"&&M.type==="range")return!1;var C=Jw(S,M);if(!C)return!0;if(C?_=S:(_=S==="v"?"h":"v",C=Jw(S,M)),!C)return!1;if(!r.current&&"changedTouches"in p&&(v||b)&&(r.current=_),!_)return!0;var k=r.current||_;return vI(k,w,p,k==="h"?v:b,!0)},[]),s=x.useCallback(function(p){var w=p;if(!(!Ro.length||Ro[Ro.length-1]!==o)){var y="deltaY"in w?eb(w):Uu(w),g=t.current.filter(function(_){return _.name===w.type&&(_.target===w.target||w.target===_.shadowParent)&&wI(_.delta,y)})[0];if(g&&g.should){w.cancelable&&w.preventDefault();return}if(!g){var v=(a.current.shards||[]).map(tb).filter(Boolean).filter(function(_){return _.contains(w.target)}),b=v.length>0?l(w,v[0]):!a.current.noIsolation;b&&w.cancelable&&w.preventDefault()}}},[]),u=x.useCallback(function(p,w,y,g){var v={name:p,delta:w,target:y,should:g,shadowParent:SI(y)};t.current.push(v),setTimeout(function(){t.current=t.current.filter(function(b){return b!==v})},1)},[]),c=x.useCallback(function(p){n.current=Uu(p),r.current=void 0},[]),f=x.useCallback(function(p){u(p.type,eb(p),p.target,l(p,e.lockRef.current))},[]),d=x.useCallback(function(p){u(p.type,Uu(p),p.target,l(p,e.lockRef.current))},[]);x.useEffect(function(){return Ro.push(o),e.setCallbacks({onScrollCapture:f,onWheelCapture:f,onTouchMoveCapture:d}),document.addEventListener("wheel",s,Po),document.addEventListener("touchmove",s,Po),document.addEventListener("touchstart",c,Po),function(){Ro=Ro.filter(function(p){return p!==o}),document.removeEventListener("wheel",s,Po),document.removeEventListener("touchmove",s,Po),document.removeEventListener("touchstart",c,Po)}},[]);var h=e.removeScrollBar,m=e.inert;return x.createElement(x.Fragment,null,m?x.createElement(o,{styles:bI(i)}):null,h?x.createElement(fI,{gapMode:e.gapMode}):null)}function SI(e){for(var t=null;e!==null;)e instanceof ShadowRoot&&(t=e.host,e=e.host),e=e.parentNode;return t}const MI=ZA(b8,_I);var C8=x.forwardRef(function(e,t){return x.createElement(Kd,zn({},e,{ref:t,sideCar:MI}))});C8.classNames=Kd.classNames;var CI=[" ","Enter","ArrowUp","ArrowDown"],EI=[" ","Enter"],qs="Select",[Qd,Zd,kI]=rN(qs),[Ga,pG]=iN(qs,[kI,a8]),Jd=a8(),[TI,Ti]=Ga(qs),[$I,PI]=Ga(qs),E8=e=>{const{__scopeSelect:t,children:n,open:r,defaultOpen:i,onOpenChange:o,value:a,defaultValue:l,onValueChange:s,dir:u,name:c,autoComplete:f,disabled:d,required:h,form:m}=e,p=Jd(t),[w,y]=x.useState(null),[g,v]=x.useState(null),[b,_]=x.useState(!1),M=lN(u),[S=!1,C]=Kw({prop:r,defaultProp:i,onChange:o}),[k,$]=Kw({prop:a,defaultProp:l,onChange:s}),E=x.useRef(null),U=w?m||!!w.closest("form"):!0,[D,N]=x.useState(new Set),P=Array.from(D).map(I=>I.props.value).join(";");return K.jsx(RA,{...p,children:K.jsxs(TI,{required:h,scope:t,trigger:w,onTriggerChange:y,valueNode:g,onValueNodeChange:v,valueNodeHasChildren:b,onValueNodeHasChildrenChange:_,contentId:gy(),value:k,onValueChange:$,open:S,onOpenChange:C,dir:M,triggerPointerDownPosRef:E,disabled:d,children:[K.jsx(Qd.Provider,{scope:t,children:K.jsx($I,{scope:e.__scopeSelect,onNativeOptionAdd:x.useCallback(I=>{N(z=>new Set(z).add(I))},[]),onNativeOptionRemove:x.useCallback(I=>{N(z=>{const T=new Set(z);return T.delete(I),T})},[]),children:n})}),U?K.jsxs(Q8,{"aria-hidden":!0,required:h,tabIndex:-1,name:c,autoComplete:f,value:k,onChange:I=>$(I.target.value),disabled:d,form:m,children:[k===void 0?K.jsx("option",{value:""}):null,Array.from(D)]},P):null]})})};E8.displayName=qs;var k8="SelectTrigger",T8=x.forwardRef((e,t)=>{const{__scopeSelect:n,disabled:r=!1,...i}=e,o=Jd(n),a=Ti(k8,n),l=a.disabled||r,s=ct(t,a.onTriggerChange),u=Zd(n),c=x.useRef("touch"),[f,d,h]=Z8(p=>{const w=u().filter(v=>!v.disabled),y=w.find(v=>v.value===a.value),g=J8(w,p,y);g!==void 0&&a.onValueChange(g.value)}),m=p=>{l||(a.onOpenChange(!0),h()),p&&(a.triggerPointerDownPosRef.current={x:Math.round(p.pageX),y:Math.round(p.pageY)})};return K.jsx(NA,{asChild:!0,...o,children:K.jsx(We.button,{type:"button",role:"combobox","aria-controls":a.contentId,"aria-expanded":a.open,"aria-required":a.required,"aria-autocomplete":"none",dir:a.dir,"data-state":a.open?"open":"closed",disabled:l,"data-disabled":l?"":void 0,"data-placeholder":K8(a.value)?"":void 0,...i,ref:s,onClick:Fe(i.onClick,p=>{p.currentTarget.focus(),c.current!=="mouse"&&m(p)}),onPointerDown:Fe(i.onPointerDown,p=>{c.current=p.pointerType;const w=p.target;w.hasPointerCapture(p.pointerId)&&w.releasePointerCapture(p.pointerId),p.button===0&&p.ctrlKey===!1&&p.pointerType==="mouse"&&(m(p),p.preventDefault())}),onKeyDown:Fe(i.onKeyDown,p=>{const w=f.current!=="";!(p.ctrlKey||p.altKey||p.metaKey)&&p.key.length===1&&d(p.key),!(w&&p.key===" ")&&CI.includes(p.key)&&(m(),p.preventDefault())})})})});T8.displayName=k8;var $8="SelectValue",P8=x.forwardRef((e,t)=>{const{__scopeSelect:n,className:r,style:i,children:o,placeholder:a="",...l}=e,s=Ti($8,n),{onValueNodeHasChildrenChange:u}=s,c=o!==void 0,f=ct(t,s.onValueNodeChange);return jt(()=>{u(c)},[u,c]),K.jsx(We.span,{...l,ref:f,style:{pointerEvents:"none"},children:K8(s.value)?K.jsx(K.Fragment,{children:a}):o})});P8.displayName=$8;var RI="SelectIcon",R8=x.forwardRef((e,t)=>{const{__scopeSelect:n,children:r,...i}=e;return K.jsx(We.span,{"aria-hidden":!0,...i,ref:t,children:r||"▼"})});R8.displayName=RI;var NI="SelectPortal",N8=e=>K.jsx(m8,{asChild:!0,...e});N8.displayName=NI;var ao="SelectContent",A8=x.forwardRef((e,t)=>{const n=Ti(ao,e.__scopeSelect),[r,i]=x.useState();if(jt(()=>{i(new DocumentFragment)},[]),!n.open){const o=r;return o?wo.createPortal(K.jsx(I8,{scope:e.__scopeSelect,children:K.jsx(Qd.Slot,{scope:e.__scopeSelect,children:K.jsx("div",{children:e.children})})}),o):null}return K.jsx(L8,{...e,ref:t})});A8.displayName=ao;var mn=10,[I8,$i]=Ga(ao),AI="SelectContentImpl",L8=x.forwardRef((e,t)=>{const{__scopeSelect:n,position:r="item-aligned",onCloseAutoFocus:i,onEscapeKeyDown:o,onPointerDownOutside:a,side:l,sideOffset:s,align:u,alignOffset:c,arrowPadding:f,collisionBoundary:d,collisionPadding:h,sticky:m,hideWhenDetached:p,avoidCollisions:w,...y}=e,g=Ti(ao,n),[v,b]=x.useState(null),[_,M]=x.useState(null),S=ct(t,B=>b(B)),[C,k]=x.useState(null),[$,E]=x.useState(null),U=Zd(n),[D,N]=x.useState(!1),P=x.useRef(!1);x.useEffect(()=>{if(v)return UA(v)},[v]),vN();const I=x.useCallback(B=>{const[j,...F]=U().map(O=>O.ref.current),[V]=F.slice(-1),X=document.activeElement;for(const O of B)if(O===X||(O==null||O.scrollIntoView({block:"nearest"}),O===j&&_&&(_.scrollTop=0),O===V&&_&&(_.scrollTop=_.scrollHeight),O==null||O.focus(),document.activeElement!==X))return},[U,_]),z=x.useCallback(()=>I([C,v]),[I,C,v]);x.useEffect(()=>{D&&z()},[D,z]);const{onOpenChange:T,triggerPointerDownPosRef:R}=g;x.useEffect(()=>{if(v){let B={x:0,y:0};const j=V=>{var X,O;B={x:Math.abs(Math.round(V.pageX)-(((X=R.current)==null?void 0:X.x)??0)),y:Math.abs(Math.round(V.pageY)-(((O=R.current)==null?void 0:O.y)??0))}},F=V=>{B.x<=10&&B.y<=10?V.preventDefault():v.contains(V.target)||T(!1),document.removeEventListener("pointermove",j),R.current=null};return R.current!==null&&(document.addEventListener("pointermove",j),document.addEventListener("pointerup",F,{capture:!0,once:!0})),()=>{document.removeEventListener("pointermove",j),document.removeEventListener("pointerup",F,{capture:!0})}}},[v,T,R]),x.useEffect(()=>{const B=()=>T(!1);return window.addEventListener("blur",B),window.addEventListener("resize",B),()=>{window.removeEventListener("blur",B),window.removeEventListener("resize",B)}},[T]);const[A,L]=Z8(B=>{const j=U().filter(X=>!X.disabled),F=j.find(X=>X.ref.current===document.activeElement),V=J8(j,B,F);V&&setTimeout(()=>V.ref.current.focus())}),H=x.useCallback((B,j,F)=>{const V=!P.current&&!F;(g.value!==void 0&&g.value===j||V)&&(k(B),V&&(P.current=!0))},[g.value]),G=x.useCallback(()=>v==null?void 0:v.focus(),[v]),J=x.useCallback((B,j,F)=>{const V=!P.current&&!F;(g.value!==void 0&&g.value===j||V)&&E(B)},[g.value]),te=r==="popper"?qm:O8,Z=te===qm?{side:l,sideOffset:s,align:u,alignOffset:c,arrowPadding:f,collisionBoundary:d,collisionPadding:h,sticky:m,hideWhenDetached:p,avoidCollisions:w}:{};return K.jsx(I8,{scope:n,content:v,viewport:_,onViewportChange:M,itemRefCallback:H,selectedItem:C,onItemLeave:G,itemTextRefCallback:J,focusSelectedItem:z,selectedItemText:$,position:r,isPositioned:D,searchRef:A,children:K.jsx(C8,{as:ys,allowPinchZoom:!0,children:K.jsx(U4,{asChild:!0,trapped:g.open,onMountAutoFocus:B=>{B.preventDefault()},onUnmountAutoFocus:Fe(i,B=>{var j;(j=g.trigger)==null||j.focus({preventScroll:!0}),B.preventDefault()}),children:K.jsx(B4,{asChild:!0,disableOutsidePointerEvents:!0,onEscapeKeyDown:o,onPointerDownOutside:a,onFocusOutside:B=>B.preventDefault(),onDismiss:()=>g.onOpenChange(!1),children:K.jsx(te,{role:"listbox",id:g.contentId,"data-state":g.open?"open":"closed",dir:g.dir,onContextMenu:B=>B.preventDefault(),...y,...Z,onPlaced:()=>N(!0),ref:S,style:{display:"flex",flexDirection:"column",outline:"none",...y.style},onKeyDown:Fe(y.onKeyDown,B=>{const j=B.ctrlKey||B.altKey||B.metaKey;if(B.key==="Tab"&&B.preventDefault(),!j&&B.key.length===1&&L(B.key),["ArrowUp","ArrowDown","Home","End"].includes(B.key)){let V=U().filter(X=>!X.disabled).map(X=>X.ref.current);if(["ArrowUp","End"].includes(B.key)&&(V=V.slice().reverse()),["ArrowUp","ArrowDown"].includes(B.key)){const X=B.target,O=V.indexOf(X);V=V.slice(O+1)}setTimeout(()=>I(V)),B.preventDefault()}})})})})})})});L8.displayName=AI;var II="SelectItemAlignedPosition",O8=x.forwardRef((e,t)=>{const{__scopeSelect:n,onPlaced:r,...i}=e,o=Ti(ao,n),a=$i(ao,n),[l,s]=x.useState(null),[u,c]=x.useState(null),f=ct(t,S=>c(S)),d=Zd(n),h=x.useRef(!1),m=x.useRef(!0),{viewport:p,selectedItem:w,selectedItemText:y,focusSelectedItem:g}=a,v=x.useCallback(()=>{if(o.trigger&&o.valueNode&&l&&u&&p&&w&&y){const S=o.trigger.getBoundingClientRect(),C=u.getBoundingClientRect(),k=o.valueNode.getBoundingClientRect(),$=y.getBoundingClientRect();if(o.dir!=="rtl"){const X=$.left-C.left,O=k.left-X,le=S.left-O,ne=S.width+le,ge=Math.max(ne,C.width),Se=window.innerWidth-mn,je=Lw(O,[mn,Math.max(mn,Se-ge)]);l.style.minWidth=ne+"px",l.style.left=je+"px"}else{const X=C.right-$.right,O=window.innerWidth-k.right-X,le=window.innerWidth-S.right-O,ne=S.width+le,ge=Math.max(ne,C.width),Se=window.innerWidth-mn,je=Lw(O,[mn,Math.max(mn,Se-ge)]);l.style.minWidth=ne+"px",l.style.right=je+"px"}const E=d(),U=window.innerHeight-mn*2,D=p.scrollHeight,N=window.getComputedStyle(u),P=parseInt(N.borderTopWidth,10),I=parseInt(N.paddingTop,10),z=parseInt(N.borderBottomWidth,10),T=parseInt(N.paddingBottom,10),R=P+I+D+T+z,A=Math.min(w.offsetHeight*5,R),L=window.getComputedStyle(p),H=parseInt(L.paddingTop,10),G=parseInt(L.paddingBottom,10),J=S.top+S.height/2-mn,te=U-J,Z=w.offsetHeight/2,B=w.offsetTop+Z,j=P+I+B,F=R-j;if(j<=J){const X=E.length>0&&w===E[E.length-1].ref.current;l.style.bottom="0px";const O=u.clientHeight-p.offsetTop-p.offsetHeight,le=Math.max(te,Z+(X?G:0)+O+z),ne=j+le;l.style.height=ne+"px"}else{const X=E.length>0&&w===E[0].ref.current;l.style.top="0px";const le=Math.max(J,P+p.offsetTop+(X?H:0)+Z)+F;l.style.height=le+"px",p.scrollTop=j-J+p.offsetTop}l.style.margin=`${mn}px 0`,l.style.minHeight=A+"px",l.style.maxHeight=U+"px",r==null||r(),requestAnimationFrame(()=>h.current=!0)}},[d,o.trigger,o.valueNode,l,u,p,w,y,o.dir,r]);jt(()=>v(),[v]);const[b,_]=x.useState();jt(()=>{u&&_(window.getComputedStyle(u).zIndex)},[u]);const M=x.useCallback(S=>{S&&m.current===!0&&(v(),g==null||g(),m.current=!1)},[v,g]);return K.jsx(OI,{scope:n,contentWrapper:l,shouldExpandOnScrollRef:h,onScrollButtonChange:M,children:K.jsx("div",{ref:s,style:{display:"flex",flexDirection:"column",position:"fixed",zIndex:b},children:K.jsx(We.div,{...i,ref:f,style:{boxSizing:"border-box",maxHeight:"100%",...i.style}})})})});O8.displayName=II;var LI="SelectPopperPosition",qm=x.forwardRef((e,t)=>{const{__scopeSelect:n,align:r="start",collisionPadding:i=mn,...o}=e,a=Jd(n);return K.jsx(AA,{...a,...o,ref:t,align:r,collisionPadding:i,style:{boxSizing:"border-box",...o.style,"--radix-select-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-select-content-available-width":"var(--radix-popper-available-width)","--radix-select-content-available-height":"var(--radix-popper-available-height)","--radix-select-trigger-width":"var(--radix-popper-anchor-width)","--radix-select-trigger-height":"var(--radix-popper-anchor-height)"}})});qm.displayName=LI;var[OI,Cy]=Ga(ao,{}),Ym="SelectViewport",D8=x.forwardRef((e,t)=>{const{__scopeSelect:n,nonce:r,...i}=e,o=$i(Ym,n),a=Cy(Ym,n),l=ct(t,o.onViewportChange),s=x.useRef(0);return K.jsxs(K.Fragment,{children:[K.jsx("style",{dangerouslySetInnerHTML:{__html:"[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}"},nonce:r}),K.jsx(Qd.Slot,{scope:n,children:K.jsx(We.div,{"data-radix-select-viewport":"",role:"presentation",...i,ref:l,style:{position:"relative",flex:1,overflow:"hidden auto",...i.style},onScroll:Fe(i.onScroll,u=>{const c=u.currentTarget,{contentWrapper:f,shouldExpandOnScrollRef:d}=a;if(d!=null&&d.current&&f){const h=Math.abs(s.current-c.scrollTop);if(h>0){const m=window.innerHeight-mn*2,p=parseFloat(f.style.minHeight),w=parseFloat(f.style.height),y=Math.max(p,w);if(y<m){const g=y+h,v=Math.min(m,g),b=g-v;f.style.height=v+"px",f.style.bottom==="0px"&&(c.scrollTop=b>0?b:0,f.style.justifyContent="flex-end")}}}s.current=c.scrollTop})})})]})});D8.displayName=Ym;var z8="SelectGroup",[DI,zI]=Ga(z8),FI=x.forwardRef((e,t)=>{const{__scopeSelect:n,...r}=e,i=gy();return K.jsx(DI,{scope:n,id:i,children:K.jsx(We.div,{role:"group","aria-labelledby":i,...r,ref:t})})});FI.displayName=z8;var F8="SelectLabel",B8=x.forwardRef((e,t)=>{const{__scopeSelect:n,...r}=e,i=zI(F8,n);return K.jsx(We.div,{id:i.id,...r,ref:t})});B8.displayName=F8;var gf="SelectItem",[BI,H8]=Ga(gf),U8=x.forwardRef((e,t)=>{const{__scopeSelect:n,value:r,disabled:i=!1,textValue:o,...a}=e,l=Ti(gf,n),s=$i(gf,n),u=l.value===r,[c,f]=x.useState(o??""),[d,h]=x.useState(!1),m=ct(t,g=>{var v;return(v=s.itemRefCallback)==null?void 0:v.call(s,g,r,i)}),p=gy(),w=x.useRef("touch"),y=()=>{i||(l.onValueChange(r),l.onOpenChange(!1))};if(r==="")throw new Error("A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.");return K.jsx(BI,{scope:n,value:r,disabled:i,textId:p,isSelected:u,onItemTextChange:x.useCallback(g=>{f(v=>v||((g==null?void 0:g.textContent)??"").trim())},[]),children:K.jsx(Qd.ItemSlot,{scope:n,value:r,disabled:i,textValue:c,children:K.jsx(We.div,{role:"option","aria-labelledby":p,"data-highlighted":d?"":void 0,"aria-selected":u&&d,"data-state":u?"checked":"unchecked","aria-disabled":i||void 0,"data-disabled":i?"":void 0,tabIndex:i?void 0:-1,...a,ref:m,onFocus:Fe(a.onFocus,()=>h(!0)),onBlur:Fe(a.onBlur,()=>h(!1)),onClick:Fe(a.onClick,()=>{w.current!=="mouse"&&y()}),onPointerUp:Fe(a.onPointerUp,()=>{w.current==="mouse"&&y()}),onPointerDown:Fe(a.onPointerDown,g=>{w.current=g.pointerType}),onPointerMove:Fe(a.onPointerMove,g=>{var v;w.current=g.pointerType,i?(v=s.onItemLeave)==null||v.call(s):w.current==="mouse"&&g.currentTarget.focus({preventScroll:!0})}),onPointerLeave:Fe(a.onPointerLeave,g=>{var v;g.currentTarget===document.activeElement&&((v=s.onItemLeave)==null||v.call(s))}),onKeyDown:Fe(a.onKeyDown,g=>{var b;((b=s.searchRef)==null?void 0:b.current)!==""&&g.key===" "||(EI.includes(g.key)&&y(),g.key===" "&&g.preventDefault())})})})})});U8.displayName=gf;var Ml="SelectItemText",W8=x.forwardRef((e,t)=>{const{__scopeSelect:n,className:r,style:i,...o}=e,a=Ti(Ml,n),l=$i(Ml,n),s=H8(Ml,n),u=PI(Ml,n),[c,f]=x.useState(null),d=ct(t,y=>f(y),s.onItemTextChange,y=>{var g;return(g=l.itemTextRefCallback)==null?void 0:g.call(l,y,s.value,s.disabled)}),h=c==null?void 0:c.textContent,m=x.useMemo(()=>K.jsx("option",{value:s.value,disabled:s.disabled,children:h},s.value),[s.disabled,s.value,h]),{onNativeOptionAdd:p,onNativeOptionRemove:w}=u;return jt(()=>(p(m),()=>w(m)),[p,w,m]),K.jsxs(K.Fragment,{children:[K.jsx(We.span,{id:s.textId,...o,ref:d}),s.isSelected&&a.valueNode&&!a.valueNodeHasChildren?wo.createPortal(o.children,a.valueNode):null]})});W8.displayName=Ml;var j8="SelectItemIndicator",V8=x.forwardRef((e,t)=>{const{__scopeSelect:n,...r}=e;return H8(j8,n).isSelected?K.jsx(We.span,{"aria-hidden":!0,...r,ref:t}):null});V8.displayName=j8;var Xm="SelectScrollUpButton",q8=x.forwardRef((e,t)=>{const n=$i(Xm,e.__scopeSelect),r=Cy(Xm,e.__scopeSelect),[i,o]=x.useState(!1),a=ct(t,r.onScrollButtonChange);return jt(()=>{if(n.viewport&&n.isPositioned){let l=function(){const u=s.scrollTop>0;o(u)};const s=n.viewport;return l(),s.addEventListener("scroll",l),()=>s.removeEventListener("scroll",l)}},[n.viewport,n.isPositioned]),i?K.jsx(X8,{...e,ref:a,onAutoScroll:()=>{const{viewport:l,selectedItem:s}=n;l&&s&&(l.scrollTop=l.scrollTop-s.offsetHeight)}}):null});q8.displayName=Xm;var Gm="SelectScrollDownButton",Y8=x.forwardRef((e,t)=>{const n=$i(Gm,e.__scopeSelect),r=Cy(Gm,e.__scopeSelect),[i,o]=x.useState(!1),a=ct(t,r.onScrollButtonChange);return jt(()=>{if(n.viewport&&n.isPositioned){let l=function(){const u=s.scrollHeight-s.clientHeight,c=Math.ceil(s.scrollTop)<u;o(c)};const s=n.viewport;return l(),s.addEventListener("scroll",l),()=>s.removeEventListener("scroll",l)}},[n.viewport,n.isPositioned]),i?K.jsx(X8,{...e,ref:a,onAutoScroll:()=>{const{viewport:l,selectedItem:s}=n;l&&s&&(l.scrollTop=l.scrollTop+s.offsetHeight)}}):null});Y8.displayName=Gm;var X8=x.forwardRef((e,t)=>{const{__scopeSelect:n,onAutoScroll:r,...i}=e,o=$i("SelectScrollButton",n),a=x.useRef(null),l=Zd(n),s=x.useCallback(()=>{a.current!==null&&(window.clearInterval(a.current),a.current=null)},[]);return x.useEffect(()=>()=>s(),[s]),jt(()=>{var c;const u=l().find(f=>f.ref.current===document.activeElement);(c=u==null?void 0:u.ref.current)==null||c.scrollIntoView({block:"nearest"})},[l]),K.jsx(We.div,{"aria-hidden":!0,...i,ref:t,style:{flexShrink:0,...i.style},onPointerDown:Fe(i.onPointerDown,()=>{a.current===null&&(a.current=window.setInterval(r,50))}),onPointerMove:Fe(i.onPointerMove,()=>{var u;(u=o.onItemLeave)==null||u.call(o),a.current===null&&(a.current=window.setInterval(r,50))}),onPointerLeave:Fe(i.onPointerLeave,()=>{s()})})}),HI="SelectSeparator",G8=x.forwardRef((e,t)=>{const{__scopeSelect:n,...r}=e;return K.jsx(We.div,{"aria-hidden":!0,...r,ref:t})});G8.displayName=HI;var Km="SelectArrow",UI=x.forwardRef((e,t)=>{const{__scopeSelect:n,...r}=e,i=Jd(n),o=Ti(Km,n),a=$i(Km,n);return o.open&&a.position==="popper"?K.jsx(IA,{...i,...r,ref:t}):null});UI.displayName=Km;function K8(e){return e===""||e===void 0}var Q8=x.forwardRef((e,t)=>{const{value:n,...r}=e,i=x.useRef(null),o=ct(t,i),a=DA(n);return x.useEffect(()=>{const l=i.current,s=window.HTMLSelectElement.prototype,c=Object.getOwnPropertyDescriptor(s,"value").set;if(a!==n&&c){const f=new Event("change",{bubbles:!0});c.call(l,n),l.dispatchEvent(f)}},[a,n]),K.jsx(g8,{asChild:!0,children:K.jsx("select",{...r,ref:o,defaultValue:n})})});Q8.displayName="BubbleSelect";function Z8(e){const t=Cr(e),n=x.useRef(""),r=x.useRef(0),i=x.useCallback(a=>{const l=n.current+a;t(l),function s(u){n.current=u,window.clearTimeout(r.current),u!==""&&(r.current=window.setTimeout(()=>s(""),1e3))}(l)},[t]),o=x.useCallback(()=>{n.current="",window.clearTimeout(r.current)},[]);return x.useEffect(()=>()=>window.clearTimeout(r.current),[]),[n,i,o]}function J8(e,t,n){const i=t.length>1&&Array.from(t).every(u=>u===t[0])?t[0]:t,o=n?e.indexOf(n):-1;let a=WI(e,Math.max(o,0));i.length===1&&(a=a.filter(u=>u!==n));const s=a.find(u=>u.textValue.toLowerCase().startsWith(i.toLowerCase()));return s!==n?s:void 0}function WI(e,t){return e.map((n,r)=>e[(t+r)%e.length])}var jI=E8,e_=T8,VI=P8,qI=R8,YI=N8,t_=A8,XI=D8,n_=B8,r_=U8,GI=W8,KI=V8,i_=q8,o_=Y8,a_=G8;/**
 * @license lucide-react v0.454.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const QI=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),l_=(...e)=>e.filter((t,n,r)=>!!t&&t.trim()!==""&&r.indexOf(t)===n).join(" ").trim();/**
 * @license lucide-react v0.454.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var ZI={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.454.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const JI=x.forwardRef(({color:e="currentColor",size:t=24,strokeWidth:n=2,absoluteStrokeWidth:r,className:i="",children:o,iconNode:a,...l},s)=>x.createElement("svg",{ref:s,...ZI,width:t,height:t,stroke:e,strokeWidth:r?Number(n)*24/Number(t):n,className:l_("lucide",i),...l},[...a.map(([u,c])=>x.createElement(u,c)),...Array.isArray(o)?o:[o]]));/**
 * @license lucide-react v0.454.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Ey=(e,t)=>{const n=x.forwardRef(({className:r,...i},o)=>x.createElement(JI,{ref:o,iconNode:t,className:l_(`lucide-${QI(e)}`,r),...i}));return n.displayName=`${e}`,n};/**
 * @license lucide-react v0.454.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const eL=Ey("Check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]]);/**
 * @license lucide-react v0.454.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const s_=Ey("ChevronDown",[["path",{d:"m6 9 6 6 6-6",key:"qrunsl"}]]);/**
 * @license lucide-react v0.454.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const tL=Ey("ChevronUp",[["path",{d:"m18 15-6-6-6 6",key:"153udz"}]]),nL={name:"9bhhfu",styles:"display:flex;align-items:center;justify-content:space-between;padding-block:8px;padding-inline:12px;width:100%;height:40px;border-radius:6px;background-color:rgba(0 0 0 / .1);font-size:14px;line-height:20px;cursor:pointer;border:none;&>span{overflow:hidden;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:1;}&:focus{outline:2px solid transparent;outline-offset:2px;box-shadow:0 0 0 1px white,0 0 0 3px black;}&::placeholder{color:rgba(0 0 0 / .64);}&:disabled{cursor:not-allowed;opacity:.5;}"},rL={name:"7avg6t",styles:"height:16px;width:16px;opacity:.5"},iL={name:"tgat3g",styles:"display:flex;align-items:center;justify-content:center;padding-block:4px;cursor:default"},oL={name:"tgat3g",styles:"display:flex;align-items:center;justify-content:center;padding-block:4px;cursor:default"},u_={name:"6g24ce",styles:"height:16px;width:16px"},aL={name:"vuc3pz",styles:'position:relative;z-index:50;max-height:384px;min-width:8rem;overflow:hidden;border:1px solid #000000;border-radius:6px;background-color:#ffffff;box-shadow:0 4px 6px -1px rgba(0, 0, 0, .1),0 2px 4px -2px rgba(0, 0, 0, .1);&[data-position="popper"]{&[data-side="bottom"]{translate:0 4px;}&[data-side="left"]{translate:-4px;}&[data-side="right"]{translate:4px;}&[data-side="top"]{translate:0 -4px;}}'},lL={name:"19jsyu4",styles:'padding:4px;[data-position="popper"] &{width:100%;min-width:var(--radix-select-trigger-width);height:var(--radix-select-trigger-height);}'},sL={name:"1yn6gjp",styles:"padding-block:6px;padding-inline-start:32px;padding-inline-end:8px;font-size:14px;font-weight:600"},uL={name:"1spryov",styles:"position:relative;display:flex;align-items:center;width:100%;cursor:default;user-select:none;padding-block:6px;padding-inline-start:32px;padding-inline-end:8px;font-size:14px;border-radius:4px;outline:2px solid transparent;outline-offset:2px;&:focus{background-color:rgba(0 0 0 / .1);}"},cL={name:"1gu4hwl",styles:"position:absolute;left:8px;display:flex;align-items:center;justify-content:center;height:14px;width:14px"},fL={name:"6g24ce",styles:"height:16px;width:16px"},dL={name:"1sz1qb7",styles:"margin-block:4px;margin-inline:-4px"},yf=jI,vf=VI,ws=x.forwardRef(({children:e,...t},n)=>de(e_,{ref:n,css:nL,...t,children:[e,W(qI,{asChild:!0,children:W(s_,{css:rL})})]}));ws.displayName=e_.displayName;const c_=x.forwardRef(({...e},t)=>W(i_,{ref:t,css:iL,...e,children:W(tL,{css:u_})}));c_.displayName=i_.displayName;const f_=x.forwardRef(({...e},t)=>W(o_,{ref:t,css:oL,...e,children:W(s_,{css:u_})}));f_.displayName=o_.displayName;const bs=x.forwardRef(({children:e,position:t="popper",...n},r)=>W(YI,{children:de(t_,{ref:r,"data-position":t,css:aL,position:t,...n,children:[W(c_,{}),W(XI,{css:lL,children:e}),W(f_,{})]})}));bs.displayName=t_.displayName;const hL=x.forwardRef(({...e},t)=>W(n_,{ref:t,css:sL,...e}));hL.displayName=n_.displayName;const Fn=x.forwardRef(({className:e,children:t,...n},r)=>de(r_,{ref:r,css:uL,...n,children:[W("span",{css:cL,children:W(KI,{children:W(eL,{css:fL})})}),W(GI,{children:t})]}));Fn.displayName=r_.displayName;const pL=x.forwardRef(({...e},t)=>W(a_,{ref:t,css:dL,...e}));pL.displayName=a_.displayName;const mL=e=>{const{labelText:t,id:n,value:r,onChange:i,...o}=e;return de(gL,{children:[t?W(io,{htmlFor:n,children:t}):null,W(my,{id:n,type:"text",value:r,onChange:a=>i==null?void 0:i(a.target.value),...o})]})},gL=ie(Sa,{target:"e5elct20"})(()=>({}),"");function ui(e,t){return e==null||t==null?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function Ys(e,t){return e==null||t==null?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function e0(e){let t,n,r;e.length!==2?(t=ui,n=(l,s)=>ui(e(l),s),r=(l,s)=>e(l)-s):(t=e===ui||e===Ys?e:yL,n=e,r=e);function i(l,s,u=0,c=l.length){if(u<c){if(t(s,s)!==0)return c;do{const f=u+c>>>1;n(l[f],s)<0?u=f+1:c=f}while(u<c)}return u}function o(l,s,u=0,c=l.length){if(u<c){if(t(s,s)!==0)return c;do{const f=u+c>>>1;n(l[f],s)<=0?u=f+1:c=f}while(u<c)}return u}function a(l,s,u=0,c=l.length){const f=i(l,s,u,c-1);return f>u&&r(l[f-1],s)>-r(l[f],s)?f-1:f}return{left:i,center:a,right:o}}function yL(){return 0}function d_(e){return e===null?NaN:+e}function*vL(e,t){if(t===void 0)for(let n of e)n!=null&&(n=+n)>=n&&(yield n);else{let n=-1;for(let r of e)(r=t(r,++n,e))!=null&&(r=+r)>=r&&(yield r)}}const wL=e0(ui),ky=wL.right;e0(d_).center;function bL(e){return e.length|0}function xL(e){return!(e>0)}function _L(e){return typeof e!="object"||"length"in e?e:Array.from(e)}function SL(e){return t=>e(...t)}function ML(...e){const t=typeof e[e.length-1]=="function"&&SL(e.pop());e=e.map(_L);const n=e.map(bL),r=e.length-1,i=new Array(r+1).fill(0),o=[];if(r<0||n.some(xL))return o;for(;;){o.push(i.map((l,s)=>e[s][l]));let a=r;for(;++i[a]===n[a];){if(a===0)return t?o.map(t):o;i[a--]=0}}}function h_(e,t){let n=0,r,i=0,o=0;if(t===void 0)for(let a of e)a!=null&&(a=+a)>=a&&(r=a-i,i+=r/++n,o+=r*(a-i));else{let a=-1;for(let l of e)(l=t(l,++a,e))!=null&&(l=+l)>=l&&(r=l-i,i+=r/++n,o+=r*(l-i))}if(n>1)return o/(n-1)}function CL(e,t){const n=h_(e,t);return n&&Math.sqrt(n)}function ci(e,t){let n,r;for(const i of e)i!=null&&(n===void 0?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)));return[n,r]}class lo{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const n=this._partials;let r=0;for(let i=0;i<this._n&&i<32;i++){const o=n[i],a=t+o,l=Math.abs(t)<Math.abs(o)?t-(a-o):o-(a-t);l&&(n[r++]=l),t=a}return n[r]=t,this._n=r+1,this}valueOf(){const t=this._partials;let n=this._n,r,i,o,a=0;if(n>0){for(a=t[--n];n>0&&(r=a,i=t[--n],a=r+i,o=i-(a-r),!o););n>0&&(o<0&&t[n-1]<0||o>0&&t[n-1]>0)&&(i=o*2,r=a+i,i==r-a&&(a=r))}return a}}class xs extends Map{constructor(t,n=g_){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),t!=null)for(const[r,i]of t)this.set(r,i)}get(t){return super.get(Qm(this,t))}has(t){return super.has(Qm(this,t))}set(t,n){return super.set(p_(this,t),n)}delete(t){return super.delete(m_(this,t))}}class t0 extends Set{constructor(t,n=g_){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),t!=null)for(const r of t)this.add(r)}has(t){return super.has(Qm(this,t))}add(t){return super.add(p_(this,t))}delete(t){return super.delete(m_(this,t))}}function Qm({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):n}function p_({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):(e.set(r,n),n)}function m_({_intern:e,_key:t},n){const r=t(n);return e.has(r)&&(n=e.get(r),e.delete(r)),n}function g_(e){return e!==null&&typeof e=="object"?e.valueOf():e}function Zm(e){return e}function EL(e,...t){return Ty(e,Zm,Zm,t)}function qh(e,t,...n){return Ty(e,Zm,t,n)}function kL(e,t,...n){return Ty(e,Array.from,t,n)}function Ty(e,t,n,r){return function i(o,a){if(a>=r.length)return n(o);const l=new xs,s=r[a++];let u=-1;for(const c of o){const f=s(c,++u,o),d=l.get(f);d?d.push(c):l.set(f,[c])}for(const[c,f]of l)l.set(c,i(f,a));return t(l)}(e,0)}function TL(e,t){return Array.from(t,n=>e[n])}function $L(e,...t){if(typeof e[Symbol.iterator]!="function")throw new TypeError("values is not iterable");e=Array.from(e);let[n]=t;if(n&&n.length!==2||t.length>1){const r=Uint32Array.from(e,(i,o)=>o);return t.length>1?(t=t.map(i=>e.map(i)),r.sort((i,o)=>{for(const a of t){const l=wf(a[i],a[o]);if(l)return l}})):(n=e.map(n),r.sort((i,o)=>wf(n[i],n[o]))),TL(e,r)}return e.sort(y_(n))}function y_(e=ui){if(e===ui)return wf;if(typeof e!="function")throw new TypeError("compare is not a function");return(t,n)=>{const r=e(t,n);return r||r===0?r:(e(n,n)===0)-(e(t,t)===0)}}function wf(e,t){return(e==null||!(e>=e))-(t==null||!(t>=t))||(e<t?-1:e>t?1:0)}const PL=Math.sqrt(50),RL=Math.sqrt(10),NL=Math.sqrt(2);function bf(e,t,n){const r=(t-e)/Math.max(0,n),i=Math.floor(Math.log10(r)),o=r/Math.pow(10,i),a=o>=PL?10:o>=RL?5:o>=NL?2:1;let l,s,u;return i<0?(u=Math.pow(10,-i)/a,l=Math.round(e*u),s=Math.round(t*u),l/u<e&&++l,s/u>t&&--s,u=-u):(u=Math.pow(10,i)*a,l=Math.round(e/u),s=Math.round(t/u),l*u<e&&++l,s*u>t&&--s),s<l&&.5<=n&&n<2?bf(e,t,n*2):[l,s,u]}function xf(e,t,n){if(t=+t,e=+e,n=+n,!(n>0))return[];if(e===t)return[e];const r=t<e,[i,o,a]=r?bf(t,e,n):bf(e,t,n);if(!(o>=i))return[];const l=o-i+1,s=new Array(l);if(r)if(a<0)for(let u=0;u<l;++u)s[u]=(o-u)/-a;else for(let u=0;u<l;++u)s[u]=(o-u)*a;else if(a<0)for(let u=0;u<l;++u)s[u]=(i+u)/-a;else for(let u=0;u<l;++u)s[u]=(i+u)*a;return s}function Jm(e,t,n){return t=+t,e=+e,n=+n,bf(e,t,n)[2]}function e1(e,t,n){t=+t,e=+e,n=+n;const r=t<e,i=r?Jm(t,e,n):Jm(e,t,n);return(r?-1:1)*(i<0?1/-i:i)}function Kn(e,t){let n;if(t===void 0)for(const r of e)r!=null&&(n<r||n===void 0&&r>=r)&&(n=r);else{let r=-1;for(let i of e)(i=t(i,++r,e))!=null&&(n<i||n===void 0&&i>=i)&&(n=i)}return n}function AL(e,t){let n,r=-1,i=-1;if(t===void 0)for(const o of e)++i,o!=null&&(n<o||n===void 0&&o>=o)&&(n=o,r=i);else for(let o of e)(o=t(o,++i,e))!=null&&(n<o||n===void 0&&o>=o)&&(n=o,r=i);return r}function _s(e,t){let n;if(t===void 0)for(const r of e)r!=null&&(n>r||n===void 0&&r>=r)&&(n=r);else{let r=-1;for(let i of e)(i=t(i,++r,e))!=null&&(n>i||n===void 0&&i>=i)&&(n=i)}return n}function IL(e,t){let n,r=-1,i=-1;if(t===void 0)for(const o of e)++i,o!=null&&(n>o||n===void 0&&o>=o)&&(n=o,r=i);else for(let o of e)(o=t(o,++i,e))!=null&&(n>o||n===void 0&&o>=o)&&(n=o,r=i);return r}function v_(e,t,n=0,r=1/0,i){if(t=Math.floor(t),n=Math.floor(Math.max(0,n)),r=Math.floor(Math.min(e.length-1,r)),!(n<=t&&t<=r))return e;for(i=i===void 0?wf:y_(i);r>n;){if(r-n>600){const s=r-n+1,u=t-n+1,c=Math.log(s),f=.5*Math.exp(2*c/3),d=.5*Math.sqrt(c*f*(s-f)/s)*(u-s/2<0?-1:1),h=Math.max(n,Math.floor(t-u*f/s+d)),m=Math.min(r,Math.floor(t+(s-u)*f/s+d));v_(e,t,h,m,i)}const o=e[t];let a=n,l=r;for(dl(e,n,t),i(e[r],o)>0&&dl(e,n,r);a<l;){for(dl(e,a,l),++a,--l;i(e[a],o)<0;)++a;for(;i(e[l],o)>0;)--l}i(e[n],o)===0?dl(e,n,l):(++l,dl(e,l,r)),l<=t&&(n=l+1),t<=l&&(r=l-1)}return e}function dl(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function _f(e,t,n){if(e=Float64Array.from(vL(e,n)),!(!(r=e.length)||isNaN(t=+t))){if(t<=0||r<2)return _s(e);if(t>=1)return Kn(e);var r,i=(r-1)*t,o=Math.floor(i),a=Kn(v_(e,o).subarray(0,o+1)),l=_s(e.subarray(o+1));return a+(l-a)*(i-o)}}function LL(e,t,n=d_){if(!(!(r=e.length)||isNaN(t=+t))){if(t<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,i=(r-1)*t,o=Math.floor(i),a=+n(e[o],o,e),l=+n(e[o+1],o+1,e);return a+(l-a)*(i-o)}}function OL(e,t){let n=0,r=0;if(t===void 0)for(let i of e)i!=null&&(i=+i)>=i&&(++n,r+=i);else{let i=-1;for(let o of e)(o=t(o,++i,e))!=null&&(o=+o)>=o&&(++n,r+=o)}if(n)return r/n}function t1(e,t){return _f(e,.5,t)}function*DL(e){for(const t of e)yield*t}function w_(e){return Array.from(DL(e))}function zL(e,t){const n=new xs;if(t===void 0)for(let o of e)o!=null&&o>=o&&n.set(o,(n.get(o)||0)+1);else{let o=-1;for(let a of e)(a=t(a,++o,e))!=null&&a>=a&&n.set(a,(n.get(a)||0)+1)}let r,i=0;for(const[o,a]of n)a>i&&(i=a,r=o);return r}function FL(e,t=BL){const n=[];let r,i=!1;for(const o of e)i&&n.push(t(r,o)),r=o,i=!0;return n}function BL(e,t){return[e,t]}function n1(e,t,n){e=+e,t=+t,n=(i=arguments.length)<2?(t=e,e=0,1):i<3?1:+n;for(var r=-1,i=Math.max(0,Math.ceil((t-e)/n))|0,o=new Array(i);++r<i;)o[r]=e+r*n;return o}function $y(e,t){let n=0;if(t===void 0)for(let r of e)(r=+r)&&(n+=r);else{let r=-1;for(let i of e)(i=+t(i,++r,e))&&(n+=i)}return n}function Sf(e){if(typeof e[Symbol.iterator]!="function")throw new TypeError("values is not iterable");return Array.from(e).reverse()}function tr(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e);break}return this}function n0(e,t){switch(arguments.length){case 0:break;case 1:{typeof e=="function"?this.interpolator(e):this.range(e);break}default:{this.domain(e),typeof t=="function"?this.interpolator(t):this.range(t);break}}return this}const r1=Symbol("implicit");function Py(){var e=new xs,t=[],n=[],r=r1;function i(o){let a=e.get(o);if(a===void 0){if(r!==r1)return r;e.set(o,a=t.push(o)-1)}return n[a%n.length]}return i.domain=function(o){if(!arguments.length)return t.slice();t=[],e=new xs;for(const a of o)e.has(a)||e.set(a,t.push(a)-1);return i},i.range=function(o){return arguments.length?(n=Array.from(o),i):n.slice()},i.unknown=function(o){return arguments.length?(r=o,i):r},i.copy=function(){return Py(t,n).unknown(r)},tr.apply(i,arguments),i}function r0(){var e=Py().unknown(void 0),t=e.domain,n=e.range,r=0,i=1,o,a,l=!1,s=0,u=0,c=.5;delete e.unknown;function f(){var d=t().length,h=i<r,m=h?i:r,p=h?r:i;o=(p-m)/Math.max(1,d-s+u*2),l&&(o=Math.floor(o)),m+=(p-m-o*(d-s))*c,a=o*(1-s),l&&(m=Math.round(m),a=Math.round(a));var w=n1(d).map(function(y){return m+o*y});return n(h?w.reverse():w)}return e.domain=function(d){return arguments.length?(t(d),f()):t()},e.range=function(d){return arguments.length?([r,i]=d,r=+r,i=+i,f()):[r,i]},e.rangeRound=function(d){return[r,i]=d,r=+r,i=+i,l=!0,f()},e.bandwidth=function(){return a},e.step=function(){return o},e.round=function(d){return arguments.length?(l=!!d,f()):l},e.padding=function(d){return arguments.length?(s=Math.min(1,u=+d),f()):s},e.paddingInner=function(d){return arguments.length?(s=Math.min(1,d),f()):s},e.paddingOuter=function(d){return arguments.length?(u=+d,f()):u},e.align=function(d){return arguments.length?(c=Math.max(0,Math.min(1,d)),f()):c},e.copy=function(){return r0(t(),[r,i]).round(l).paddingInner(s).paddingOuter(u).align(c)},tr.apply(f(),arguments)}function b_(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return b_(t())},e}function HL(){return b_(r0.apply(null,arguments).paddingInner(1))}function Ka(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function Xs(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Pi(){}var so=.7,Ma=1/so,ua="\\s*([+-]?\\d+)\\s*",Ss="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Yn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",UL=/^#([0-9a-f]{3,8})$/,WL=new RegExp(`^rgb\\(${ua},${ua},${ua}\\)$`),jL=new RegExp(`^rgb\\(${Yn},${Yn},${Yn}\\)$`),VL=new RegExp(`^rgba\\(${ua},${ua},${ua},${Ss}\\)$`),qL=new RegExp(`^rgba\\(${Yn},${Yn},${Yn},${Ss}\\)$`),YL=new RegExp(`^hsl\\(${Ss},${Yn},${Yn}\\)$`),XL=new RegExp(`^hsla\\(${Ss},${Yn},${Yn},${Ss}\\)$`),nb={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Ka(Pi,uo,{copy(e){return Object.assign(new this.constructor,this,e)},displayable(){return this.rgb().displayable()},hex:rb,formatHex:rb,formatHex8:GL,formatHsl:KL,formatRgb:ib,toString:ib});function rb(){return this.rgb().formatHex()}function GL(){return this.rgb().formatHex8()}function KL(){return x_(this).formatHsl()}function ib(){return this.rgb().formatRgb()}function uo(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=UL.exec(e))?(n=t[1].length,t=parseInt(t[1],16),n===6?ob(t):n===3?new Je(t>>8&15|t>>4&240,t>>4&15|t&240,(t&15)<<4|t&15,1):n===8?Wu(t>>24&255,t>>16&255,t>>8&255,(t&255)/255):n===4?Wu(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|t&240,((t&15)<<4|t&15)/255):null):(t=WL.exec(e))?new Je(t[1],t[2],t[3],1):(t=jL.exec(e))?new Je(t[1]*255/100,t[2]*255/100,t[3]*255/100,1):(t=VL.exec(e))?Wu(t[1],t[2],t[3],t[4]):(t=qL.exec(e))?Wu(t[1]*255/100,t[2]*255/100,t[3]*255/100,t[4]):(t=YL.exec(e))?sb(t[1],t[2]/100,t[3]/100,1):(t=XL.exec(e))?sb(t[1],t[2]/100,t[3]/100,t[4]):nb.hasOwnProperty(e)?ob(nb[e]):e==="transparent"?new Je(NaN,NaN,NaN,0):null}function ob(e){return new Je(e>>16&255,e>>8&255,e&255,1)}function Wu(e,t,n,r){return r<=0&&(e=t=n=NaN),new Je(e,t,n,r)}function Ry(e){return e instanceof Pi||(e=uo(e)),e?(e=e.rgb(),new Je(e.r,e.g,e.b,e.opacity)):new Je}function bi(e,t,n,r){return arguments.length===1?Ry(e):new Je(e,t,n,r??1)}function Je(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}Ka(Je,bi,Xs(Pi,{brighter(e){return e=e==null?Ma:Math.pow(Ma,e),new Je(this.r*e,this.g*e,this.b*e,this.opacity)},darker(e){return e=e==null?so:Math.pow(so,e),new Je(this.r*e,this.g*e,this.b*e,this.opacity)},rgb(){return this},clamp(){return new Je(Ki(this.r),Ki(this.g),Ki(this.b),Mf(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:ab,formatHex:ab,formatHex8:QL,formatRgb:lb,toString:lb}));function ab(){return`#${Vi(this.r)}${Vi(this.g)}${Vi(this.b)}`}function QL(){return`#${Vi(this.r)}${Vi(this.g)}${Vi(this.b)}${Vi((isNaN(this.opacity)?1:this.opacity)*255)}`}function lb(){const e=Mf(this.opacity);return`${e===1?"rgb(":"rgba("}${Ki(this.r)}, ${Ki(this.g)}, ${Ki(this.b)}${e===1?")":`, ${e})`}`}function Mf(e){return isNaN(e)?1:Math.max(0,Math.min(1,e))}function Ki(e){return Math.max(0,Math.min(255,Math.round(e)||0))}function Vi(e){return e=Ki(e),(e<16?"0":"")+e.toString(16)}function sb(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new wn(e,t,n,r)}function x_(e){if(e instanceof wn)return new wn(e.h,e.s,e.l,e.opacity);if(e instanceof Pi||(e=uo(e)),!e)return new wn;if(e instanceof wn)return e;e=e.rgb();var t=e.r/255,n=e.g/255,r=e.b/255,i=Math.min(t,n,r),o=Math.max(t,n,r),a=NaN,l=o-i,s=(o+i)/2;return l?(t===o?a=(n-r)/l+(n<r)*6:n===o?a=(r-t)/l+2:a=(t-n)/l+4,l/=s<.5?o+i:2-o-i,a*=60):l=s>0&&s<1?0:a,new wn(a,l,s,e.opacity)}function i1(e,t,n,r){return arguments.length===1?x_(e):new wn(e,t,n,r??1)}function wn(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}Ka(wn,i1,Xs(Pi,{brighter(e){return e=e==null?Ma:Math.pow(Ma,e),new wn(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=e==null?so:Math.pow(so,e),new wn(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=this.h%360+(this.h<0)*360,t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,i=2*n-r;return new Je(Yh(e>=240?e-240:e+120,i,r),Yh(e,i,r),Yh(e<120?e+240:e-120,i,r),this.opacity)},clamp(){return new wn(ub(this.h),ju(this.s),ju(this.l),Mf(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const e=Mf(this.opacity);return`${e===1?"hsl(":"hsla("}${ub(this.h)}, ${ju(this.s)*100}%, ${ju(this.l)*100}%${e===1?")":`, ${e})`}`}}));function ub(e){return e=(e||0)%360,e<0?e+360:e}function ju(e){return Math.max(0,Math.min(1,e||0))}function Yh(e,t,n){return(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)*255}const __=Math.PI/180,S_=180/Math.PI,Cf=18,M_=.96422,C_=1,E_=.82521,k_=4/29,ca=6/29,T_=3*ca*ca,ZL=ca*ca*ca;function $_(e){if(e instanceof Xn)return new Xn(e.l,e.a,e.b,e.opacity);if(e instanceof pr)return P_(e);e instanceof Je||(e=Ry(e));var t=Qh(e.r),n=Qh(e.g),r=Qh(e.b),i=Xh((.2225045*t+.7168786*n+.0606169*r)/C_),o,a;return t===n&&n===r?o=a=i:(o=Xh((.4360747*t+.3850649*n+.1430804*r)/M_),a=Xh((.0139322*t+.0971045*n+.7141733*r)/E_)),new Xn(116*i-16,500*(o-i),200*(i-a),e.opacity)}function o1(e,t,n,r){return arguments.length===1?$_(e):new Xn(e,t,n,r??1)}function Xn(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}Ka(Xn,o1,Xs(Pi,{brighter(e){return new Xn(this.l+Cf*(e??1),this.a,this.b,this.opacity)},darker(e){return new Xn(this.l-Cf*(e??1),this.a,this.b,this.opacity)},rgb(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return t=M_*Gh(t),e=C_*Gh(e),n=E_*Gh(n),new Je(Kh(3.1338561*t-1.6168667*e-.4906146*n),Kh(-.9787684*t+1.9161415*e+.033454*n),Kh(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}}));function Xh(e){return e>ZL?Math.pow(e,1/3):e/T_+k_}function Gh(e){return e>ca?e*e*e:T_*(e-k_)}function Kh(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function Qh(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function JL(e){if(e instanceof pr)return new pr(e.h,e.c,e.l,e.opacity);if(e instanceof Xn||(e=$_(e)),e.a===0&&e.b===0)return new pr(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*S_;return new pr(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function a1(e,t,n,r){return arguments.length===1?JL(e):new pr(e,t,n,r??1)}function pr(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function P_(e){if(isNaN(e.h))return new Xn(e.l,0,0,e.opacity);var t=e.h*__;return new Xn(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}Ka(pr,a1,Xs(Pi,{brighter(e){return new pr(this.h,this.c,this.l+Cf*(e??1),this.opacity)},darker(e){return new pr(this.h,this.c,this.l-Cf*(e??1),this.opacity)},rgb(){return P_(this).rgb()}}));var R_=-.14861,Ny=1.78277,Ay=-.29227,i0=-.90649,Ms=1.97294,cb=Ms*i0,fb=Ms*Ny,db=Ny*Ay-i0*R_;function eO(e){if(e instanceof Qi)return new Qi(e.h,e.s,e.l,e.opacity);e instanceof Je||(e=Ry(e));var t=e.r/255,n=e.g/255,r=e.b/255,i=(db*r+cb*t-fb*n)/(db+cb-fb),o=r-i,a=(Ms*(n-i)-Ay*o)/i0,l=Math.sqrt(a*a+o*o)/(Ms*i*(1-i)),s=l?Math.atan2(a,o)*S_-120:NaN;return new Qi(s<0?s+360:s,l,i,e.opacity)}function Qn(e,t,n,r){return arguments.length===1?eO(e):new Qi(e,t,n,r??1)}function Qi(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}Ka(Qi,Qn,Xs(Pi,{brighter(e){return e=e==null?Ma:Math.pow(Ma,e),new Qi(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=e==null?so:Math.pow(so,e),new Qi(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=isNaN(this.h)?0:(this.h+120)*__,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),i=Math.sin(e);return new Je(255*(t+n*(R_*r+Ny*i)),255*(t+n*(Ay*r+i0*i)),255*(t+n*(Ms*r)),this.opacity)}}));function tO(e,t,n,r,i){var o=e*e,a=o*e;return((1-3*e+3*o-a)*t+(4-6*o+3*a)*n+(1+3*e+3*o-3*a)*r+a*i)/6}function nO(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),i=e[r],o=e[r+1],a=r>0?e[r-1]:2*i-o,l=r<t-1?e[r+2]:2*o-i;return tO((n-r/t)*t,a,i,o,l)}}const o0=e=>()=>e;function N_(e,t){return function(n){return e+n*t}}function rO(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}function Iy(e,t){var n=t-e;return n?N_(e,n>180||n<-180?n-360*Math.round(n/360):n):o0(isNaN(e)?t:e)}function iO(e){return(e=+e)==1?gt:function(t,n){return n-t?rO(t,n,e):o0(isNaN(t)?n:t)}}function gt(e,t){var n=t-e;return n?N_(e,n):o0(isNaN(e)?t:e)}const co=function e(t){var n=iO(t);function r(i,o){var a=n((i=bi(i)).r,(o=bi(o)).r),l=n(i.g,o.g),s=n(i.b,o.b),u=gt(i.opacity,o.opacity);return function(c){return i.r=a(c),i.g=l(c),i.b=s(c),i.opacity=u(c),i+""}}return r.gamma=e,r}(1);function oO(e){return function(t){var n=t.length,r=new Array(n),i=new Array(n),o=new Array(n),a,l;for(a=0;a<n;++a)l=bi(t[a]),r[a]=l.r||0,i[a]=l.g||0,o[a]=l.b||0;return r=e(r),i=e(i),o=e(o),l.opacity=1,function(s){return l.r=r(s),l.g=i(s),l.b=o(s),l+""}}}var aO=oO(nO);function lO(e,t){t||(t=[]);var n=e?Math.min(t.length,e.length):0,r=t.slice(),i;return function(o){for(i=0;i<n;++i)r[i]=e[i]*(1-o)+t[i]*o;return r}}function sO(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function uO(e,t){var n=t?t.length:0,r=e?Math.min(n,e.length):0,i=new Array(r),o=new Array(n),a;for(a=0;a<r;++a)i[a]=Gs(e[a],t[a]);for(;a<n;++a)o[a]=t[a];return function(l){for(a=0;a<r;++a)o[a]=i[a](l);return o}}function cO(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}}function mt(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}function fO(e,t){var n={},r={},i;(e===null||typeof e!="object")&&(e={}),(t===null||typeof t!="object")&&(t={});for(i in t)i in e?n[i]=Gs(e[i],t[i]):r[i]=t[i];return function(o){for(i in n)r[i]=n[i](o);return r}}var l1=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Zh=new RegExp(l1.source,"g");function dO(e){return function(){return e}}function hO(e){return function(t){return e(t)+""}}function A_(e,t){var n=l1.lastIndex=Zh.lastIndex=0,r,i,o,a=-1,l=[],s=[];for(e=e+"",t=t+"";(r=l1.exec(e))&&(i=Zh.exec(t));)(o=i.index)>n&&(o=t.slice(n,o),l[a]?l[a]+=o:l[++a]=o),(r=r[0])===(i=i[0])?l[a]?l[a]+=i:l[++a]=i:(l[++a]=null,s.push({i:a,x:mt(r,i)})),n=Zh.lastIndex;return n<t.length&&(o=t.slice(n),l[a]?l[a]+=o:l[++a]=o),l.length<2?s[0]?hO(s[0].x):dO(t):(t=s.length,function(u){for(var c=0,f;c<t;++c)l[(f=s[c]).i]=f.x(u);return l.join("")})}function Gs(e,t){var n=typeof t,r;return t==null||n==="boolean"?o0(t):(n==="number"?mt:n==="string"?(r=uo(t))?(t=r,co):A_:t instanceof uo?co:t instanceof Date?cO:sO(t)?lO:Array.isArray(t)?uO:typeof t.valueOf!="function"&&typeof t.toString!="function"||isNaN(t)?fO:mt)(e,t)}function Ly(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}}var hb=180/Math.PI,s1={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function I_(e,t,n,r,i,o){var a,l,s;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(s=e*n+t*r)&&(n-=e*s,r-=t*s),(l=Math.sqrt(n*n+r*r))&&(n/=l,r/=l,s/=l),e*r<t*n&&(e=-e,t=-t,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(t,e)*hb,skewX:Math.atan(s)*hb,scaleX:a,scaleY:l}}var Vu;function pO(e){const t=new(typeof DOMMatrix=="function"?DOMMatrix:WebKitCSSMatrix)(e+"");return t.isIdentity?s1:I_(t.a,t.b,t.c,t.d,t.e,t.f)}function mO(e){return e==null||(Vu||(Vu=document.createElementNS("http://www.w3.org/2000/svg","g")),Vu.setAttribute("transform",e),!(e=Vu.transform.baseVal.consolidate()))?s1:(e=e.matrix,I_(e.a,e.b,e.c,e.d,e.e,e.f))}function L_(e,t,n,r){function i(u){return u.length?u.pop()+" ":""}function o(u,c,f,d,h,m){if(u!==f||c!==d){var p=h.push("translate(",null,t,null,n);m.push({i:p-4,x:mt(u,f)},{i:p-2,x:mt(c,d)})}else(f||d)&&h.push("translate("+f+t+d+n)}function a(u,c,f,d){u!==c?(u-c>180?c+=360:c-u>180&&(u+=360),d.push({i:f.push(i(f)+"rotate(",null,r)-2,x:mt(u,c)})):c&&f.push(i(f)+"rotate("+c+r)}function l(u,c,f,d){u!==c?d.push({i:f.push(i(f)+"skewX(",null,r)-2,x:mt(u,c)}):c&&f.push(i(f)+"skewX("+c+r)}function s(u,c,f,d,h,m){if(u!==f||c!==d){var p=h.push(i(h)+"scale(",null,",",null,")");m.push({i:p-4,x:mt(u,f)},{i:p-2,x:mt(c,d)})}else(f!==1||d!==1)&&h.push(i(h)+"scale("+f+","+d+")")}return function(u,c){var f=[],d=[];return u=e(u),c=e(c),o(u.translateX,u.translateY,c.translateX,c.translateY,f,d),a(u.rotate,c.rotate,f,d),l(u.skewX,c.skewX,f,d),s(u.scaleX,u.scaleY,c.scaleX,c.scaleY,f,d),u=c=null,function(h){for(var m=-1,p=d.length,w;++m<p;)f[(w=d[m]).i]=w.x(h);return f.join("")}}}var gO=L_(pO,"px, ","px)","deg)"),yO=L_(mO,", ",")",")");function vO(e){return function(t,n){var r=e((t=i1(t)).h,(n=i1(n)).h),i=gt(t.s,n.s),o=gt(t.l,n.l),a=gt(t.opacity,n.opacity);return function(l){return t.h=r(l),t.s=i(l),t.l=o(l),t.opacity=a(l),t+""}}}const wO=vO(Iy);function bO(e,t){var n=gt((e=o1(e)).l,(t=o1(t)).l),r=gt(e.a,t.a),i=gt(e.b,t.b),o=gt(e.opacity,t.opacity);return function(a){return e.l=n(a),e.a=r(a),e.b=i(a),e.opacity=o(a),e+""}}function xO(e){return function(t,n){var r=e((t=a1(t)).h,(n=a1(n)).h),i=gt(t.c,n.c),o=gt(t.l,n.l),a=gt(t.opacity,n.opacity);return function(l){return t.h=r(l),t.c=i(l),t.l=o(l),t.opacity=a(l),t+""}}}const _O=xO(Iy);function O_(e){return function t(n){n=+n;function r(i,o){var a=e((i=Qn(i)).h,(o=Qn(o)).h),l=gt(i.s,o.s),s=gt(i.l,o.l),u=gt(i.opacity,o.opacity);return function(c){return i.h=a(c),i.s=l(c),i.l=s(Math.pow(c,n)),i.opacity=u(c),i+""}}return r.gamma=t,r}(1)}O_(Iy);var Oy=O_(gt);function a0(e,t){t===void 0&&(t=e,e=Gs);for(var n=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);n<r;)o[n]=e(i,i=t[++n]);return function(a){var l=Math.max(0,Math.min(r-1,Math.floor(a*=r)));return o[l](a-l)}}function Mn(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n}function SO(e){return function(){return e}}function u1(e){return+e}var pb=[0,1];function rn(e){return e}function c1(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:SO(isNaN(t)?NaN:.5)}function MO(e,t){var n;return e>t&&(n=e,e=t,t=n),function(r){return Math.max(e,Math.min(t,r))}}function CO(e,t,n){var r=e[0],i=e[1],o=t[0],a=t[1];return i<r?(r=c1(i,r),o=n(a,o)):(r=c1(r,i),o=n(o,a)),function(l){return o(r(l))}}function EO(e,t,n){var r=Math.min(e.length,t.length)-1,i=new Array(r),o=new Array(r),a=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++a<r;)i[a]=c1(e[a],e[a+1]),o[a]=n(t[a],t[a+1]);return function(l){var s=ky(e,l,1,r)-1;return o[s](i[s](l))}}function Ks(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function l0(){var e=pb,t=pb,n=Gs,r,i,o,a=rn,l,s,u;function c(){var d=Math.min(e.length,t.length);return a!==rn&&(a=MO(e[0],e[d-1])),l=d>2?EO:CO,s=u=null,f}function f(d){return d==null||isNaN(d=+d)?o:(s||(s=l(e.map(r),t,n)))(r(a(d)))}return f.invert=function(d){return a(i((u||(u=l(t,e.map(r),mt)))(d)))},f.domain=function(d){return arguments.length?(e=Array.from(d,u1),c()):e.slice()},f.range=function(d){return arguments.length?(t=Array.from(d),c()):t.slice()},f.rangeRound=function(d){return t=Array.from(d),n=Ly,c()},f.clamp=function(d){return arguments.length?(a=d?!0:rn,c()):a!==rn},f.interpolate=function(d){return arguments.length?(n=d,c()):n},f.unknown=function(d){return arguments.length?(o=d,f):o},function(d,h){return r=d,i=h,c()}}function D_(){return l0()(rn,rn)}function kO(e){return Math.abs(e=Math.round(e))>=1e21?e.toLocaleString("en").replace(/,/g,""):e.toString(10)}function Ef(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}function Ca(e){return e=Ef(Math.abs(e)),e?e[1]:NaN}function TO(e,t){return function(n,r){for(var i=n.length,o=[],a=0,l=e[0],s=0;i>0&&l>0&&(s+l+1>r&&(l=Math.max(1,r-s)),o.push(n.substring(i-=l,i+l)),!((s+=l+1)>r));)l=e[a=(a+1)%e.length];return o.reverse().join(t)}}function $O(e){return function(t){return t.replace(/[0-9]/g,function(n){return e[+n]})}}var PO=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Cs(e){if(!(t=PO.exec(e)))throw new Error("invalid format: "+e);var t;return new Dy({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}Cs.prototype=Dy.prototype;function Dy(e){this.fill=e.fill===void 0?" ":e.fill+"",this.align=e.align===void 0?">":e.align+"",this.sign=e.sign===void 0?"-":e.sign+"",this.symbol=e.symbol===void 0?"":e.symbol+"",this.zero=!!e.zero,this.width=e.width===void 0?void 0:+e.width,this.comma=!!e.comma,this.precision=e.precision===void 0?void 0:+e.precision,this.trim=!!e.trim,this.type=e.type===void 0?"":e.type+""}Dy.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(this.width===void 0?"":Math.max(1,this.width|0))+(this.comma?",":"")+(this.precision===void 0?"":"."+Math.max(0,this.precision|0))+(this.trim?"~":"")+this.type};function RO(e){e:for(var t=e.length,n=1,r=-1,i;n<t;++n)switch(e[n]){case".":r=i=n;break;case"0":r===0&&(r=n),i=n;break;default:if(!+e[n])break e;r>0&&(r=0);break}return r>0?e.slice(0,r)+e.slice(i+1):e}var z_;function NO(e,t){var n=Ef(e,t);if(!n)return e+"";var r=n[0],i=n[1],o=i-(z_=Math.max(-8,Math.min(8,Math.floor(i/3)))*3)+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ef(e,Math.max(0,t+o-1))[0]}function mb(e,t){var n=Ef(e,t);if(!n)return e+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}const gb={"%":(e,t)=>(e*100).toFixed(t),b:e=>Math.round(e).toString(2),c:e=>e+"",d:kO,e:(e,t)=>e.toExponential(t),f:(e,t)=>e.toFixed(t),g:(e,t)=>e.toPrecision(t),o:e=>Math.round(e).toString(8),p:(e,t)=>mb(e*100,t),r:mb,s:NO,X:e=>Math.round(e).toString(16).toUpperCase(),x:e=>Math.round(e).toString(16)};function yb(e){return e}var vb=Array.prototype.map,wb=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function AO(e){var t=e.grouping===void 0||e.thousands===void 0?yb:TO(vb.call(e.grouping,Number),e.thousands+""),n=e.currency===void 0?"":e.currency[0]+"",r=e.currency===void 0?"":e.currency[1]+"",i=e.decimal===void 0?".":e.decimal+"",o=e.numerals===void 0?yb:$O(vb.call(e.numerals,String)),a=e.percent===void 0?"%":e.percent+"",l=e.minus===void 0?"−":e.minus+"",s=e.nan===void 0?"NaN":e.nan+"";function u(f){f=Cs(f);var d=f.fill,h=f.align,m=f.sign,p=f.symbol,w=f.zero,y=f.width,g=f.comma,v=f.precision,b=f.trim,_=f.type;_==="n"?(g=!0,_="g"):gb[_]||(v===void 0&&(v=12),b=!0,_="g"),(w||d==="0"&&h==="=")&&(w=!0,d="0",h="=");var M=p==="$"?n:p==="#"&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",S=p==="$"?r:/[%p]/.test(_)?a:"",C=gb[_],k=/[defgprs%]/.test(_);v=v===void 0?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v));function $(E){var U=M,D=S,N,P,I;if(_==="c")D=C(E)+D,E="";else{E=+E;var z=E<0||1/E<0;if(E=isNaN(E)?s:C(Math.abs(E),v),b&&(E=RO(E)),z&&+E==0&&m!=="+"&&(z=!1),U=(z?m==="("?m:l:m==="-"||m==="("?"":m)+U,D=(_==="s"?wb[8+z_/3]:"")+D+(z&&m==="("?")":""),k){for(N=-1,P=E.length;++N<P;)if(I=E.charCodeAt(N),48>I||I>57){D=(I===46?i+E.slice(N+1):E.slice(N))+D,E=E.slice(0,N);break}}}g&&!w&&(E=t(E,1/0));var T=U.length+E.length+D.length,R=T<y?new Array(y-T+1).join(d):"";switch(g&&w&&(E=t(R+E,R.length?y-D.length:1/0),R=""),h){case"<":E=U+E+D+R;break;case"=":E=U+R+E+D;break;case"^":E=R.slice(0,T=R.length>>1)+U+E+D+R.slice(T);break;default:E=R+U+E+D;break}return o(E)}return $.toString=function(){return f+""},$}function c(f,d){var h=u((f=Cs(f),f.type="f",f)),m=Math.max(-8,Math.min(8,Math.floor(Ca(d)/3)))*3,p=Math.pow(10,-m),w=wb[8+m/3];return function(y){return h(p*y)+w}}return{format:u,formatPrefix:c}}var qu,Qa,F_;IO({thousands:",",grouping:[3],currency:["$",""]});function IO(e){return qu=AO(e),Qa=qu.format,F_=qu.formatPrefix,qu}function LO(e){return Math.max(0,-Ca(Math.abs(e)))}function OO(e,t){return Math.max(0,Math.max(-8,Math.min(8,Math.floor(Ca(t)/3)))*3-Ca(Math.abs(e)))}function DO(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Ca(t)-Ca(e))+1}function zO(e,t,n,r){var i=e1(e,t,n),o;switch(r=Cs(r??",f"),r.type){case"s":{var a=Math.max(Math.abs(e),Math.abs(t));return r.precision==null&&!isNaN(o=OO(i,a))&&(r.precision=o),F_(r,a)}case"":case"e":case"g":case"p":case"r":{r.precision==null&&!isNaN(o=DO(i,Math.max(Math.abs(e),Math.abs(t))))&&(r.precision=o-(r.type==="e"));break}case"f":case"%":{r.precision==null&&!isNaN(o=LO(i))&&(r.precision=o-(r.type==="%")*2);break}}return Qa(r)}function Qs(e){var t=e.domain;return e.ticks=function(n){var r=t();return xf(r[0],r[r.length-1],n??10)},e.tickFormat=function(n,r){var i=t();return zO(i[0],i[i.length-1],n??10,r)},e.nice=function(n){n==null&&(n=10);var r=t(),i=0,o=r.length-1,a=r[i],l=r[o],s,u,c=10;for(l<a&&(u=a,a=l,l=u,u=i,i=o,o=u);c-- >0;){if(u=Jm(a,l,n),u===s)return r[i]=a,r[o]=l,t(r);if(u>0)a=Math.floor(a/u)*u,l=Math.ceil(l/u)*u;else if(u<0)a=Math.ceil(a*u)/u,l=Math.floor(l*u)/u;else break;s=u}return e},e}function zy(){var e=D_();return e.copy=function(){return Ks(e,zy())},tr.apply(e,arguments),Qs(e)}function B_(e){var t;function n(r){return r==null||isNaN(r=+r)?t:r}return n.invert=n,n.domain=n.range=function(r){return arguments.length?(e=Array.from(r,u1),n):e.slice()},n.unknown=function(r){return arguments.length?(t=r,n):t},n.copy=function(){return B_(e).unknown(t)},e=arguments.length?Array.from(e,u1):[0,1],Qs(n)}function H_(e,t){e=e.slice();var n=0,r=e.length-1,i=e[n],o=e[r],a;return o<i&&(a=n,n=r,r=a,a=i,i=o,o=a),e[n]=t.floor(i),e[r]=t.ceil(o),e}function bb(e){return Math.log(e)}function xb(e){return Math.exp(e)}function FO(e){return-Math.log(-e)}function BO(e){return-Math.exp(-e)}function HO(e){return isFinite(e)?+("1e"+e):e<0?0:e}function UO(e){return e===10?HO:e===Math.E?Math.exp:t=>Math.pow(e,t)}function WO(e){return e===Math.E?Math.log:e===10&&Math.log10||e===2&&Math.log2||(e=Math.log(e),t=>Math.log(t)/e)}function _b(e){return(t,n)=>-e(-t,n)}function U_(e){const t=e(bb,xb),n=t.domain;let r=10,i,o;function a(){return i=WO(r),o=UO(r),n()[0]<0?(i=_b(i),o=_b(o),e(FO,BO)):e(bb,xb),t}return t.base=function(l){return arguments.length?(r=+l,a()):r},t.domain=function(l){return arguments.length?(n(l),a()):n()},t.ticks=l=>{const s=n();let u=s[0],c=s[s.length-1];const f=c<u;f&&([u,c]=[c,u]);let d=i(u),h=i(c),m,p;const w=l==null?10:+l;let y=[];if(!(r%1)&&h-d<w){if(d=Math.floor(d),h=Math.ceil(h),u>0){for(;d<=h;++d)for(m=1;m<r;++m)if(p=d<0?m/o(-d):m*o(d),!(p<u)){if(p>c)break;y.push(p)}}else for(;d<=h;++d)for(m=r-1;m>=1;--m)if(p=d>0?m/o(-d):m*o(d),!(p<u)){if(p>c)break;y.push(p)}y.length*2<w&&(y=xf(u,c,w))}else y=xf(d,h,Math.min(h-d,w)).map(o);return f?y.reverse():y},t.tickFormat=(l,s)=>{if(l==null&&(l=10),s==null&&(s=r===10?"s":","),typeof s!="function"&&(!(r%1)&&(s=Cs(s)).precision==null&&(s.trim=!0),s=Qa(s)),l===1/0)return s;const u=Math.max(1,r*l/t.ticks().length);return c=>{let f=c/o(Math.round(i(c)));return f*r<r-.5&&(f*=r),f<=u?s(c):""}},t.nice=()=>n(H_(n(),{floor:l=>o(Math.floor(i(l))),ceil:l=>o(Math.ceil(i(l)))})),t}function W_(){const e=U_(l0()).domain([1,10]);return e.copy=()=>Ks(e,W_()).base(e.base()),tr.apply(e,arguments),e}function Sb(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function Mb(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function j_(e){var t=1,n=e(Sb(t),Mb(t));return n.constant=function(r){return arguments.length?e(Sb(t=+r),Mb(t)):t},Qs(n)}function V_(){var e=j_(l0());return e.copy=function(){return Ks(e,V_()).constant(e.constant())},tr.apply(e,arguments)}function Cb(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function jO(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function VO(e){return e<0?-e*e:e*e}function q_(e){var t=e(rn,rn),n=1;function r(){return n===1?e(rn,rn):n===.5?e(jO,VO):e(Cb(n),Cb(1/n))}return t.exponent=function(i){return arguments.length?(n=+i,r()):n},Qs(t)}function Y_(){var e=q_(l0());return e.copy=function(){return Ks(e,Y_()).exponent(e.exponent())},tr.apply(e,arguments),e}function X_(){var e=[],t=[],n=[],r;function i(){var a=0,l=Math.max(1,t.length);for(n=new Array(l-1);++a<l;)n[a-1]=LL(e,a/l);return o}function o(a){return a==null||isNaN(a=+a)?r:t[ky(n,a)]}return o.invertExtent=function(a){var l=t.indexOf(a);return l<0?[NaN,NaN]:[l>0?n[l-1]:e[0],l<n.length?n[l]:e[e.length-1]]},o.domain=function(a){if(!arguments.length)return e.slice();e=[];for(let l of a)l!=null&&!isNaN(l=+l)&&e.push(l);return e.sort(ui),i()},o.range=function(a){return arguments.length?(t=Array.from(a),i()):t.slice()},o.unknown=function(a){return arguments.length?(r=a,o):r},o.quantiles=function(){return n.slice()},o.copy=function(){return X_().domain(e).range(t).unknown(r)},tr.apply(o,arguments)}function G_(){var e=[.5],t=[0,1],n,r=1;function i(o){return o!=null&&o<=o?t[ky(e,o,0,r)]:n}return i.domain=function(o){return arguments.length?(e=Array.from(o),r=Math.min(e.length,t.length-1),i):e.slice()},i.range=function(o){return arguments.length?(t=Array.from(o),r=Math.min(e.length,t.length-1),i):t.slice()},i.invertExtent=function(o){var a=t.indexOf(o);return[e[a-1],e[a]]},i.unknown=function(o){return arguments.length?(n=o,i):n},i.copy=function(){return G_().domain(e).range(t).unknown(n)},tr.apply(i,arguments)}const Jh=new Date,ep=new Date;function Xe(e,t,n,r){function i(o){return e(o=arguments.length===0?new Date:new Date(+o)),o}return i.floor=o=>(e(o=new Date(+o)),o),i.ceil=o=>(e(o=new Date(o-1)),t(o,1),e(o),o),i.round=o=>{const a=i(o),l=i.ceil(o);return o-a<l-o?a:l},i.offset=(o,a)=>(t(o=new Date(+o),a==null?1:Math.floor(a)),o),i.range=(o,a,l)=>{const s=[];if(o=i.ceil(o),l=l==null?1:Math.floor(l),!(o<a)||!(l>0))return s;let u;do s.push(u=new Date(+o)),t(o,l),e(o);while(u<o&&o<a);return s},i.filter=o=>Xe(a=>{if(a>=a)for(;e(a),!o(a);)a.setTime(a-1)},(a,l)=>{if(a>=a)if(l<0)for(;++l<=0;)for(;t(a,-1),!o(a););else for(;--l>=0;)for(;t(a,1),!o(a););}),n&&(i.count=(o,a)=>(Jh.setTime(+o),ep.setTime(+a),e(Jh),e(ep),Math.floor(n(Jh,ep))),i.every=o=>(o=Math.floor(o),!isFinite(o)||!(o>0)?null:o>1?i.filter(r?a=>r(a)%o===0:a=>i.count(0,a)%o===0):i)),i}const kf=Xe(()=>{},(e,t)=>{e.setTime(+e+t)},(e,t)=>t-e);kf.every=e=>(e=Math.floor(e),!isFinite(e)||!(e>0)?null:e>1?Xe(t=>{t.setTime(Math.floor(t/e)*e)},(t,n)=>{t.setTime(+t+n*e)},(t,n)=>(n-t)/e):kf);kf.range;const mr=1e3,on=mr*60,gr=on*60,$r=gr*24,Fy=$r*7,Eb=$r*30,tp=$r*365,bn=Xe(e=>{e.setTime(e-e.getMilliseconds())},(e,t)=>{e.setTime(+e+t*mr)},(e,t)=>(t-e)/mr,e=>e.getUTCSeconds());bn.range;const Zs=Xe(e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*mr)},(e,t)=>{e.setTime(+e+t*on)},(e,t)=>(t-e)/on,e=>e.getMinutes());Zs.range;const Js=Xe(e=>{e.setUTCSeconds(0,0)},(e,t)=>{e.setTime(+e+t*on)},(e,t)=>(t-e)/on,e=>e.getUTCMinutes());Js.range;const eu=Xe(e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*mr-e.getMinutes()*on)},(e,t)=>{e.setTime(+e+t*gr)},(e,t)=>(t-e)/gr,e=>e.getHours());eu.range;const tu=Xe(e=>{e.setUTCMinutes(0,0,0)},(e,t)=>{e.setTime(+e+t*gr)},(e,t)=>(t-e)/gr,e=>e.getUTCHours());tu.range;const _o=Xe(e=>e.setHours(0,0,0,0),(e,t)=>e.setDate(e.getDate()+t),(e,t)=>(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*on)/$r,e=>e.getDate()-1);_o.range;const s0=Xe(e=>{e.setUTCHours(0,0,0,0)},(e,t)=>{e.setUTCDate(e.getUTCDate()+t)},(e,t)=>(t-e)/$r,e=>e.getUTCDate()-1);s0.range;const u0=Xe(e=>{e.setUTCHours(0,0,0,0)},(e,t)=>{e.setUTCDate(e.getUTCDate()+t)},(e,t)=>(t-e)/$r,e=>Math.floor(e/$r));u0.range;function So(e){return Xe(t=>{t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},(t,n)=>{t.setDate(t.getDate()+n*7)},(t,n)=>(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*on)/Fy)}const Ea=So(0),Es=So(1),K_=So(2),Q_=So(3),fo=So(4),Z_=So(5),J_=So(6);Ea.range;Es.range;K_.range;Q_.range;fo.range;Z_.range;J_.range;function Mo(e){return Xe(t=>{t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},(t,n)=>{t.setUTCDate(t.getUTCDate()+n*7)},(t,n)=>(n-t)/Fy)}const ka=Mo(0),ks=Mo(1),e7=Mo(2),t7=Mo(3),ho=Mo(4),n7=Mo(5),r7=Mo(6);ka.range;ks.range;e7.range;t7.range;ho.range;n7.range;r7.range;const nu=Xe(e=>{e.setDate(1),e.setHours(0,0,0,0)},(e,t)=>{e.setMonth(e.getMonth()+t)},(e,t)=>t.getMonth()-e.getMonth()+(t.getFullYear()-e.getFullYear())*12,e=>e.getMonth());nu.range;const ru=Xe(e=>{e.setUTCDate(1),e.setUTCHours(0,0,0,0)},(e,t)=>{e.setUTCMonth(e.getUTCMonth()+t)},(e,t)=>t.getUTCMonth()-e.getUTCMonth()+(t.getUTCFullYear()-e.getUTCFullYear())*12,e=>e.getUTCMonth());ru.range;const Cn=Xe(e=>{e.setMonth(0,1),e.setHours(0,0,0,0)},(e,t)=>{e.setFullYear(e.getFullYear()+t)},(e,t)=>t.getFullYear()-e.getFullYear(),e=>e.getFullYear());Cn.every=e=>!isFinite(e=Math.floor(e))||!(e>0)?null:Xe(t=>{t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},(t,n)=>{t.setFullYear(t.getFullYear()+n*e)});Cn.range;const En=Xe(e=>{e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},(e,t)=>{e.setUTCFullYear(e.getUTCFullYear()+t)},(e,t)=>t.getUTCFullYear()-e.getUTCFullYear(),e=>e.getUTCFullYear());En.every=e=>!isFinite(e=Math.floor(e))||!(e>0)?null:Xe(t=>{t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},(t,n)=>{t.setUTCFullYear(t.getUTCFullYear()+n*e)});En.range;function i7(e,t,n,r,i,o){const a=[[bn,1,mr],[bn,5,5*mr],[bn,15,15*mr],[bn,30,30*mr],[o,1,on],[o,5,5*on],[o,15,15*on],[o,30,30*on],[i,1,gr],[i,3,3*gr],[i,6,6*gr],[i,12,12*gr],[r,1,$r],[r,2,2*$r],[n,1,Fy],[t,1,Eb],[t,3,3*Eb],[e,1,tp]];function l(u,c,f){const d=c<u;d&&([u,c]=[c,u]);const h=f&&typeof f.range=="function"?f:s(u,c,f),m=h?h.range(u,+c+1):[];return d?m.reverse():m}function s(u,c,f){const d=Math.abs(c-u)/f,h=e0(([,,w])=>w).right(a,d);if(h===a.length)return e.every(e1(u/tp,c/tp,f));if(h===0)return kf.every(Math.max(e1(u,c,f),1));const[m,p]=a[d/a[h-1][2]<a[h][2]/d?h-1:h];return m.every(p)}return[l,s]}const[qO,YO]=i7(En,ru,ka,u0,tu,Js),[XO,GO]=i7(Cn,nu,Ea,_o,eu,Zs);function np(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function rp(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function hl(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}function KO(e){var t=e.dateTime,n=e.date,r=e.time,i=e.periods,o=e.days,a=e.shortDays,l=e.months,s=e.shortMonths,u=pl(i),c=ml(i),f=pl(o),d=ml(o),h=pl(a),m=ml(a),p=pl(l),w=ml(l),y=pl(s),g=ml(s),v={a:z,A:T,b:R,B:A,c:null,d:Nb,e:Nb,f:wD,g:$D,G:RD,H:gD,I:yD,j:vD,L:o7,m:bD,M:xD,p:L,q:H,Q:Lb,s:Ob,S:_D,u:SD,U:MD,V:CD,w:ED,W:kD,x:null,X:null,y:TD,Y:PD,Z:ND,"%":Ib},b={a:G,A:J,b:te,B:Z,c:null,d:Ab,e:Ab,f:OD,g:qD,G:XD,H:AD,I:ID,j:LD,L:l7,m:DD,M:zD,p:B,q:j,Q:Lb,s:Ob,S:FD,u:BD,U:HD,V:UD,w:WD,W:jD,x:null,X:null,y:VD,Y:YD,Z:GD,"%":Ib},_={a:$,A:E,b:U,B:D,c:N,d:Pb,e:Pb,f:dD,g:$b,G:Tb,H:Rb,I:Rb,j:sD,L:fD,m:lD,M:uD,p:k,q:aD,Q:pD,s:mD,S:cD,u:tD,U:nD,V:rD,w:eD,W:iD,x:P,X:I,y:$b,Y:Tb,Z:oD,"%":hD};v.x=M(n,v),v.X=M(r,v),v.c=M(t,v),b.x=M(n,b),b.X=M(r,b),b.c=M(t,b);function M(F,V){return function(X){var O=[],le=-1,ne=0,ge=F.length,Se,je,Dr;for(X instanceof Date||(X=new Date(+X));++le<ge;)F.charCodeAt(le)===37&&(O.push(F.slice(ne,le)),(je=kb[Se=F.charAt(++le)])!=null?Se=F.charAt(++le):je=Se==="e"?" ":"0",(Dr=V[Se])&&(Se=Dr(X,je)),O.push(Se),ne=le+1);return O.push(F.slice(ne,le)),O.join("")}}function S(F,V){return function(X){var O=hl(1900,void 0,1),le=C(O,F,X+="",0),ne,ge;if(le!=X.length)return null;if("Q"in O)return new Date(O.Q);if("s"in O)return new Date(O.s*1e3+("L"in O?O.L:0));if(V&&!("Z"in O)&&(O.Z=0),"p"in O&&(O.H=O.H%12+O.p*12),O.m===void 0&&(O.m="q"in O?O.q:0),"V"in O){if(O.V<1||O.V>53)return null;"w"in O||(O.w=1),"Z"in O?(ne=rp(hl(O.y,0,1)),ge=ne.getUTCDay(),ne=ge>4||ge===0?ks.ceil(ne):ks(ne),ne=s0.offset(ne,(O.V-1)*7),O.y=ne.getUTCFullYear(),O.m=ne.getUTCMonth(),O.d=ne.getUTCDate()+(O.w+6)%7):(ne=np(hl(O.y,0,1)),ge=ne.getDay(),ne=ge>4||ge===0?Es.ceil(ne):Es(ne),ne=_o.offset(ne,(O.V-1)*7),O.y=ne.getFullYear(),O.m=ne.getMonth(),O.d=ne.getDate()+(O.w+6)%7)}else("W"in O||"U"in O)&&("w"in O||(O.w="u"in O?O.u%7:"W"in O?1:0),ge="Z"in O?rp(hl(O.y,0,1)).getUTCDay():np(hl(O.y,0,1)).getDay(),O.m=0,O.d="W"in O?(O.w+6)%7+O.W*7-(ge+5)%7:O.w+O.U*7-(ge+6)%7);return"Z"in O?(O.H+=O.Z/100|0,O.M+=O.Z%100,rp(O)):np(O)}}function C(F,V,X,O){for(var le=0,ne=V.length,ge=X.length,Se,je;le<ne;){if(O>=ge)return-1;if(Se=V.charCodeAt(le++),Se===37){if(Se=V.charAt(le++),je=_[Se in kb?V.charAt(le++):Se],!je||(O=je(F,X,O))<0)return-1}else if(Se!=X.charCodeAt(O++))return-1}return O}function k(F,V,X){var O=u.exec(V.slice(X));return O?(F.p=c.get(O[0].toLowerCase()),X+O[0].length):-1}function $(F,V,X){var O=h.exec(V.slice(X));return O?(F.w=m.get(O[0].toLowerCase()),X+O[0].length):-1}function E(F,V,X){var O=f.exec(V.slice(X));return O?(F.w=d.get(O[0].toLowerCase()),X+O[0].length):-1}function U(F,V,X){var O=y.exec(V.slice(X));return O?(F.m=g.get(O[0].toLowerCase()),X+O[0].length):-1}function D(F,V,X){var O=p.exec(V.slice(X));return O?(F.m=w.get(O[0].toLowerCase()),X+O[0].length):-1}function N(F,V,X){return C(F,t,V,X)}function P(F,V,X){return C(F,n,V,X)}function I(F,V,X){return C(F,r,V,X)}function z(F){return a[F.getDay()]}function T(F){return o[F.getDay()]}function R(F){return s[F.getMonth()]}function A(F){return l[F.getMonth()]}function L(F){return i[+(F.getHours()>=12)]}function H(F){return 1+~~(F.getMonth()/3)}function G(F){return a[F.getUTCDay()]}function J(F){return o[F.getUTCDay()]}function te(F){return s[F.getUTCMonth()]}function Z(F){return l[F.getUTCMonth()]}function B(F){return i[+(F.getUTCHours()>=12)]}function j(F){return 1+~~(F.getUTCMonth()/3)}return{format:function(F){var V=M(F+="",v);return V.toString=function(){return F},V},parse:function(F){var V=S(F+="",!1);return V.toString=function(){return F},V},utcFormat:function(F){var V=M(F+="",b);return V.toString=function(){return F},V},utcParse:function(F){var V=S(F+="",!0);return V.toString=function(){return F},V}}}var kb={"-":"",_:" ",0:"0"},nt=/^\s*\d+/,QO=/^%/,ZO=/[\\^$*+?|[\]().{}]/g;function me(e,t,n){var r=e<0?"-":"",i=(r?-e:e)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(t)+i:i)}function JO(e){return e.replace(ZO,"\\$&")}function pl(e){return new RegExp("^(?:"+e.map(JO).join("|")+")","i")}function ml(e){return new Map(e.map((t,n)=>[t.toLowerCase(),n]))}function eD(e,t,n){var r=nt.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function tD(e,t,n){var r=nt.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function nD(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function rD(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function iD(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function Tb(e,t,n){var r=nt.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function $b(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function oD(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function aD(e,t,n){var r=nt.exec(t.slice(n,n+1));return r?(e.q=r[0]*3-3,n+r[0].length):-1}function lD(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function Pb(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function sD(e,t,n){var r=nt.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function Rb(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function uD(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function cD(e,t,n){var r=nt.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function fD(e,t,n){var r=nt.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function dD(e,t,n){var r=nt.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function hD(e,t,n){var r=QO.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function pD(e,t,n){var r=nt.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function mD(e,t,n){var r=nt.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function Nb(e,t){return me(e.getDate(),t,2)}function gD(e,t){return me(e.getHours(),t,2)}function yD(e,t){return me(e.getHours()%12||12,t,2)}function vD(e,t){return me(1+_o.count(Cn(e),e),t,3)}function o7(e,t){return me(e.getMilliseconds(),t,3)}function wD(e,t){return o7(e,t)+"000"}function bD(e,t){return me(e.getMonth()+1,t,2)}function xD(e,t){return me(e.getMinutes(),t,2)}function _D(e,t){return me(e.getSeconds(),t,2)}function SD(e){var t=e.getDay();return t===0?7:t}function MD(e,t){return me(Ea.count(Cn(e)-1,e),t,2)}function a7(e){var t=e.getDay();return t>=4||t===0?fo(e):fo.ceil(e)}function CD(e,t){return e=a7(e),me(fo.count(Cn(e),e)+(Cn(e).getDay()===4),t,2)}function ED(e){return e.getDay()}function kD(e,t){return me(Es.count(Cn(e)-1,e),t,2)}function TD(e,t){return me(e.getFullYear()%100,t,2)}function $D(e,t){return e=a7(e),me(e.getFullYear()%100,t,2)}function PD(e,t){return me(e.getFullYear()%1e4,t,4)}function RD(e,t){var n=e.getDay();return e=n>=4||n===0?fo(e):fo.ceil(e),me(e.getFullYear()%1e4,t,4)}function ND(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+me(t/60|0,"0",2)+me(t%60,"0",2)}function Ab(e,t){return me(e.getUTCDate(),t,2)}function AD(e,t){return me(e.getUTCHours(),t,2)}function ID(e,t){return me(e.getUTCHours()%12||12,t,2)}function LD(e,t){return me(1+s0.count(En(e),e),t,3)}function l7(e,t){return me(e.getUTCMilliseconds(),t,3)}function OD(e,t){return l7(e,t)+"000"}function DD(e,t){return me(e.getUTCMonth()+1,t,2)}function zD(e,t){return me(e.getUTCMinutes(),t,2)}function FD(e,t){return me(e.getUTCSeconds(),t,2)}function BD(e){var t=e.getUTCDay();return t===0?7:t}function HD(e,t){return me(ka.count(En(e)-1,e),t,2)}function s7(e){var t=e.getUTCDay();return t>=4||t===0?ho(e):ho.ceil(e)}function UD(e,t){return e=s7(e),me(ho.count(En(e),e)+(En(e).getUTCDay()===4),t,2)}function WD(e){return e.getUTCDay()}function jD(e,t){return me(ks.count(En(e)-1,e),t,2)}function VD(e,t){return me(e.getUTCFullYear()%100,t,2)}function qD(e,t){return e=s7(e),me(e.getUTCFullYear()%100,t,2)}function YD(e,t){return me(e.getUTCFullYear()%1e4,t,4)}function XD(e,t){var n=e.getUTCDay();return e=n>=4||n===0?ho(e):ho.ceil(e),me(e.getUTCFullYear()%1e4,t,4)}function GD(){return"+0000"}function Ib(){return"%"}function Lb(e){return+e}function Ob(e){return Math.floor(+e/1e3)}var No,By,iu;KD({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function KD(e){return No=KO(e),By=No.format,No.parse,iu=No.utcFormat,No.utcParse,No}function QD(e){return new Date(e)}function ZD(e){return e instanceof Date?+e:+new Date(+e)}function Hy(e,t,n,r,i,o,a,l,s,u){var c=D_(),f=c.invert,d=c.domain,h=u(".%L"),m=u(":%S"),p=u("%I:%M"),w=u("%I %p"),y=u("%a %d"),g=u("%b %d"),v=u("%B"),b=u("%Y");function _(M){return(s(M)<M?h:l(M)<M?m:a(M)<M?p:o(M)<M?w:r(M)<M?i(M)<M?y:g:n(M)<M?v:b)(M)}return c.invert=function(M){return new Date(f(M))},c.domain=function(M){return arguments.length?d(Array.from(M,ZD)):d().map(QD)},c.ticks=function(M){var S=d();return e(S[0],S[S.length-1],M??10)},c.tickFormat=function(M,S){return S==null?_:u(S)},c.nice=function(M){var S=d();return(!M||typeof M.range!="function")&&(M=t(S[0],S[S.length-1],M??10)),M?d(H_(S,M)):c},c.copy=function(){return Ks(c,Hy(e,t,n,r,i,o,a,l,s,u))},c}function JD(){return tr.apply(Hy(XO,GO,Cn,nu,Ea,_o,eu,Zs,bn,By).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function ez(){return tr.apply(Hy(qO,YO,En,ru,ka,s0,tu,Js,bn,iu).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function c0(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function f0(){var e=0,t=.5,n=1,r=1,i,o,a,l,s,u=rn,c,f=!1,d;function h(p){return isNaN(p=+p)?d:(p=.5+((p=+c(p))-o)*(r*p<r*o?l:s),u(f?Math.max(0,Math.min(1,p)):p))}h.domain=function(p){return arguments.length?([e,t,n]=p,i=c(e=+e),o=c(t=+t),a=c(n=+n),l=i===o?0:.5/(o-i),s=o===a?0:.5/(a-o),r=o<i?-1:1,h):[e,t,n]},h.clamp=function(p){return arguments.length?(f=!!p,h):f},h.interpolator=function(p){return arguments.length?(u=p,h):u};function m(p){return function(w){var y,g,v;return arguments.length?([y,g,v]=w,u=a0(p,[y,g,v]),h):[u(0),u(.5),u(1)]}}return h.range=m(Gs),h.rangeRound=m(Ly),h.unknown=function(p){return arguments.length?(d=p,h):d},function(p){return c=p,i=p(e),o=p(t),a=p(n),l=i===o?0:.5/(o-i),s=o===a?0:.5/(a-o),r=o<i?-1:1,h}}function u7(){var e=Qs(f0()(rn));return e.copy=function(){return c0(e,u7())},n0.apply(e,arguments)}function c7(){var e=U_(f0()).domain([.1,1,10]);return e.copy=function(){return c0(e,c7()).base(e.base())},n0.apply(e,arguments)}function f7(){var e=j_(f0());return e.copy=function(){return c0(e,f7()).constant(e.constant())},n0.apply(e,arguments)}function d7(){var e=q_(f0());return e.copy=function(){return c0(e,d7()).exponent(e.exponent())},n0.apply(e,arguments)}function tz(e){return e}var nz=3,Db=1e-6;function rz(e){return"translate("+e+",0)"}function iz(e){return t=>+e(t)}function oz(e,t){return t=Math.max(0,e.bandwidth()-t*2)/2,e.round()&&(t=Math.round(t)),n=>+e(n)+t}function az(){return!this.__axis}function lz(e,t){var n=[],r=null,i=null,o=6,a=6,l=3,s=typeof window<"u"&&window.devicePixelRatio>1?0:.5,u=1,c="y",f=rz;function d(h){var m=r??(t.ticks?t.ticks.apply(t,n):t.domain()),p=i??(t.tickFormat?t.tickFormat.apply(t,n):tz),w=Math.max(o,0)+l,y=t.range(),g=+y[0]+s,v=+y[y.length-1]+s,b=(t.bandwidth?oz:iz)(t.copy(),s),_=h.selection?h.selection():h,M=_.selectAll(".domain").data([null]),S=_.selectAll(".tick").data(m,t).order(),C=S.exit(),k=S.enter().append("g").attr("class","tick"),$=S.select("line"),E=S.select("text");M=M.merge(M.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),S=S.merge(k),$=$.merge(k.append("line").attr("stroke","currentColor").attr(c+"2",u*o)),E=E.merge(k.append("text").attr("fill","currentColor").attr(c,u*w).attr("dy","0.71em")),h!==_&&(M=M.transition(h),S=S.transition(h),$=$.transition(h),E=E.transition(h),C=C.transition(h).attr("opacity",Db).attr("transform",function(U){return isFinite(U=b(U))?f(U+s):this.getAttribute("transform")}),k.attr("opacity",Db).attr("transform",function(U){var D=this.parentNode.__axis;return f((D&&isFinite(D=D(U))?D:b(U))+s)})),C.remove(),M.attr("d",a?"M"+g+","+u*a+"V"+s+"H"+v+"V"+u*a:"M"+g+","+s+"H"+v),S.attr("opacity",1).attr("transform",function(U){return f(b(U)+s)}),$.attr(c+"2",u*o),E.attr(c,u*w).text(p),_.filter(az).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor","middle"),_.each(function(){this.__axis=b})}return d.scale=function(h){return arguments.length?(t=h,d):t},d.ticks=function(){return n=Array.from(arguments),d},d.tickArguments=function(h){return arguments.length?(n=h==null?[]:Array.from(h),d):n.slice()},d.tickValues=function(h){return arguments.length?(r=h==null?null:Array.from(h),d):r&&r.slice()},d.tickFormat=function(h){return arguments.length?(i=h,d):i},d.tickSize=function(h){return arguments.length?(o=a=+h,d):o},d.tickSizeInner=function(h){return arguments.length?(o=+h,d):o},d.tickSizeOuter=function(h){return arguments.length?(a=+h,d):a},d.tickPadding=function(h){return arguments.length?(l=+h,d):l},d.offset=function(h){return arguments.length?(s=+h,d):s},d}function sz(e){return lz(nz,e)}var uz={value:()=>{}};function h7(){for(var e=0,t=arguments.length,n={},r;e<t;++e){if(!(r=arguments[e]+"")||r in n||/[\s.]/.test(r))throw new Error("illegal type: "+r);n[r]=[]}return new Ec(n)}function Ec(e){this._=e}function cz(e,t){return e.trim().split(/^|\s+/).map(function(n){var r="",i=n.indexOf(".");if(i>=0&&(r=n.slice(i+1),n=n.slice(0,i)),n&&!t.hasOwnProperty(n))throw new Error("unknown type: "+n);return{type:n,name:r}})}Ec.prototype=h7.prototype={constructor:Ec,on:function(e,t){var n=this._,r=cz(e+"",n),i,o=-1,a=r.length;if(arguments.length<2){for(;++o<a;)if((i=(e=r[o]).type)&&(i=fz(n[i],e.name)))return i;return}if(t!=null&&typeof t!="function")throw new Error("invalid callback: "+t);for(;++o<a;)if(i=(e=r[o]).type)n[i]=zb(n[i],e.name,t);else if(t==null)for(i in n)n[i]=zb(n[i],e.name,null);return this},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new Ec(e)},call:function(e,t){if((i=arguments.length-2)>0)for(var n=new Array(i),r=0,i,o;r<i;++r)n[r]=arguments[r+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(o=this._[e],r=0,i=o.length;r<i;++r)o[r].value.apply(t,n)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],i=0,o=r.length;i<o;++i)r[i].value.apply(t,n)}};function fz(e,t){for(var n=0,r=e.length,i;n<r;++n)if((i=e[n]).name===t)return i.value}function zb(e,t,n){for(var r=0,i=e.length;r<i;++r)if(e[r].name===t){e[r]=uz,e=e.slice(0,r).concat(e.slice(r+1));break}return n!=null&&e.push({name:t,value:n}),e}var f1="http://www.w3.org/1999/xhtml";const Ta={svg:"http://www.w3.org/2000/svg",xhtml:f1,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function d0(e){var t=e+="",n=t.indexOf(":");return n>=0&&(t=e.slice(0,n))!=="xmlns"&&(e=e.slice(n+1)),Ta.hasOwnProperty(t)?{space:Ta[t],local:e}:e}function dz(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===f1&&t.documentElement.namespaceURI===f1?t.createElement(e):t.createElementNS(n,e)}}function hz(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function h0(e){var t=d0(e);return(t.local?hz:dz)(t)}function pz(){}function Uy(e){return e==null?pz:function(){return this.querySelector(e)}}function mz(e){typeof e!="function"&&(e=Uy(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o=t[i],a=o.length,l=r[i]=new Array(a),s,u,c=0;c<a;++c)(s=o[c])&&(u=e.call(s,s.__data__,c,o))&&("__data__"in s&&(u.__data__=s.__data__),l[c]=u);return new qt(r,this._parents)}function gz(e){return e==null?[]:Array.isArray(e)?e:Array.from(e)}function yz(){return[]}function p7(e){return e==null?yz:function(){return this.querySelectorAll(e)}}function vz(e){return function(){return gz(e.apply(this,arguments))}}function wz(e){typeof e=="function"?e=vz(e):e=p7(e);for(var t=this._groups,n=t.length,r=[],i=[],o=0;o<n;++o)for(var a=t[o],l=a.length,s,u=0;u<l;++u)(s=a[u])&&(r.push(e.call(s,s.__data__,u,a)),i.push(s));return new qt(r,i)}function m7(e){return function(){return this.matches(e)}}function g7(e){return function(t){return t.matches(e)}}var bz=Array.prototype.find;function xz(e){return function(){return bz.call(this.children,e)}}function _z(){return this.firstElementChild}function Sz(e){return this.select(e==null?_z:xz(typeof e=="function"?e:g7(e)))}var Mz=Array.prototype.filter;function Cz(){return Array.from(this.children)}function Ez(e){return function(){return Mz.call(this.children,e)}}function kz(e){return this.selectAll(e==null?Cz:Ez(typeof e=="function"?e:g7(e)))}function Tz(e){typeof e!="function"&&(e=m7(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o=t[i],a=o.length,l=r[i]=[],s,u=0;u<a;++u)(s=o[u])&&e.call(s,s.__data__,u,o)&&l.push(s);return new qt(r,this._parents)}function y7(e){return new Array(e.length)}function $z(){return new qt(this._enter||this._groups.map(y7),this._parents)}function Tf(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}Tf.prototype={constructor:Tf,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};function Pz(e){return function(){return e}}function Rz(e,t,n,r,i,o){for(var a=0,l,s=t.length,u=o.length;a<u;++a)(l=t[a])?(l.__data__=o[a],r[a]=l):n[a]=new Tf(e,o[a]);for(;a<s;++a)(l=t[a])&&(i[a]=l)}function Nz(e,t,n,r,i,o,a){var l,s,u=new Map,c=t.length,f=o.length,d=new Array(c),h;for(l=0;l<c;++l)(s=t[l])&&(d[l]=h=a.call(s,s.__data__,l,t)+"",u.has(h)?i[l]=s:u.set(h,s));for(l=0;l<f;++l)h=a.call(e,o[l],l,o)+"",(s=u.get(h))?(r[l]=s,s.__data__=o[l],u.delete(h)):n[l]=new Tf(e,o[l]);for(l=0;l<c;++l)(s=t[l])&&u.get(d[l])===s&&(i[l]=s)}function Az(e){return e.__data__}function Iz(e,t){if(!arguments.length)return Array.from(this,Az);var n=t?Nz:Rz,r=this._parents,i=this._groups;typeof e!="function"&&(e=Pz(e));for(var o=i.length,a=new Array(o),l=new Array(o),s=new Array(o),u=0;u<o;++u){var c=r[u],f=i[u],d=f.length,h=Lz(e.call(c,c&&c.__data__,u,r)),m=h.length,p=l[u]=new Array(m),w=a[u]=new Array(m),y=s[u]=new Array(d);n(c,f,p,w,y,h,t);for(var g=0,v=0,b,_;g<m;++g)if(b=p[g]){for(g>=v&&(v=g+1);!(_=w[v])&&++v<m;);b._next=_||null}}return a=new qt(a,r),a._enter=l,a._exit=s,a}function Lz(e){return typeof e=="object"&&"length"in e?e:Array.from(e)}function Oz(){return new qt(this._exit||this._groups.map(y7),this._parents)}function Dz(e,t,n){var r=this.enter(),i=this,o=this.exit();return typeof e=="function"?(r=e(r),r&&(r=r.selection())):r=r.append(e+""),t!=null&&(i=t(i),i&&(i=i.selection())),n==null?o.remove():n(o),r&&i?r.merge(i).order():i}function zz(e){for(var t=e.selection?e.selection():e,n=this._groups,r=t._groups,i=n.length,o=r.length,a=Math.min(i,o),l=new Array(i),s=0;s<a;++s)for(var u=n[s],c=r[s],f=u.length,d=l[s]=new Array(f),h,m=0;m<f;++m)(h=u[m]||c[m])&&(d[m]=h);for(;s<i;++s)l[s]=n[s];return new qt(l,this._parents)}function Fz(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r=e[t],i=r.length-1,o=r[i],a;--i>=0;)(a=r[i])&&(o&&a.compareDocumentPosition(o)^4&&o.parentNode.insertBefore(a,o),o=a);return this}function Bz(e){e||(e=Hz);function t(f,d){return f&&d?e(f.__data__,d.__data__):!f-!d}for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a=n[o],l=a.length,s=i[o]=new Array(l),u,c=0;c<l;++c)(u=a[c])&&(s[c]=u);s.sort(t)}return new qt(i,this._parents).order()}function Hz(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function Uz(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this}function Wz(){return Array.from(this)}function jz(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null}function Vz(){let e=0;for(const t of this)++e;return e}function qz(){return!this.node()}function Yz(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var i=t[n],o=0,a=i.length,l;o<a;++o)(l=i[o])&&e.call(l,l.__data__,o,i);return this}function Xz(e){return function(){this.removeAttribute(e)}}function Gz(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Kz(e,t){return function(){this.setAttribute(e,t)}}function Qz(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function Zz(e,t){return function(){var n=t.apply(this,arguments);n==null?this.removeAttribute(e):this.setAttribute(e,n)}}function Jz(e,t){return function(){var n=t.apply(this,arguments);n==null?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}function eF(e,t){var n=d0(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((t==null?n.local?Gz:Xz:typeof t=="function"?n.local?Jz:Zz:n.local?Qz:Kz)(n,t))}function v7(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function tF(e){return function(){this.style.removeProperty(e)}}function nF(e,t,n){return function(){this.style.setProperty(e,t,n)}}function rF(e,t,n){return function(){var r=t.apply(this,arguments);r==null?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function iF(e,t,n){return arguments.length>1?this.each((t==null?tF:typeof t=="function"?rF:nF)(e,t,n??"")):$a(this.node(),e)}function $a(e,t){return e.style.getPropertyValue(t)||v7(e).getComputedStyle(e,null).getPropertyValue(t)}function oF(e){return function(){delete this[e]}}function aF(e,t){return function(){this[e]=t}}function lF(e,t){return function(){var n=t.apply(this,arguments);n==null?delete this[e]:this[e]=n}}function sF(e,t){return arguments.length>1?this.each((t==null?oF:typeof t=="function"?lF:aF)(e,t)):this.node()[e]}function w7(e){return e.trim().split(/^|\s+/)}function Wy(e){return e.classList||new b7(e)}function b7(e){this._node=e,this._names=w7(e.getAttribute("class")||"")}b7.prototype={add:function(e){var t=this._names.indexOf(e);t<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function x7(e,t){for(var n=Wy(e),r=-1,i=t.length;++r<i;)n.add(t[r])}function _7(e,t){for(var n=Wy(e),r=-1,i=t.length;++r<i;)n.remove(t[r])}function uF(e){return function(){x7(this,e)}}function cF(e){return function(){_7(this,e)}}function fF(e,t){return function(){(t.apply(this,arguments)?x7:_7)(this,e)}}function dF(e,t){var n=w7(e+"");if(arguments.length<2){for(var r=Wy(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each((typeof t=="function"?fF:t?uF:cF)(n,t))}function hF(){this.textContent=""}function pF(e){return function(){this.textContent=e}}function mF(e){return function(){var t=e.apply(this,arguments);this.textContent=t??""}}function gF(e){return arguments.length?this.each(e==null?hF:(typeof e=="function"?mF:pF)(e)):this.node().textContent}function yF(){this.innerHTML=""}function vF(e){return function(){this.innerHTML=e}}function wF(e){return function(){var t=e.apply(this,arguments);this.innerHTML=t??""}}function bF(e){return arguments.length?this.each(e==null?yF:(typeof e=="function"?wF:vF)(e)):this.node().innerHTML}function xF(){this.nextSibling&&this.parentNode.appendChild(this)}function _F(){return this.each(xF)}function SF(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function MF(){return this.each(SF)}function CF(e){var t=typeof e=="function"?e:h0(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})}function EF(){return null}function kF(e,t){var n=typeof e=="function"?e:h0(e),r=t==null?EF:typeof t=="function"?t:Uy(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})}function TF(){var e=this.parentNode;e&&e.removeChild(this)}function $F(){return this.each(TF)}function PF(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function RF(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function NF(e){return this.select(e?RF:PF)}function AF(e){return arguments.length?this.property("__data__",e):this.node().__data__}function IF(e){return function(t){e.call(this,t,this.__data__)}}function LF(e){return e.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");return r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),{type:t,name:n}})}function OF(e){return function(){var t=this.__on;if(t){for(var n=0,r=-1,i=t.length,o;n<i;++n)o=t[n],(!e.type||o.type===e.type)&&o.name===e.name?this.removeEventListener(o.type,o.listener,o.options):t[++r]=o;++r?t.length=r:delete this.__on}}}function DF(e,t,n){return function(){var r=this.__on,i,o=IF(t);if(r){for(var a=0,l=r.length;a<l;++a)if((i=r[a]).type===e.type&&i.name===e.name){this.removeEventListener(i.type,i.listener,i.options),this.addEventListener(i.type,i.listener=o,i.options=n),i.value=t;return}}this.addEventListener(e.type,o,n),i={type:e.type,name:e.name,value:t,listener:o,options:n},r?r.push(i):this.__on=[i]}}function zF(e,t,n){var r=LF(e+""),i,o=r.length,a;if(arguments.length<2){var l=this.node().__on;if(l){for(var s=0,u=l.length,c;s<u;++s)for(i=0,c=l[s];i<o;++i)if((a=r[i]).type===c.type&&a.name===c.name)return c.value}return}for(l=t?DF:OF,i=0;i<o;++i)this.each(l(r[i],t,n));return this}function S7(e,t,n){var r=v7(e),i=r.CustomEvent;typeof i=="function"?i=new i(t,n):(i=r.document.createEvent("Event"),n?(i.initEvent(t,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(t,!1,!1)),e.dispatchEvent(i)}function FF(e,t){return function(){return S7(this,e,t)}}function BF(e,t){return function(){return S7(this,e,t.apply(this,arguments))}}function HF(e,t){return this.each((typeof t=="function"?BF:FF)(e,t))}function*UF(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],i=0,o=r.length,a;i<o;++i)(a=r[i])&&(yield a)}var M7=[null];function qt(e,t){this._groups=e,this._parents=t}function ou(){return new qt([[document.documentElement]],M7)}function WF(){return this}qt.prototype=ou.prototype={constructor:qt,select:mz,selectAll:wz,selectChild:Sz,selectChildren:kz,filter:Tz,data:Iz,enter:$z,exit:Oz,join:Dz,merge:zz,selection:WF,order:Fz,sort:Bz,call:Uz,nodes:Wz,node:jz,size:Vz,empty:qz,each:Yz,attr:eF,style:iF,property:sF,classed:dF,text:gF,html:bF,raise:_F,lower:MF,append:CF,insert:kF,remove:$F,clone:NF,datum:AF,on:zF,dispatch:HF,[Symbol.iterator]:UF};function fa(e){return typeof e=="string"?new qt([[document.querySelector(e)]],[document.documentElement]):new qt([[e]],M7)}function jF(e){let t;for(;t=e.sourceEvent;)e=t;return e}function VF(e,t){if(e=jF(e),t===void 0&&(t=e.currentTarget),t){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}if(t.getBoundingClientRect){var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]}}return[e.pageX,e.pageY]}var Pa=0,Cl=0,gl=0,C7=1e3,$f,El,Pf=0,po=0,p0=0,Ts=typeof performance=="object"&&performance.now?performance:Date,E7=typeof window=="object"&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function jy(){return po||(E7(qF),po=Ts.now()+p0)}function qF(){po=0}function Rf(){this._call=this._time=this._next=null}Rf.prototype=k7.prototype={constructor:Rf,restart:function(e,t,n){if(typeof e!="function")throw new TypeError("callback is not a function");n=(n==null?jy():+n)+(t==null?0:+t),!this._next&&El!==this&&(El?El._next=this:$f=this,El=this),this._call=e,this._time=n,d1()},stop:function(){this._call&&(this._call=null,this._time=1/0,d1())}};function k7(e,t,n){var r=new Rf;return r.restart(e,t,n),r}function YF(){jy(),++Pa;for(var e=$f,t;e;)(t=po-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Pa}function Fb(){po=(Pf=Ts.now())+p0,Pa=Cl=0;try{YF()}finally{Pa=0,GF(),po=0}}function XF(){var e=Ts.now(),t=e-Pf;t>C7&&(p0-=t,Pf=e)}function GF(){for(var e,t=$f,n,r=1/0;t;)t._call?(r>t._time&&(r=t._time),e=t,t=t._next):(n=t._next,t._next=null,t=e?e._next=n:$f=n);El=e,d1(r)}function d1(e){if(!Pa){Cl&&(Cl=clearTimeout(Cl));var t=e-po;t>24?(e<1/0&&(Cl=setTimeout(Fb,e-Ts.now()-p0)),gl&&(gl=clearInterval(gl))):(gl||(Pf=Ts.now(),gl=setInterval(XF,C7)),Pa=1,E7(Fb))}}function Bb(e,t,n){var r=new Rf;return t=t==null?0:+t,r.restart(i=>{r.stop(),e(i+t)},t,n),r}var KF=h7("start","end","cancel","interrupt"),QF=[],T7=0,Hb=1,h1=2,kc=3,Ub=4,p1=5,Tc=6;function m0(e,t,n,r,i,o){var a=e.__transition;if(!a)e.__transition={};else if(n in a)return;ZF(e,n,{name:t,index:r,group:i,on:KF,tween:QF,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:T7})}function Vy(e,t){var n=kn(e,t);if(n.state>T7)throw new Error("too late; already scheduled");return n}function nr(e,t){var n=kn(e,t);if(n.state>kc)throw new Error("too late; already running");return n}function kn(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function ZF(e,t,n){var r=e.__transition,i;r[t]=n,n.timer=k7(o,0,n.time);function o(u){n.state=Hb,n.timer.restart(a,n.delay,n.time),n.delay<=u&&a(u-n.delay)}function a(u){var c,f,d,h;if(n.state!==Hb)return s();for(c in r)if(h=r[c],h.name===n.name){if(h.state===kc)return Bb(a);h.state===Ub?(h.state=Tc,h.timer.stop(),h.on.call("interrupt",e,e.__data__,h.index,h.group),delete r[c]):+c<t&&(h.state=Tc,h.timer.stop(),h.on.call("cancel",e,e.__data__,h.index,h.group),delete r[c])}if(Bb(function(){n.state===kc&&(n.state=Ub,n.timer.restart(l,n.delay,n.time),l(u))}),n.state=h1,n.on.call("start",e,e.__data__,n.index,n.group),n.state===h1){for(n.state=kc,i=new Array(d=n.tween.length),c=0,f=-1;c<d;++c)(h=n.tween[c].value.call(e,e.__data__,n.index,n.group))&&(i[++f]=h);i.length=f+1}}function l(u){for(var c=u<n.duration?n.ease.call(null,u/n.duration):(n.timer.restart(s),n.state=p1,1),f=-1,d=i.length;++f<d;)i[f].call(e,c);n.state===p1&&(n.on.call("end",e,e.__data__,n.index,n.group),s())}function s(){n.state=Tc,n.timer.stop(),delete r[t];for(var u in r)return;delete e.__transition}}function JF(e,t){var n=e.__transition,r,i,o=!0,a;if(n){t=t==null?null:t+"";for(a in n){if((r=n[a]).name!==t){o=!1;continue}i=r.state>h1&&r.state<p1,r.state=Tc,r.timer.stop(),r.on.call(i?"interrupt":"cancel",e,e.__data__,r.index,r.group),delete n[a]}o&&delete e.__transition}}function eB(e){return this.each(function(){JF(this,e)})}function tB(e,t){var n,r;return function(){var i=nr(this,e),o=i.tween;if(o!==n){r=n=o;for(var a=0,l=r.length;a<l;++a)if(r[a].name===t){r=r.slice(),r.splice(a,1);break}}i.tween=r}}function nB(e,t,n){var r,i;if(typeof n!="function")throw new Error;return function(){var o=nr(this,e),a=o.tween;if(a!==r){i=(r=a).slice();for(var l={name:t,value:n},s=0,u=i.length;s<u;++s)if(i[s].name===t){i[s]=l;break}s===u&&i.push(l)}o.tween=i}}function rB(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r=kn(this.node(),n).tween,i=0,o=r.length,a;i<o;++i)if((a=r[i]).name===e)return a.value;return null}return this.each((t==null?tB:nB)(n,e,t))}function qy(e,t,n){var r=e._id;return e.each(function(){var i=nr(this,r);(i.value||(i.value={}))[t]=n.apply(this,arguments)}),function(i){return kn(i,r).value[t]}}function $7(e,t){var n;return(typeof t=="number"?mt:t instanceof uo?co:(n=uo(t))?(t=n,co):A_)(e,t)}function iB(e){return function(){this.removeAttribute(e)}}function oB(e){return function(){this.removeAttributeNS(e.space,e.local)}}function aB(e,t,n){var r,i=n+"",o;return function(){var a=this.getAttribute(e);return a===i?null:a===r?o:o=t(r=a,n)}}function lB(e,t,n){var r,i=n+"",o;return function(){var a=this.getAttributeNS(e.space,e.local);return a===i?null:a===r?o:o=t(r=a,n)}}function sB(e,t,n){var r,i,o;return function(){var a,l=n(this),s;return l==null?void this.removeAttribute(e):(a=this.getAttribute(e),s=l+"",a===s?null:a===r&&s===i?o:(i=s,o=t(r=a,l)))}}function uB(e,t,n){var r,i,o;return function(){var a,l=n(this),s;return l==null?void this.removeAttributeNS(e.space,e.local):(a=this.getAttributeNS(e.space,e.local),s=l+"",a===s?null:a===r&&s===i?o:(i=s,o=t(r=a,l)))}}function cB(e,t){var n=d0(e),r=n==="transform"?yO:$7;return this.attrTween(e,typeof t=="function"?(n.local?uB:sB)(n,r,qy(this,"attr."+e,t)):t==null?(n.local?oB:iB)(n):(n.local?lB:aB)(n,r,t))}function fB(e,t){return function(n){this.setAttribute(e,t.call(this,n))}}function dB(e,t){return function(n){this.setAttributeNS(e.space,e.local,t.call(this,n))}}function hB(e,t){var n,r;function i(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&dB(e,o)),n}return i._value=t,i}function pB(e,t){var n,r;function i(){var o=t.apply(this,arguments);return o!==r&&(n=(r=o)&&fB(e,o)),n}return i._value=t,i}function mB(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(t==null)return this.tween(n,null);if(typeof t!="function")throw new Error;var r=d0(e);return this.tween(n,(r.local?hB:pB)(r,t))}function gB(e,t){return function(){Vy(this,e).delay=+t.apply(this,arguments)}}function yB(e,t){return t=+t,function(){Vy(this,e).delay=t}}function vB(e){var t=this._id;return arguments.length?this.each((typeof e=="function"?gB:yB)(t,e)):kn(this.node(),t).delay}function wB(e,t){return function(){nr(this,e).duration=+t.apply(this,arguments)}}function bB(e,t){return t=+t,function(){nr(this,e).duration=t}}function xB(e){var t=this._id;return arguments.length?this.each((typeof e=="function"?wB:bB)(t,e)):kn(this.node(),t).duration}function _B(e,t){if(typeof t!="function")throw new Error;return function(){nr(this,e).ease=t}}function SB(e){var t=this._id;return arguments.length?this.each(_B(t,e)):kn(this.node(),t).ease}function MB(e,t){return function(){var n=t.apply(this,arguments);if(typeof n!="function")throw new Error;nr(this,e).ease=n}}function CB(e){if(typeof e!="function")throw new Error;return this.each(MB(this._id,e))}function EB(e){typeof e!="function"&&(e=m7(e));for(var t=this._groups,n=t.length,r=new Array(n),i=0;i<n;++i)for(var o=t[i],a=o.length,l=r[i]=[],s,u=0;u<a;++u)(s=o[u])&&e.call(s,s.__data__,u,o)&&l.push(s);return new Pr(r,this._parents,this._name,this._id)}function kB(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,i=n.length,o=Math.min(r,i),a=new Array(r),l=0;l<o;++l)for(var s=t[l],u=n[l],c=s.length,f=a[l]=new Array(c),d,h=0;h<c;++h)(d=s[h]||u[h])&&(f[h]=d);for(;l<r;++l)a[l]=t[l];return new Pr(a,this._parents,this._name,this._id)}function TB(e){return(e+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||t==="start"})}function $B(e,t,n){var r,i,o=TB(t)?Vy:nr;return function(){var a=o(this,e),l=a.on;l!==r&&(i=(r=l).copy()).on(t,n),a.on=i}}function PB(e,t){var n=this._id;return arguments.length<2?kn(this.node(),n).on.on(e):this.each($B(n,e,t))}function RB(e){return function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}}function NB(){return this.on("end.remove",RB(this._id))}function AB(e){var t=this._name,n=this._id;typeof e!="function"&&(e=Uy(e));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var l=r[a],s=l.length,u=o[a]=new Array(s),c,f,d=0;d<s;++d)(c=l[d])&&(f=e.call(c,c.__data__,d,l))&&("__data__"in c&&(f.__data__=c.__data__),u[d]=f,m0(u[d],t,n,d,u,kn(c,n)));return new Pr(o,this._parents,t,n)}function IB(e){var t=this._name,n=this._id;typeof e!="function"&&(e=p7(e));for(var r=this._groups,i=r.length,o=[],a=[],l=0;l<i;++l)for(var s=r[l],u=s.length,c,f=0;f<u;++f)if(c=s[f]){for(var d=e.call(c,c.__data__,f,s),h,m=kn(c,n),p=0,w=d.length;p<w;++p)(h=d[p])&&m0(h,t,n,p,d,m);o.push(d),a.push(c)}return new Pr(o,a,t,n)}var LB=ou.prototype.constructor;function OB(){return new LB(this._groups,this._parents)}function DB(e,t){var n,r,i;return function(){var o=$a(this,e),a=(this.style.removeProperty(e),$a(this,e));return o===a?null:o===n&&a===r?i:i=t(n=o,r=a)}}function P7(e){return function(){this.style.removeProperty(e)}}function zB(e,t,n){var r,i=n+"",o;return function(){var a=$a(this,e);return a===i?null:a===r?o:o=t(r=a,n)}}function FB(e,t,n){var r,i,o;return function(){var a=$a(this,e),l=n(this),s=l+"";return l==null&&(s=l=(this.style.removeProperty(e),$a(this,e))),a===s?null:a===r&&s===i?o:(i=s,o=t(r=a,l))}}function BB(e,t){var n,r,i,o="style."+t,a="end."+o,l;return function(){var s=nr(this,e),u=s.on,c=s.value[o]==null?l||(l=P7(t)):void 0;(u!==n||i!==c)&&(r=(n=u).copy()).on(a,i=c),s.on=r}}function HB(e,t,n){var r=(e+="")=="transform"?gO:$7;return t==null?this.styleTween(e,DB(e,r)).on("end.style."+e,P7(e)):typeof t=="function"?this.styleTween(e,FB(e,r,qy(this,"style."+e,t))).each(BB(this._id,e)):this.styleTween(e,zB(e,r,t),n).on("end.style."+e,null)}function UB(e,t,n){return function(r){this.style.setProperty(e,t.call(this,r),n)}}function WB(e,t,n){var r,i;function o(){var a=t.apply(this,arguments);return a!==i&&(r=(i=a)&&UB(e,a,n)),r}return o._value=t,o}function jB(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(t==null)return this.tween(r,null);if(typeof t!="function")throw new Error;return this.tween(r,WB(e,t,n??""))}function VB(e){return function(){this.textContent=e}}function qB(e){return function(){var t=e(this);this.textContent=t??""}}function YB(e){return this.tween("text",typeof e=="function"?qB(qy(this,"text",e)):VB(e==null?"":e+""))}function XB(e){return function(t){this.textContent=e.call(this,t)}}function GB(e){var t,n;function r(){var i=e.apply(this,arguments);return i!==n&&(t=(n=i)&&XB(i)),t}return r._value=e,r}function KB(e){var t="text";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(e==null)return this.tween(t,null);if(typeof e!="function")throw new Error;return this.tween(t,GB(e))}function QB(){for(var e=this._name,t=this._id,n=R7(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a=r[o],l=a.length,s,u=0;u<l;++u)if(s=a[u]){var c=kn(s,t);m0(s,e,n,u,a,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Pr(r,this._parents,e,n)}function ZB(){var e,t,n=this,r=n._id,i=n.size();return new Promise(function(o,a){var l={value:a},s={value:function(){--i===0&&o()}};n.each(function(){var u=nr(this,r),c=u.on;c!==e&&(t=(e=c).copy(),t._.cancel.push(l),t._.interrupt.push(l),t._.end.push(s)),u.on=t}),i===0&&o()})}var JB=0;function Pr(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function R7(){return++JB}var rr=ou.prototype;Pr.prototype={constructor:Pr,select:AB,selectAll:IB,selectChild:rr.selectChild,selectChildren:rr.selectChildren,filter:EB,merge:kB,selection:OB,transition:QB,call:rr.call,nodes:rr.nodes,node:rr.node,size:rr.size,empty:rr.empty,each:rr.each,on:PB,attr:cB,attrTween:mB,style:HB,styleTween:jB,text:YB,textTween:KB,remove:NB,tween:rB,delay:vB,duration:xB,ease:SB,easeVarying:CB,end:ZB,[Symbol.iterator]:rr[Symbol.iterator]};function eH(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}var tH={time:null,delay:0,duration:250,ease:eH};function nH(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return n}function rH(e){var t,n;e instanceof Pr?(t=e._id,e=e._name):(t=R7(),(n=tH).time=jy(),e=e==null?null:e+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a=r[o],l=a.length,s,u=0;u<l;++u)(s=a[u])&&m0(s,e,t,u,a,n||nH(s,t));return new Pr(r,this._parents,e,t)}ou.prototype.interrupt=eB;ou.prototype.transition=rH;const m1=Math.PI,g1=2*m1,Fi=1e-6,iH=g1-Fi;function N7(e){this._+=e[0];for(let t=1,n=e.length;t<n;++t)this._+=arguments[t]+e[t]}function oH(e){let t=Math.floor(e);if(!(t>=0))throw new Error(`invalid digits: ${e}`);if(t>15)return N7;const n=10**t;return function(r){this._+=r[0];for(let i=1,o=r.length;i<o;++i)this._+=Math.round(arguments[i]*n)/n+r[i]}}class A7{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=t==null?N7:oH(t)}moveTo(t,n){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}`}closePath(){this._x1!==null&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,n){this._append`L${this._x1=+t},${this._y1=+n}`}quadraticCurveTo(t,n,r,i){this._append`Q${+t},${+n},${this._x1=+r},${this._y1=+i}`}bezierCurveTo(t,n,r,i,o,a){this._append`C${+t},${+n},${+r},${+i},${this._x1=+o},${this._y1=+a}`}arcTo(t,n,r,i,o){if(t=+t,n=+n,r=+r,i=+i,o=+o,o<0)throw new Error(`negative radius: ${o}`);let a=this._x1,l=this._y1,s=r-t,u=i-n,c=a-t,f=l-n,d=c*c+f*f;if(this._x1===null)this._append`M${this._x1=t},${this._y1=n}`;else if(d>Fi)if(!(Math.abs(f*s-u*c)>Fi)||!o)this._append`L${this._x1=t},${this._y1=n}`;else{let h=r-a,m=i-l,p=s*s+u*u,w=h*h+m*m,y=Math.sqrt(p),g=Math.sqrt(d),v=o*Math.tan((m1-Math.acos((p+d-w)/(2*y*g)))/2),b=v/g,_=v/y;Math.abs(b-1)>Fi&&this._append`L${t+b*c},${n+b*f}`,this._append`A${o},${o},0,0,${+(f*h>c*m)},${this._x1=t+_*s},${this._y1=n+_*u}`}}arc(t,n,r,i,o,a){if(t=+t,n=+n,r=+r,a=!!a,r<0)throw new Error(`negative radius: ${r}`);let l=r*Math.cos(i),s=r*Math.sin(i),u=t+l,c=n+s,f=1^a,d=a?i-o:o-i;this._x1===null?this._append`M${u},${c}`:(Math.abs(this._x1-u)>Fi||Math.abs(this._y1-c)>Fi)&&this._append`L${u},${c}`,r&&(d<0&&(d=d%g1+g1),d>iH?this._append`A${r},${r},0,1,${f},${t-l},${n-s}A${r},${r},0,1,${f},${this._x1=u},${this._y1=c}`:d>Fi&&this._append`A${r},${r},0,${+(d>=m1)},${f},${this._x1=t+r*Math.cos(o)},${this._y1=n+r*Math.sin(o)}`)}rect(t,n,r,i){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}h${r=+r}v${+i}h${-r}Z`}toString(){return this._}}function qi(e=3){return new A7(+e)}var ue=1e-6,I7=1e-12,fe=Math.PI,Le=fe/2,Wb=fe/4,Yt=fe*2,_t=180/fe,Ie=fe/180,be=Math.abs,Za=Math.atan,Rr=Math.atan2,ce=Math.cos,L7=Math.exp,Nf=Math.log,ip=Math.pow,oe=Math.sin,an=Math.sign||function(e){return e>0?1:e<0?-1:0},Ot=Math.sqrt,Yy=Math.tan;function O7(e){return e>1?0:e<-1?fe:Math.acos(e)}function dn(e){return e>1?Le:e<-1?-Le:Math.asin(e)}function ln(){}function Af(e,t){e&&Vb.hasOwnProperty(e.type)&&Vb[e.type](e,t)}var jb={Feature:function(e,t){Af(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,i=n.length;++r<i;)Af(n[r].geometry,t)}},Vb={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){y1(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)y1(n[r],t,0)},Polygon:function(e,t){qb(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,i=n.length;++r<i;)qb(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,i=n.length;++r<i;)Af(n[r],t)}};function y1(e,t,n){var r=-1,i=e.length-n,o;for(t.lineStart();++r<i;)o=e[r],t.point(o[0],o[1],o[2]);t.lineEnd()}function qb(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)y1(e[n],t,1);t.polygonEnd()}function Bi(e,t){e&&jb.hasOwnProperty(e.type)?jb[e.type](e,t):Af(e,t)}function v1(e){return[Rr(e[1],e[0]),dn(e[2])]}function Ra(e){var t=e[0],n=e[1],r=ce(n);return[r*ce(t),r*oe(t),oe(n)]}function Yu(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function If(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function op(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function Xu(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function w1(e){var t=Ot(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}function b1(e,t){function n(r,i){return r=e(r,i),t(r[0],r[1])}return e.invert&&t.invert&&(n.invert=function(r,i){return r=t.invert(r,i),r&&e.invert(r[0],r[1])}),n}function x1(e,t){return be(e)>fe&&(e-=Math.round(e/Yt)*Yt),[e,t]}x1.invert=x1;function D7(e,t,n){return(e%=Yt)?t||n?b1(Xb(e),Gb(t,n)):Xb(e):t||n?Gb(t,n):x1}function Yb(e){return function(t,n){return t+=e,be(t)>fe&&(t-=Math.round(t/Yt)*Yt),[t,n]}}function Xb(e){var t=Yb(e);return t.invert=Yb(-e),t}function Gb(e,t){var n=ce(e),r=oe(e),i=ce(t),o=oe(t);function a(l,s){var u=ce(s),c=ce(l)*u,f=oe(l)*u,d=oe(s),h=d*n+c*r;return[Rr(f*i-h*o,c*n-d*r),dn(h*i+f*o)]}return a.invert=function(l,s){var u=ce(s),c=ce(l)*u,f=oe(l)*u,d=oe(s),h=d*i-f*o;return[Rr(f*i+d*o,c*n+h*r),dn(h*n-c*r)]},a}function aH(e){e=D7(e[0]*Ie,e[1]*Ie,e.length>2?e[2]*Ie:0);function t(n){return n=e(n[0]*Ie,n[1]*Ie),n[0]*=_t,n[1]*=_t,n}return t.invert=function(n){return n=e.invert(n[0]*Ie,n[1]*Ie),n[0]*=_t,n[1]*=_t,n},t}function lH(e,t,n,r,i,o){if(n){var a=ce(t),l=oe(t),s=r*n;i==null?(i=t+r*Yt,o=t-s/2):(i=Kb(a,i),o=Kb(a,o),(r>0?i<o:i>o)&&(i+=r*Yt));for(var u,c=i;r>0?c>o:c<o;c-=s)u=v1([a,-l*ce(c),-l*oe(c)]),e.point(u[0],u[1])}}function Kb(e,t){t=Ra(t),t[0]-=e,w1(t);var n=O7(-t[1]);return((-t[2]<0?-n:n)+Yt-ue)%Yt}function z7(){var e=[],t;return{point:function(n,r,i){t.push([n,r,i])},lineStart:function(){e.push(t=[])},lineEnd:ln,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}}function $c(e,t){return be(e[0]-t[0])<ue&&be(e[1]-t[1])<ue}function Gu(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function F7(e,t,n,r,i){var o=[],a=[],l,s;if(e.forEach(function(m){if(!((p=m.length-1)<=0)){var p,w=m[0],y=m[p],g;if($c(w,y)){if(!w[2]&&!y[2]){for(i.lineStart(),l=0;l<p;++l)i.point((w=m[l])[0],w[1]);i.lineEnd();return}y[0]+=2*ue}o.push(g=new Gu(w,m,null,!0)),a.push(g.o=new Gu(w,null,g,!1)),o.push(g=new Gu(y,m,null,!1)),a.push(g.o=new Gu(y,null,g,!0))}}),!!o.length){for(a.sort(t),Qb(o),Qb(a),l=0,s=a.length;l<s;++l)a[l].e=n=!n;for(var u=o[0],c,f;;){for(var d=u,h=!0;d.v;)if((d=d.n)===u)return;c=d.z,i.lineStart();do{if(d.v=d.o.v=!0,d.e){if(h)for(l=0,s=c.length;l<s;++l)i.point((f=c[l])[0],f[1]);else r(d.x,d.n.x,1,i);d=d.n}else{if(h)for(c=d.p.z,l=c.length-1;l>=0;--l)i.point((f=c[l])[0],f[1]);else r(d.x,d.p.x,-1,i);d=d.p}d=d.o,c=d.z,h=!h}while(!d.v);i.lineEnd()}}}function Qb(e){if(t=e.length){for(var t,n=0,r=e[0],i;++n<t;)r.n=i=e[n],i.p=r,r=i;r.n=i=e[0],i.p=r}}function ap(e){return be(e[0])<=fe?e[0]:an(e[0])*((be(e[0])+fe)%Yt-fe)}function sH(e,t){var n=ap(t),r=t[1],i=oe(r),o=[oe(n),-ce(n),0],a=0,l=0,s=new lo;i===1?r=Le+ue:i===-1&&(r=-Le-ue);for(var u=0,c=e.length;u<c;++u)if(d=(f=e[u]).length)for(var f,d,h=f[d-1],m=ap(h),p=h[1]/2+Wb,w=oe(p),y=ce(p),g=0;g<d;++g,m=b,w=M,y=S,h=v){var v=f[g],b=ap(v),_=v[1]/2+Wb,M=oe(_),S=ce(_),C=b-m,k=C>=0?1:-1,$=k*C,E=$>fe,U=w*M;if(s.add(Rr(U*k*oe($),y*S+U*ce($))),a+=E?C+k*Yt:C,E^m>=n^b>=n){var D=If(Ra(h),Ra(v));w1(D);var N=If(o,D);w1(N);var P=(E^C>=0?-1:1)*dn(N[2]);(r>P||r===P&&(D[0]||D[1]))&&(l+=E^C>=0?1:-1)}}return(a<-ue||a<ue&&s<-I7)^l&1}function B7(e,t,n,r){return function(i){var o=t(i),a=z7(),l=t(a),s=!1,u,c,f,d={point:h,lineStart:p,lineEnd:w,polygonStart:function(){d.point=y,d.lineStart=g,d.lineEnd=v,c=[],u=[]},polygonEnd:function(){d.point=h,d.lineStart=p,d.lineEnd=w,c=w_(c);var b=sH(u,r);c.length?(s||(i.polygonStart(),s=!0),F7(c,cH,b,n,i)):b&&(s||(i.polygonStart(),s=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),s&&(i.polygonEnd(),s=!1),c=u=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function h(b,_){e(b,_)&&i.point(b,_)}function m(b,_){o.point(b,_)}function p(){d.point=m,o.lineStart()}function w(){d.point=h,o.lineEnd()}function y(b,_){f.push([b,_]),l.point(b,_)}function g(){l.lineStart(),f=[]}function v(){y(f[0][0],f[0][1]),l.lineEnd();var b=l.clean(),_=a.result(),M,S=_.length,C,k,$;if(f.pop(),u.push(f),f=null,!!S){if(b&1){if(k=_[0],(C=k.length-1)>0){for(s||(i.polygonStart(),s=!0),i.lineStart(),M=0;M<C;++M)i.point(($=k[M])[0],$[1]);i.lineEnd()}return}S>1&&b&2&&_.push(_.pop().concat(_.shift())),c.push(_.filter(uH))}}return d}}function uH(e){return e.length>1}function cH(e,t){return((e=e.x)[0]<0?e[1]-Le-ue:Le-e[1])-((t=t.x)[0]<0?t[1]-Le-ue:Le-t[1])}const Zb=B7(function(){return!0},fH,hH,[-fe,-Le]);function fH(e){var t=NaN,n=NaN,r=NaN,i;return{lineStart:function(){e.lineStart(),i=1},point:function(o,a){var l=o>0?fe:-fe,s=be(o-t);be(s-fe)<ue?(e.point(t,n=(n+a)/2>0?Le:-Le),e.point(r,n),e.lineEnd(),e.lineStart(),e.point(l,n),e.point(o,n),i=0):r!==l&&s>=fe&&(be(t-r)<ue&&(t-=r*ue),be(o-l)<ue&&(o-=l*ue),n=dH(t,n,o,a),e.point(r,n),e.lineEnd(),e.lineStart(),e.point(l,n),i=0),e.point(t=o,n=a),r=l},lineEnd:function(){e.lineEnd(),t=n=NaN},clean:function(){return 2-i}}}function dH(e,t,n,r){var i,o,a=oe(e-n);return be(a)>ue?Za((oe(t)*(o=ce(r))*oe(n)-oe(r)*(i=ce(t))*oe(e))/(i*o*a)):(t+r)/2}function hH(e,t,n,r){var i;if(e==null)i=n*Le,r.point(-fe,i),r.point(0,i),r.point(fe,i),r.point(fe,0),r.point(fe,-i),r.point(0,-i),r.point(-fe,-i),r.point(-fe,0),r.point(-fe,i);else if(be(e[0]-t[0])>ue){var o=e[0]<t[0]?fe:-fe;i=n*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(t[0],t[1])}function pH(e){var t=ce(e),n=2*Ie,r=t>0,i=be(t)>ue;function o(c,f,d,h){lH(h,e,n,d,c,f)}function a(c,f){return ce(c)*ce(f)>t}function l(c){var f,d,h,m,p;return{lineStart:function(){m=h=!1,p=1},point:function(w,y){var g=[w,y],v,b=a(w,y),_=r?b?0:u(w,y):b?u(w+(w<0?fe:-fe),y):0;if(!f&&(m=h=b)&&c.lineStart(),b!==h&&(v=s(f,g),(!v||$c(f,v)||$c(g,v))&&(g[2]=1)),b!==h)p=0,b?(c.lineStart(),v=s(g,f),c.point(v[0],v[1])):(v=s(f,g),c.point(v[0],v[1],2),c.lineEnd()),f=v;else if(i&&f&&r^b){var M;!(_&d)&&(M=s(g,f,!0))&&(p=0,r?(c.lineStart(),c.point(M[0][0],M[0][1]),c.point(M[1][0],M[1][1]),c.lineEnd()):(c.point(M[1][0],M[1][1]),c.lineEnd(),c.lineStart(),c.point(M[0][0],M[0][1],3)))}b&&(!f||!$c(f,g))&&c.point(g[0],g[1]),f=g,h=b,d=_},lineEnd:function(){h&&c.lineEnd(),f=null},clean:function(){return p|(m&&h)<<1}}}function s(c,f,d){var h=Ra(c),m=Ra(f),p=[1,0,0],w=If(h,m),y=Yu(w,w),g=w[0],v=y-g*g;if(!v)return!d&&c;var b=t*y/v,_=-t*g/v,M=If(p,w),S=Xu(p,b),C=Xu(w,_);op(S,C);var k=M,$=Yu(S,k),E=Yu(k,k),U=$*$-E*(Yu(S,S)-1);if(!(U<0)){var D=Ot(U),N=Xu(k,(-$-D)/E);if(op(N,S),N=v1(N),!d)return N;var P=c[0],I=f[0],z=c[1],T=f[1],R;I<P&&(R=P,P=I,I=R);var A=I-P,L=be(A-fe)<ue,H=L||A<ue;if(!L&&T<z&&(R=z,z=T,T=R),H?L?z+T>0^N[1]<(be(N[0]-P)<ue?z:T):z<=N[1]&&N[1]<=T:A>fe^(P<=N[0]&&N[0]<=I)){var G=Xu(k,(-$+D)/E);return op(G,S),[N,v1(G)]}}}function u(c,f){var d=r?e:fe-e,h=0;return c<-d?h|=1:c>d&&(h|=2),f<-d?h|=4:f>d&&(h|=8),h}return B7(a,l,o,r?[0,-e]:[-fe,e-fe])}function mH(e,t,n,r,i,o){var a=e[0],l=e[1],s=t[0],u=t[1],c=0,f=1,d=s-a,h=u-l,m;if(m=n-a,!(!d&&m>0)){if(m/=d,d<0){if(m<c)return;m<f&&(f=m)}else if(d>0){if(m>f)return;m>c&&(c=m)}if(m=i-a,!(!d&&m<0)){if(m/=d,d<0){if(m>f)return;m>c&&(c=m)}else if(d>0){if(m<c)return;m<f&&(f=m)}if(m=r-l,!(!h&&m>0)){if(m/=h,h<0){if(m<c)return;m<f&&(f=m)}else if(h>0){if(m>f)return;m>c&&(c=m)}if(m=o-l,!(!h&&m<0)){if(m/=h,h<0){if(m>f)return;m>c&&(c=m)}else if(h>0){if(m<c)return;m<f&&(f=m)}return c>0&&(e[0]=a+c*d,e[1]=l+c*h),f<1&&(t[0]=a+f*d,t[1]=l+f*h),!0}}}}}var kl=1e9,Ku=-kl;function H7(e,t,n,r){function i(u,c){return e<=u&&u<=n&&t<=c&&c<=r}function o(u,c,f,d){var h=0,m=0;if(u==null||(h=a(u,f))!==(m=a(c,f))||s(u,c)<0^f>0)do d.point(h===0||h===3?e:n,h>1?r:t);while((h=(h+f+4)%4)!==m);else d.point(c[0],c[1])}function a(u,c){return be(u[0]-e)<ue?c>0?0:3:be(u[0]-n)<ue?c>0?2:1:be(u[1]-t)<ue?c>0?1:0:c>0?3:2}function l(u,c){return s(u.x,c.x)}function s(u,c){var f=a(u,1),d=a(c,1);return f!==d?f-d:f===0?c[1]-u[1]:f===1?u[0]-c[0]:f===2?u[1]-c[1]:c[0]-u[0]}return function(u){var c=u,f=z7(),d,h,m,p,w,y,g,v,b,_,M,S={point:C,lineStart:U,lineEnd:D,polygonStart:$,polygonEnd:E};function C(P,I){i(P,I)&&c.point(P,I)}function k(){for(var P=0,I=0,z=h.length;I<z;++I)for(var T=h[I],R=1,A=T.length,L=T[0],H,G,J=L[0],te=L[1];R<A;++R)H=J,G=te,L=T[R],J=L[0],te=L[1],G<=r?te>r&&(J-H)*(r-G)>(te-G)*(e-H)&&++P:te<=r&&(J-H)*(r-G)<(te-G)*(e-H)&&--P;return P}function $(){c=f,d=[],h=[],M=!0}function E(){var P=k(),I=M&&P,z=(d=w_(d)).length;(I||z)&&(u.polygonStart(),I&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),z&&F7(d,l,P,o,u),u.polygonEnd()),c=u,d=h=m=null}function U(){S.point=N,h&&h.push(m=[]),_=!0,b=!1,g=v=NaN}function D(){d&&(N(p,w),y&&b&&f.rejoin(),d.push(f.result())),S.point=C,b&&c.lineEnd()}function N(P,I){var z=i(P,I);if(h&&m.push([P,I]),_)p=P,w=I,y=z,_=!1,z&&(c.lineStart(),c.point(P,I));else if(z&&b)c.point(P,I);else{var T=[g=Math.max(Ku,Math.min(kl,g)),v=Math.max(Ku,Math.min(kl,v))],R=[P=Math.max(Ku,Math.min(kl,P)),I=Math.max(Ku,Math.min(kl,I))];mH(T,R,e,t,n,r)?(b||(c.lineStart(),c.point(T[0],T[1])),c.point(R[0],R[1]),z||c.lineEnd(),M=!1):z&&(c.lineStart(),c.point(P,I),M=!1)}g=P,v=I,b=z}return S}}const _1=e=>e;var lp=new lo,S1=new lo,U7,W7,M1,C1,fr={point:ln,lineStart:ln,lineEnd:ln,polygonStart:function(){fr.lineStart=gH,fr.lineEnd=vH},polygonEnd:function(){fr.lineStart=fr.lineEnd=fr.point=ln,lp.add(be(S1)),S1=new lo},result:function(){var e=lp/2;return lp=new lo,e}};function gH(){fr.point=yH}function yH(e,t){fr.point=j7,U7=M1=e,W7=C1=t}function j7(e,t){S1.add(C1*e-M1*t),M1=e,C1=t}function vH(){j7(U7,W7)}var Na=1/0,Lf=Na,$s=-Na,Of=$s,Df={point:wH,lineStart:ln,lineEnd:ln,polygonStart:ln,polygonEnd:ln,result:function(){var e=[[Na,Lf],[$s,Of]];return $s=Of=-(Lf=Na=1/0),e}};function wH(e,t){e<Na&&(Na=e),e>$s&&($s=e),t<Lf&&(Lf=t),t>Of&&(Of=t)}var E1=0,k1=0,Tl=0,zf=0,Ff=0,Ko=0,T1=0,$1=0,$l=0,V7,q7,Bn,Hn,tn={point:mo,lineStart:Jb,lineEnd:ex,polygonStart:function(){tn.lineStart=_H,tn.lineEnd=SH},polygonEnd:function(){tn.point=mo,tn.lineStart=Jb,tn.lineEnd=ex},result:function(){var e=$l?[T1/$l,$1/$l]:Ko?[zf/Ko,Ff/Ko]:Tl?[E1/Tl,k1/Tl]:[NaN,NaN];return E1=k1=Tl=zf=Ff=Ko=T1=$1=$l=0,e}};function mo(e,t){E1+=e,k1+=t,++Tl}function Jb(){tn.point=bH}function bH(e,t){tn.point=xH,mo(Bn=e,Hn=t)}function xH(e,t){var n=e-Bn,r=t-Hn,i=Ot(n*n+r*r);zf+=i*(Bn+e)/2,Ff+=i*(Hn+t)/2,Ko+=i,mo(Bn=e,Hn=t)}function ex(){tn.point=mo}function _H(){tn.point=MH}function SH(){Y7(V7,q7)}function MH(e,t){tn.point=Y7,mo(V7=Bn=e,q7=Hn=t)}function Y7(e,t){var n=e-Bn,r=t-Hn,i=Ot(n*n+r*r);zf+=i*(Bn+e)/2,Ff+=i*(Hn+t)/2,Ko+=i,i=Hn*e-Bn*t,T1+=i*(Bn+e),$1+=i*(Hn+t),$l+=i*3,mo(Bn=e,Hn=t)}function X7(e){this._context=e}X7.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){this._line===0&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:{this._context.moveTo(e,t),this._point=1;break}case 1:{this._context.lineTo(e,t);break}default:{this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,Yt);break}}},result:ln};var P1=new lo,sp,G7,K7,Pl,Rl,Ps={point:ln,lineStart:function(){Ps.point=CH},lineEnd:function(){sp&&Q7(G7,K7),Ps.point=ln},polygonStart:function(){sp=!0},polygonEnd:function(){sp=null},result:function(){var e=+P1;return P1=new lo,e}};function CH(e,t){Ps.point=Q7,G7=Pl=e,K7=Rl=t}function Q7(e,t){Pl-=e,Rl-=t,P1.add(Ot(Pl*Pl+Rl*Rl)),Pl=e,Rl=t}let tx,Bf,nx,rx;class ix{constructor(t){this._append=t==null?Z7:EH(t),this._radius=4.5,this._=""}pointRadius(t){return this._radius=+t,this}polygonStart(){this._line=0}polygonEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){this._line===0&&(this._+="Z"),this._point=NaN}point(t,n){switch(this._point){case 0:{this._append`M${t},${n}`,this._point=1;break}case 1:{this._append`L${t},${n}`;break}default:{if(this._append`M${t},${n}`,this._radius!==nx||this._append!==Bf){const r=this._radius,i=this._;this._="",this._append`m0,${r}a${r},${r} 0 1,1 0,${-2*r}a${r},${r} 0 1,1 0,${2*r}z`,nx=r,Bf=this._append,rx=this._,this._=i}this._+=rx;break}}}result(){const t=this._;return this._="",t.length?t:null}}function Z7(e){let t=1;this._+=e[0];for(const n=e.length;t<n;++t)this._+=arguments[t]+e[t]}function EH(e){const t=Math.floor(e);if(!(t>=0))throw new RangeError(`invalid digits: ${e}`);if(t>15)return Z7;if(t!==tx){const n=10**t;tx=t,Bf=function(i){let o=1;this._+=i[0];for(const a=i.length;o<a;++o)this._+=Math.round(arguments[o]*n)/n+i[o]}}return Bf}function g0(e,t){let n=3,r=4.5,i,o;function a(l){return l&&(typeof r=="function"&&o.pointRadius(+r.apply(this,arguments)),Bi(l,i(o))),o.result()}return a.area=function(l){return Bi(l,i(fr)),fr.result()},a.measure=function(l){return Bi(l,i(Ps)),Ps.result()},a.bounds=function(l){return Bi(l,i(Df)),Df.result()},a.centroid=function(l){return Bi(l,i(tn)),tn.result()},a.projection=function(l){return arguments.length?(i=l==null?(e=null,_1):(e=l).stream,a):e},a.context=function(l){return arguments.length?(o=l==null?(t=null,new ix(n)):new X7(t=l),typeof r!="function"&&o.pointRadius(r),a):t},a.pointRadius=function(l){return arguments.length?(r=typeof l=="function"?l:(o.pointRadius(+l),+l),a):r},a.digits=function(l){if(!arguments.length)return n;if(l==null)n=null;else{const s=Math.floor(l);if(!(s>=0))throw new RangeError(`invalid digits: ${l}`);n=s}return t===null&&(o=new ix(n)),a},a.projection(e).digits(n).context(t)}function R1(e){return{stream:y0(e)}}function y0(e){return function(t){var n=new N1;for(var r in e)n[r]=e[r];return n.stream=t,n}}function N1(){}N1.prototype={constructor:N1,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};function Xy(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),r!=null&&e.clipExtent(null),Bi(n,e.stream(Df)),t(Df.result()),r!=null&&e.clipExtent(r),e}function Gy(e,t,n){return Xy(e,function(r){var i=t[1][0]-t[0][0],o=t[1][1]-t[0][1],a=Math.min(i/(r[1][0]-r[0][0]),o/(r[1][1]-r[0][1])),l=+t[0][0]+(i-a*(r[1][0]+r[0][0]))/2,s=+t[0][1]+(o-a*(r[1][1]+r[0][1]))/2;e.scale(150*a).translate([l,s])},n)}function J7(e,t,n){return Gy(e,[[0,0],t],n)}function e9(e,t,n){return Xy(e,function(r){var i=+t,o=i/(r[1][0]-r[0][0]),a=(i-o*(r[1][0]+r[0][0]))/2,l=-o*r[0][1];e.scale(150*o).translate([a,l])},n)}function t9(e,t,n){return Xy(e,function(r){var i=+t,o=i/(r[1][1]-r[0][1]),a=-o*r[0][0],l=(i-o*(r[1][1]+r[0][1]))/2;e.scale(150*o).translate([a,l])},n)}var ox=16,kH=ce(30*Ie);function ax(e,t){return+t?$H(e,t):TH(e)}function TH(e){return y0({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}function $H(e,t){function n(r,i,o,a,l,s,u,c,f,d,h,m,p,w){var y=u-r,g=c-i,v=y*y+g*g;if(v>4*t&&p--){var b=a+d,_=l+h,M=s+m,S=Ot(b*b+_*_+M*M),C=dn(M/=S),k=be(be(M)-1)<ue||be(o-f)<ue?(o+f)/2:Rr(_,b),$=e(k,C),E=$[0],U=$[1],D=E-r,N=U-i,P=g*D-y*N;(P*P/v>t||be((y*D+g*N)/v-.5)>.3||a*d+l*h+s*m<kH)&&(n(r,i,o,a,l,s,E,U,k,b/=S,_/=S,M,p,w),w.point(E,U),n(E,U,k,b,_,M,u,c,f,d,h,m,p,w))}}return function(r){var i,o,a,l,s,u,c,f,d,h,m,p,w={point:y,lineStart:g,lineEnd:b,polygonStart:function(){r.polygonStart(),w.lineStart=_},polygonEnd:function(){r.polygonEnd(),w.lineStart=g}};function y(C,k){C=e(C,k),r.point(C[0],C[1])}function g(){f=NaN,w.point=v,r.lineStart()}function v(C,k){var $=Ra([C,k]),E=e(C,k);n(f,d,c,h,m,p,f=E[0],d=E[1],c=C,h=$[0],m=$[1],p=$[2],ox,r),r.point(f,d)}function b(){w.point=y,r.lineEnd()}function _(){g(),w.point=M,w.lineEnd=S}function M(C,k){v(i=C,k),o=f,a=d,l=h,s=m,u=p,w.point=v}function S(){n(f,d,c,h,m,p,o,a,i,l,s,u,ox,r),w.lineEnd=b,b()}return w}}var PH=y0({point:function(e,t){this.stream.point(e*Ie,t*Ie)}});function RH(e){return y0({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}function NH(e,t,n,r,i){function o(a,l){return a*=r,l*=i,[t+e*a,n-e*l]}return o.invert=function(a,l){return[(a-t)/e*r,(n-l)/e*i]},o}function lx(e,t,n,r,i,o){if(!o)return NH(e,t,n,r,i);var a=ce(o),l=oe(o),s=a*e,u=l*e,c=a/e,f=l/e,d=(l*n-a*t)/e,h=(l*t+a*n)/e;function m(p,w){return p*=r,w*=i,[s*p-u*w+t,n-u*p-s*w]}return m.invert=function(p,w){return[r*(c*p-f*w+d),i*(h-f*p-c*w)]},m}function Ri(e){return n9(function(){return e})()}function n9(e){var t,n=150,r=480,i=250,o=0,a=0,l=0,s=0,u=0,c,f=0,d=1,h=1,m=null,p=Zb,w=null,y,g,v,b=_1,_=.5,M,S,C,k,$;function E(P){return C(P[0]*Ie,P[1]*Ie)}function U(P){return P=C.invert(P[0],P[1]),P&&[P[0]*_t,P[1]*_t]}E.stream=function(P){return k&&$===P?k:k=PH(RH(c)(p(M(b($=P)))))},E.preclip=function(P){return arguments.length?(p=P,m=void 0,N()):p},E.postclip=function(P){return arguments.length?(b=P,w=y=g=v=null,N()):b},E.clipAngle=function(P){return arguments.length?(p=+P?pH(m=P*Ie):(m=null,Zb),N()):m*_t},E.clipExtent=function(P){return arguments.length?(b=P==null?(w=y=g=v=null,_1):H7(w=+P[0][0],y=+P[0][1],g=+P[1][0],v=+P[1][1]),N()):w==null?null:[[w,y],[g,v]]},E.scale=function(P){return arguments.length?(n=+P,D()):n},E.translate=function(P){return arguments.length?(r=+P[0],i=+P[1],D()):[r,i]},E.center=function(P){return arguments.length?(o=P[0]%360*Ie,a=P[1]%360*Ie,D()):[o*_t,a*_t]},E.rotate=function(P){return arguments.length?(l=P[0]%360*Ie,s=P[1]%360*Ie,u=P.length>2?P[2]%360*Ie:0,D()):[l*_t,s*_t,u*_t]},E.angle=function(P){return arguments.length?(f=P%360*Ie,D()):f*_t},E.reflectX=function(P){return arguments.length?(d=P?-1:1,D()):d<0},E.reflectY=function(P){return arguments.length?(h=P?-1:1,D()):h<0},E.precision=function(P){return arguments.length?(M=ax(S,_=P*P),N()):Ot(_)},E.fitExtent=function(P,I){return Gy(E,P,I)},E.fitSize=function(P,I){return J7(E,P,I)},E.fitWidth=function(P,I){return e9(E,P,I)},E.fitHeight=function(P,I){return t9(E,P,I)};function D(){var P=lx(n,0,0,d,h,f).apply(null,t(o,a)),I=lx(n,r-P[0],i-P[1],d,h,f);return c=D7(l,s,u),S=b1(t,I),C=b1(c,S),M=ax(S,_),N()}function N(){return k=$=null,E}return function(){return t=e.apply(this,arguments),E.invert=t.invert&&U,D()}}function Ky(e){var t=0,n=fe/3,r=n9(e),i=r(t,n);return i.parallels=function(o){return arguments.length?r(t=o[0]*Ie,n=o[1]*Ie):[t*_t,n*_t]},i}function AH(e){var t=ce(e);function n(r,i){return[r*t,oe(i)/t]}return n.invert=function(r,i){return[r/t,dn(i*t)]},n}function IH(e,t){var n=oe(e),r=(n+oe(t))/2;if(be(r)<ue)return AH(e);var i=1+n*(2*r-n),o=Ot(i)/r;function a(l,s){var u=Ot(i-2*r*oe(s))/r;return[u*oe(l*=r),o-u*ce(l)]}return a.invert=function(l,s){var u=o-s,c=Rr(l,be(u))*an(u);return u*r<0&&(c-=fe*an(l)*an(u)),[c/r,dn((i-(l*l+u*u)*r*r)/(2*r))]},a}function Hf(){return Ky(IH).scale(155.424).center([0,33.6442])}function r9(){return Hf().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function LH(e){var t=e.length;return{point:function(n,r){for(var i=-1;++i<t;)e[i].point(n,r)},sphere:function(){for(var n=-1;++n<t;)e[n].sphere()},lineStart:function(){for(var n=-1;++n<t;)e[n].lineStart()},lineEnd:function(){for(var n=-1;++n<t;)e[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<t;)e[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<t;)e[n].polygonEnd()}}}function OH(){var e,t,n=r9(),r,i=Hf().rotate([154,0]).center([-2,58.5]).parallels([55,65]),o,a=Hf().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l,s,u={point:function(d,h){s=[d,h]}};function c(d){var h=d[0],m=d[1];return s=null,r.point(h,m),s||(o.point(h,m),s)||(l.point(h,m),s)}c.invert=function(d){var h=n.scale(),m=n.translate(),p=(d[0]-m[0])/h,w=(d[1]-m[1])/h;return(w>=.12&&w<.234&&p>=-.425&&p<-.214?i:w>=.166&&w<.234&&p>=-.214&&p<-.115?a:n).invert(d)},c.stream=function(d){return e&&t===d?e:e=LH([n.stream(t=d),i.stream(d),a.stream(d)])},c.precision=function(d){return arguments.length?(n.precision(d),i.precision(d),a.precision(d),f()):n.precision()},c.scale=function(d){return arguments.length?(n.scale(d),i.scale(d*.35),a.scale(d),c.translate(n.translate())):n.scale()},c.translate=function(d){if(!arguments.length)return n.translate();var h=n.scale(),m=+d[0],p=+d[1];return r=n.translate(d).clipExtent([[m-.455*h,p-.238*h],[m+.455*h,p+.238*h]]).stream(u),o=i.translate([m-.307*h,p+.201*h]).clipExtent([[m-.425*h+ue,p+.12*h+ue],[m-.214*h-ue,p+.234*h-ue]]).stream(u),l=a.translate([m-.205*h,p+.212*h]).clipExtent([[m-.214*h+ue,p+.166*h+ue],[m-.115*h-ue,p+.234*h-ue]]).stream(u),f()},c.fitExtent=function(d,h){return Gy(c,d,h)},c.fitSize=function(d,h){return J7(c,d,h)},c.fitWidth=function(d,h){return e9(c,d,h)},c.fitHeight=function(d,h){return t9(c,d,h)};function f(){return e=t=null,c}return c.scale(1070)}function i9(e){return function(t,n){var r=ce(t),i=ce(n),o=e(r*i);return o===1/0?[2,0]:[o*i*oe(t),o*oe(n)]}}function au(e){return function(t,n){var r=Ot(t*t+n*n),i=e(r),o=oe(i),a=ce(i);return[Rr(t*o,r*a),dn(r&&n*o/r)]}}var o9=i9(function(e){return Ot(2/(1+e))});o9.invert=au(function(e){return 2*dn(e/2)});function DH(){return Ri(o9).scale(124.75).clipAngle(180-.001)}var a9=i9(function(e){return(e=O7(e))&&e/oe(e)});a9.invert=au(function(e){return e});function zH(){return Ri(a9).scale(79.4188).clipAngle(180-.001)}function v0(e,t){return[e,Nf(Yy((Le+t)/2))]}v0.invert=function(e,t){return[e,2*Za(L7(t))-Le]};function FH(){return l9(v0).scale(961/Yt)}function l9(e){var t=Ri(e),n=t.center,r=t.scale,i=t.translate,o=t.clipExtent,a=null,l,s,u;t.scale=function(f){return arguments.length?(r(f),c()):r()},t.translate=function(f){return arguments.length?(i(f),c()):i()},t.center=function(f){return arguments.length?(n(f),c()):n()},t.clipExtent=function(f){return arguments.length?(f==null?a=l=s=u=null:(a=+f[0][0],l=+f[0][1],s=+f[1][0],u=+f[1][1]),c()):a==null?null:[[a,l],[s,u]]};function c(){var f=fe*r(),d=t(aH(t.rotate()).invert([0,0]));return o(a==null?[[d[0]-f,d[1]-f],[d[0]+f,d[1]+f]]:e===v0?[[Math.max(d[0]-f,a),l],[Math.min(d[0]+f,s),u]]:[[a,Math.max(d[1]-f,l)],[s,Math.min(d[1]+f,u)]])}return c()}function Qu(e){return Yy((Le+e)/2)}function BH(e,t){var n=ce(e),r=e===t?oe(e):Nf(n/ce(t))/Nf(Qu(t)/Qu(e)),i=n*ip(Qu(e),r)/r;if(!r)return v0;function o(a,l){i>0?l<-Le+ue&&(l=-Le+ue):l>Le-ue&&(l=Le-ue);var s=i/ip(Qu(l),r);return[s*oe(r*a),i-s*ce(r*a)]}return o.invert=function(a,l){var s=i-l,u=an(r)*Ot(a*a+s*s),c=Rr(a,be(s))*an(s);return s*r<0&&(c-=fe*an(a)*an(s)),[c/r,2*Za(ip(i/u,1/r))-Le]},o}function HH(){return Ky(BH).scale(109.5).parallels([30,30])}function Uf(e,t){return[e,t]}Uf.invert=Uf;function UH(){return Ri(Uf).scale(152.63)}function WH(e,t){var n=ce(e),r=e===t?oe(e):(n-ce(t))/(t-e),i=n/r+e;if(be(r)<ue)return Uf;function o(a,l){var s=i-l,u=r*a;return[s*oe(u),i-s*ce(u)]}return o.invert=function(a,l){var s=i-l,u=Rr(a,be(s))*an(s);return s*r<0&&(u-=fe*an(a)*an(s)),[u/r,i-an(r)*Ot(a*a+s*s)]},o}function jH(){return Ky(WH).scale(131.154).center([0,13.9389])}var jl=1.340264,Vl=-.081106,ql=893e-6,Yl=.003796,Wf=Ot(3)/2,VH=12;function s9(e,t){var n=dn(Wf*oe(t)),r=n*n,i=r*r*r;return[e*ce(n)/(Wf*(jl+3*Vl*r+i*(7*ql+9*Yl*r))),n*(jl+Vl*r+i*(ql+Yl*r))]}s9.invert=function(e,t){for(var n=t,r=n*n,i=r*r*r,o=0,a,l,s;o<VH&&(l=n*(jl+Vl*r+i*(ql+Yl*r))-t,s=jl+3*Vl*r+i*(7*ql+9*Yl*r),n-=a=l/s,r=n*n,i=r*r*r,!(be(a)<I7));++o);return[Wf*e*(jl+3*Vl*r+i*(7*ql+9*Yl*r))/ce(n),dn(oe(n)/Wf)]};function qH(){return Ri(s9).scale(177.158)}function u9(e,t){var n=ce(t),r=ce(e)*n;return[n*oe(e)/r,oe(t)/r]}u9.invert=au(Za);function YH(){return Ri(u9).scale(144.049).clipAngle(60)}function c9(e,t){return[ce(t)*oe(e),oe(t)]}c9.invert=au(dn);function XH(){return Ri(c9).scale(249.5).clipAngle(90+ue)}function f9(e,t){var n=ce(t),r=1+ce(e)*n;return[n*oe(e)/r,oe(t)/r]}f9.invert=au(function(e){return 2*Za(e)});function GH(){return Ri(f9).scale(250).clipAngle(142)}function d9(e,t){return[Nf(Yy((Le+t)/2)),-e]}d9.invert=function(e,t){return[-t,2*Za(L7(e))-Le]};function KH(){var e=l9(d9),t=e.center,n=e.rotate;return e.center=function(r){return arguments.length?t([-r[1],r[0]]):(r=t(),[r[1],-r[0]])},e.rotate=function(r){return arguments.length?n([r[0],r[1],r.length>2?r[2]+90:90]):(r=n(),[r[0],r[1],r[2]-90])},n([0,0,90]).scale(159.155)}function ae(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(r*6,++r*6);return n}const QH=ae("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),ZH=ae("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),JH=ae("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),eU=ae("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0"),tU=ae("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),nU=ae("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),rU=ae("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),iU=ae("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),oU=ae("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),aU=ae("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),lU=ae("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Ce=e=>aO(e[e.length-1]);var h9=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(ae);const p9=Ce(h9);var m9=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(ae);const g9=Ce(m9);var y9=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(ae);const v9=Ce(y9);var w9=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(ae);const b9=Ce(w9);var A1=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(ae);const jf=Ce(A1);var x9=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(ae);const _9=Ce(x9);var I1=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(ae);const Vf=Ce(I1);var S9=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(ae);const M9=Ce(S9);var C9=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(ae);const E9=Ce(C9);var k9=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(ae);const T9=Ce(k9);var $9=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(ae);const P9=Ce($9);var R9=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(ae);const N9=Ce(R9);var A9=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(ae);const I9=Ce(A9);var L9=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(ae);const O9=Ce(L9);var D9=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(ae);const z9=Ce(D9);var F9=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(ae);const B9=Ce(F9);var H9=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(ae);const U9=Ce(H9);var W9=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(ae);const j9=Ce(W9);var V9=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(ae);const q9=Ce(V9);var Y9=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(ae);const X9=Ce(Y9);var G9=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(ae);const K9=Ce(G9);var Q9=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(ae);const Z9=Ce(Q9);var J9=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(ae);const eS=Ce(J9);var tS=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(ae);const nS=Ce(tS);var rS=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(ae);const iS=Ce(rS);var oS=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(ae);const aS=Ce(oS);var lS=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(ae);const sS=Ce(lS);function uS(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-e*(35.34-e*(2381.73-e*(6402.7-e*(7024.72-e*2710.57)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+e*(170.73+e*(52.82-e*(131.46-e*(176.58-e*67.37)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+e*(442.36-e*(2482.43-e*(6167.24-e*(6614.94-e*2475.67)))))))+")"}const cS=Oy(Qn(300,.5,0),Qn(-240,.5,1));var fS=Oy(Qn(-100,.75,.35),Qn(80,1.5,.8)),dS=Oy(Qn(260,.75,.35),Qn(80,1.5,.8)),Zu=Qn();function hS(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return Zu.h=360*e-100,Zu.s=1.5-1.5*t,Zu.l=.8-.9*t,Zu+""}var Ju=bi(),sU=Math.PI/3,uU=Math.PI*2/3;function pS(e){var t;return e=(.5-e)*Math.PI,Ju.r=255*(t=Math.sin(e))*t,Ju.g=255*(t=Math.sin(e+sU))*t,Ju.b=255*(t=Math.sin(e+uU))*t,Ju+""}function mS(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+e*(1172.33-e*(10793.56-e*(33300.12-e*(38394.49-e*14825.05)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+e*(557.33+e*(1225.33-e*(3574.96-e*(1073.77+e*707.56)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+e*(3211.1-e*(15327.97-e*(27814-e*(22569.18-e*6838.66)))))))+")"}function w0(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}const gS=w0(ae("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var yS=w0(ae("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),vS=w0(ae("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),wS=w0(ae("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Ao(e){return function(){return e}}const bS=Math.cos,Qy=Math.min,qf=Math.sin,Ge=Math.sqrt,sx=1e-12,Yf=Math.PI,b0=2*Yf;function cU(e){let t=3;return e.digits=function(n){if(!arguments.length)return t;if(n==null)t=null;else{const r=Math.floor(n);if(!(r>=0))throw new RangeError(`invalid digits: ${n}`);t=r}return e},()=>new A7(t)}function fU(e){return typeof e=="object"&&"length"in e?e:Array.from(e)}function xS(e){this._context=e}xS.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t);break}}};function x0(e){return new xS(e)}function dU(e){return e[0]}function hU(e){return e[1]}function pU(e,t){var n=Ao(!0),r=null,i=x0,o=null,a=cU(l);e=typeof e=="function"?e:e===void 0?dU:Ao(e),t=typeof t=="function"?t:t===void 0?hU:Ao(t);function l(s){var u,c=(s=fU(s)).length,f,d=!1,h;for(r==null&&(o=i(h=a())),u=0;u<=c;++u)!(u<c&&n(f=s[u],u,s))===d&&((d=!d)?o.lineStart():o.lineEnd()),d&&o.point(+e(f,u,s),+t(f,u,s));if(h)return o=null,h+""||null}return l.x=function(s){return arguments.length?(e=typeof s=="function"?s:Ao(+s),l):e},l.y=function(s){return arguments.length?(t=typeof s=="function"?s:Ao(+s),l):t},l.defined=function(s){return arguments.length?(n=typeof s=="function"?s:Ao(!!s),l):n},l.curve=function(s){return arguments.length?(i=s,r!=null&&(o=i(r)),l):i},l.context=function(s){return arguments.length?(s==null?r=o=null:o=i(r=s),l):r},l}class _S{constructor(t,n){this._context=t,this._x=n}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line}point(t,n){switch(t=+t,n=+n,this._point){case 0:{this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break}case 1:this._point=2;default:{this._x?this._context.bezierCurveTo(this._x0=(this._x0+t)/2,this._y0,this._x0,n,t,n):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+n)/2,t,this._y0,t,n);break}}this._x0=t,this._y0=n}}function mU(e){return new _S(e,!0)}function gU(e){return new _S(e,!1)}const yU=Ge(3),SS={draw(e,t){const n=Ge(t+Qy(t/28,.75))*.59436,r=n/2,i=r*yU;e.moveTo(0,n),e.lineTo(0,-n),e.moveTo(-i,-r),e.lineTo(i,r),e.moveTo(-i,r),e.lineTo(i,-r)}},Rs={draw(e,t){const n=Ge(t/Yf);e.moveTo(n,0),e.arc(0,0,n,0,b0)}},MS={draw(e,t){const n=Ge(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},CS=Ge(1/3),vU=CS*2,ES={draw(e,t){const n=Ge(t/vU),r=n*CS;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},kS={draw(e,t){const n=Ge(t)*.62625;e.moveTo(0,-n),e.lineTo(n,0),e.lineTo(0,n),e.lineTo(-n,0),e.closePath()}},TS={draw(e,t){const n=Ge(t-Qy(t/7,2))*.87559;e.moveTo(-n,0),e.lineTo(n,0),e.moveTo(0,n),e.lineTo(0,-n)}},$S={draw(e,t){const n=Ge(t),r=-n/2;e.rect(r,r,n,n)}},PS={draw(e,t){const n=Ge(t)*.4431;e.moveTo(n,n),e.lineTo(n,-n),e.lineTo(-n,-n),e.lineTo(-n,n),e.closePath()}},wU=.8908130915292852,RS=qf(Yf/10)/qf(7*Yf/10),bU=qf(b0/10)*RS,xU=-bS(b0/10)*RS,NS={draw(e,t){const n=Ge(t*wU),r=bU*n,i=xU*n;e.moveTo(0,-n),e.lineTo(r,i);for(let o=1;o<5;++o){const a=b0*o/5,l=bS(a),s=qf(a);e.lineTo(s*n,-l*n),e.lineTo(l*r-s*i,s*r+l*i)}e.closePath()}},up=Ge(3),AS={draw(e,t){const n=-Ge(t/(up*3));e.moveTo(0,n*2),e.lineTo(-up*n,-n),e.lineTo(up*n,-n),e.closePath()}},_U=Ge(3),IS={draw(e,t){const n=Ge(t)*.6824,r=n/2,i=n*_U/2;e.moveTo(0,-n),e.lineTo(i,r),e.lineTo(-i,r),e.closePath()}},Qt=-.5,Zt=Ge(3)/2,L1=1/Ge(12),SU=(L1/2+1)*3,LS={draw(e,t){const n=Ge(t/SU),r=n/2,i=n*L1,o=r,a=n*L1+n,l=-o,s=a;e.moveTo(r,i),e.lineTo(o,a),e.lineTo(l,s),e.lineTo(Qt*r-Zt*i,Zt*r+Qt*i),e.lineTo(Qt*o-Zt*a,Zt*o+Qt*a),e.lineTo(Qt*l-Zt*s,Zt*l+Qt*s),e.lineTo(Qt*r+Zt*i,Qt*i-Zt*r),e.lineTo(Qt*o+Zt*a,Qt*a-Zt*o),e.lineTo(Qt*l+Zt*s,Qt*s-Zt*l),e.closePath()}},OS={draw(e,t){const n=Ge(t-Qy(t/6,1.7))*.6189;e.moveTo(-n,-n),e.lineTo(n,n),e.moveTo(-n,n),e.lineTo(n,-n)}},MU=[Rs,MS,ES,$S,NS,AS,LS],CU=[Rs,TS,OS,IS,SS,PS,kS];function xi(){}function Xf(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function _0(e){this._context=e}_0.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Xf(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1);break}(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Xf(this,e,t);break}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function EU(e){return new _0(e)}function DS(e){this._context=e}DS.prototype={areaStart:xi,areaEnd:xi,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x2,this._y2),this._context.closePath();break}case 2:{this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break}case 3:{this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4);break}}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:Xf(this,e,t);break}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function kU(e){return new DS(e)}function zS(e){this._context=e}zS.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===3)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Xf(this,e,t);break}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};function TU(e){return new zS(e)}function FS(e,t){this._basis=new _0(e),this._beta=t}FS.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r=e[0],i=t[0],o=e[n]-r,a=t[n]-i,l=-1,s;++l<=n;)s=l/n,this._basis.point(this._beta*e[l]+(1-this._beta)*(r+s*o),this._beta*t[l]+(1-this._beta)*(i+s*a));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}};const $U=function e(t){function n(r){return t===1?new _0(r):new FS(r,t)}return n.beta=function(r){return e(+r)},n}(.85);function Gf(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function Zy(e,t){this._context=e,this._k=(1-t)/6}Zy.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Gf(this,this._x1,this._y1);break}(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:Gf(this,e,t);break}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const PU=function e(t){function n(r){return new Zy(r,t)}return n.tension=function(r){return e(+r)},n}(0);function Jy(e,t){this._context=e,this._k=(1-t)/6}Jy.prototype={areaStart:xi,areaEnd:xi,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3),this._context.closePath();break}case 2:{this._context.lineTo(this._x3,this._y3),this._context.closePath();break}case 3:{this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5);break}}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:Gf(this,e,t);break}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const RU=function e(t){function n(r){return new Jy(r,t)}return n.tension=function(r){return e(+r)},n}(0);function ev(e,t){this._context=e,this._k=(1-t)/6}ev.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===3)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Gf(this,e,t);break}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const NU=function e(t){function n(r){return new ev(r,t)}return n.tension=function(r){return e(+r)},n}(0);function tv(e,t,n){var r=e._x1,i=e._y1,o=e._x2,a=e._y2;if(e._l01_a>sx){var l=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,s=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*l-e._x0*e._l12_2a+e._x2*e._l01_2a)/s,i=(i*l-e._y0*e._l12_2a+e._y2*e._l01_2a)/s}if(e._l23_a>sx){var u=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,c=3*e._l23_a*(e._l23_a+e._l12_a);o=(o*u+e._x1*e._l23_2a-t*e._l12_2a)/c,a=(a*u+e._y1*e._l23_2a-n*e._l12_2a)/c}e._context.bezierCurveTo(r,i,o,a,e._x2,e._y2)}function BS(e,t){this._context=e,this._alpha=t}BS.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2);break}(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:tv(this,e,t);break}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const AU=function e(t){function n(r){return t?new BS(r,t):new Zy(r,0)}return n.alpha=function(r){return e(+r)},n}(.5);function HS(e,t){this._context=e,this._alpha=t}HS.prototype={areaStart:xi,areaEnd:xi,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:{this._context.moveTo(this._x3,this._y3),this._context.closePath();break}case 2:{this._context.lineTo(this._x3,this._y3),this._context.closePath();break}case 3:{this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5);break}}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:tv(this,e,t);break}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const IU=function e(t){function n(r){return t?new HS(r,t):new Jy(r,0)}return n.alpha=function(r){return e(+r)},n}(.5);function US(e,t){this._context=e,this._alpha=t}US.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===3)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:tv(this,e,t);break}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};const LU=function e(t){function n(r){return t?new US(r,t):new ev(r,0)}return n.alpha=function(r){return e(+r)},n}(.5);function WS(e){this._context=e}WS.prototype={areaStart:xi,areaEnd:xi,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}};function OU(e){return new WS(e)}function ux(e){return e<0?-1:1}function cx(e,t,n){var r=e._x1-e._x0,i=t-e._x1,o=(e._y1-e._y0)/(r||i<0&&-0),a=(n-e._y1)/(i||r<0&&-0),l=(o*i+a*r)/(r+i);return(ux(o)+ux(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(l))||0}function fx(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function cp(e,t,n){var r=e._x0,i=e._y0,o=e._x1,a=e._y1,l=(o-r)/3;e._context.bezierCurveTo(r+l,i+l*t,o-l,a-l*n,o,a)}function Kf(e){this._context=e}Kf.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:cp(this,this._t0,fx(this,this._t0));break}(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(e=+e,t=+t,!(e===this._x1&&t===this._y1)){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,cp(this,fx(this,n=cx(this,e,t)),n);break;default:cp(this,this._t0,n=cx(this,e,t));break}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}};function jS(e){this._context=new VS(e)}(jS.prototype=Object.create(Kf.prototype)).point=function(e,t){Kf.prototype.point.call(this,t,e)};function VS(e){this._context=e}VS.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,i,o){this._context.bezierCurveTo(t,e,r,n,o,i)}};function DU(e){return new Kf(e)}function zU(e){return new jS(e)}function qS(e){this._context=e}qS.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),n===2)this._context.lineTo(e[1],t[1]);else for(var r=dx(e),i=dx(t),o=0,a=1;a<n;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],e[a],t[a]);(this._line||this._line!==0&&n===1)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}};function dx(e){var t,n=e.length-1,r,i=new Array(n),o=new Array(n),a=new Array(n);for(i[0]=0,o[0]=2,a[0]=e[0]+2*e[1],t=1;t<n-1;++t)i[t]=1,o[t]=4,a[t]=4*e[t]+2*e[t+1];for(i[n-1]=2,o[n-1]=7,a[n-1]=8*e[n-1]+e[n],t=1;t<n;++t)r=i[t]/o[t-1],o[t]-=r,a[t]-=r*a[t-1];for(i[n-1]=a[n-1]/o[n-1],t=n-2;t>=0;--t)i[t]=(a[t]-i[t+1])/o[t];for(o[n-1]=(e[n]+i[n-1])/2,t=0;t<n-1;++t)o[t]=2*e[t+1]-i[t+1];return[i,o]}function FU(e){return new qS(e)}function S0(e,t){this._context=e,this._t=t}S0.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&this._point===2&&this._context.lineTo(this._x,this._y),(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:{if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}break}}this._x=e,this._y=t}};function BU(e){return new S0(e,.5)}function HU(e){return new S0(e,0)}function UU(e){return new S0(e,1)}function Nl(e,t,n){this.k=e,this.x=t,this.y=n}Nl.prototype={constructor:Nl,scale:function(e){return e===1?this:new Nl(this.k*e,this.x,this.y)},translate:function(e,t){return e===0&t===0?this:new Nl(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};Nl.prototype;function _i(e){return e!=null&&!Number.isNaN(e)}function Aa(e,t){return+_i(t)-+_i(e)||ui(e,t)}function O1(e,t){return+_i(t)-+_i(e)||Ys(e,t)}function nv(e){return e!=null&&`${e}`!=""}function YS(e){return isFinite(e)?e:NaN}function M0(e){return e>0&&isFinite(e)?e:NaN}function rv(e){return e<0&&isFinite(e)?e:NaN}function WU(e,t){if(e instanceof Date||(e=new Date(+e)),isNaN(e))return typeof t=="function"?t(e):t;const n=e.getUTCHours(),r=e.getUTCMinutes(),i=e.getUTCSeconds(),o=e.getUTCMilliseconds();return`${jU(e.getUTCFullYear())}-${cr(e.getUTCMonth()+1,2)}-${cr(e.getUTCDate(),2)}${n||r||i||o?`T${cr(n,2)}:${cr(r,2)}${i||o?`:${cr(i,2)}${o?`.${cr(o,3)}`:""}`:""}Z`:""}`}function jU(e){return e<0?`-${cr(-e,6)}`:e>9999?`+${cr(e,6)}`:cr(e,4)}function cr(e,t){return`${e}`.padStart(t,"0")}const VU=/^(?:[-+]\d{2})?\d{4}(?:-\d{2}(?:-\d{2})?)?(?:T\d{2}:\d{2}(?::\d{2}(?:\.\d{3})?)?(?:Z|[-+]\d{2}:?\d{2})?)?$/;function XS(e,t){return VU.test(e+="")?new Date(e):typeof t=="function"?t(e):t}function Ia(e){if(e==null)return;const t=e[0],n=e[e.length-1];return Ys(t,n)}const Qo=1e3,Kr=Qo*60,Qr=Kr*60,Zn=Qr*24,An=Zn*7,Zi=Zn*30,Hr=Zn*365,fp=[["millisecond",1],["2 milliseconds",2],["5 milliseconds",5],["10 milliseconds",10],["20 milliseconds",20],["50 milliseconds",50],["100 milliseconds",100],["200 milliseconds",200],["500 milliseconds",500],["second",Qo],["5 seconds",5*Qo],["15 seconds",15*Qo],["30 seconds",30*Qo],["minute",Kr],["5 minutes",5*Kr],["15 minutes",15*Kr],["30 minutes",30*Kr],["hour",Qr],["3 hours",3*Qr],["6 hours",6*Qr],["12 hours",12*Qr],["day",Zn],["2 days",2*Zn],["week",An],["2 weeks",2*An],["month",Zi],["3 months",3*Zi],["6 months",6*Zi],["year",Hr],["2 years",2*Hr],["5 years",5*Hr],["10 years",10*Hr],["20 years",20*Hr],["50 years",50*Hr],["100 years",100*Hr]],iv=new Map([["second",Qo],["minute",Kr],["hour",Qr],["day",Zn],["monday",An],["tuesday",An],["wednesday",An],["thursday",An],["friday",An],["saturday",An],["sunday",An],["week",An],["month",Zi],["year",Hr]]),GS=new Map([["second",bn],["minute",Zs],["hour",eu],["day",_o],["monday",Es],["tuesday",K_],["wednesday",Q_],["thursday",fo],["friday",Z_],["saturday",J_],["sunday",Ea],["week",Ea],["month",nu],["year",Cn]]),ov=new Map([["second",bn],["minute",Js],["hour",tu],["day",u0],["monday",ks],["tuesday",e7],["wednesday",t7],["thursday",ho],["friday",n7],["saturday",r7],["sunday",ka],["week",ka],["month",ru],["year",En]]),lu=Symbol("intervalDuration"),C0=Symbol("intervalType");for(const[e,t]of GS)t[lu]=iv.get(e),t[C0]="time";for(const[e,t]of ov)t[lu]=iv.get(e),t[C0]="utc";const Al=[["year",En,"utc"],["month",ru,"utc"],["day",u0,"utc",6*Zi],["hour",tu,"utc",3*Zn],["minute",Js,"utc",6*Qr],["second",bn,"utc",30*Kr]],Pc=[["year",Cn,"time"],["month",nu,"time"],["day",_o,"time",6*Zi],["hour",eu,"time",3*Zn],["minute",Zs,"time",6*Qr],["second",bn,"time",30*Kr]],qU=[Al[0],Pc[0],Al[1],Pc[1],Al[2],Pc[2],...Al.slice(3)];function KS(e){let t=`${e}`.toLowerCase();t.endsWith("s")&&(t=t.slice(0,-1));let n=1;const r=/^(?:(\d+)\s+)/.exec(t);switch(r&&(t=t.slice(r[0].length),n=+r[1]),t){case"quarter":t="month",n*=3;break;case"half":t="month",n*=6;break}let i=ov.get(t);if(!i)throw new Error(`unknown interval: ${e}`);if(n>1&&!i.every)throw new Error(`non-periodic interval: ${t}`);return[t,n]}function QS(e){return JS(KS(e),"time")}function ZS(e){return JS(KS(e),"utc")}function JS([e,t],n){let r=(n==="time"?GS:ov).get(e);return t>1&&(r=r.every(t),r[lu]=iv.get(e)*t,r[C0]=n),r}function hx(e,t){if(!(t>1))return;const n=e[lu];if(!fp.some(([,i])=>i===n)||n%Zn===0&&Zn<n&&n<Zi)return;const[r]=fp[e0(([,i])=>Math.log(i)).center(fp,Math.log(n*t))];return(e[C0]==="time"?QS:ZS)(r)}function px(e,t,n){const r=t==="time"?By:iu;if(n==null)return r(e==="year"?"%Y":e==="month"?"%Y-%m":e==="day"?"%Y-%m-%d":e==="hour"||e==="minute"?"%Y-%m-%dT%H:%M":e==="second"?"%Y-%m-%dT%H:%M:%S":"%Y-%m-%dT%H:%M:%S.%L");const i=YU(n);switch(e){case"millisecond":return Io(r(".%L"),r(":%M:%S"),i);case"second":return Io(r(":%S"),r("%-I:%M"),i);case"minute":return Io(r("%-I:%M"),r("%p"),i);case"hour":return Io(r("%-I %p"),r("%b %-d"),i);case"day":return Io(r("%-d"),r("%b"),i);case"month":return Io(r("%b"),r("%Y"),i);case"year":return r("%Y")}throw new Error("unable to format time ticks")}function YU(e){return e==="left"||e==="right"?(t,n)=>`
${t}
${n}`:e==="top"?(t,n)=>`${n}
${t}`:(t,n)=>`${t}
${n}`}function XU(e){return e==="time"?Pc:e==="utc"?Al:qU}function GU(e,t,n){const r=Kn(FL(t,(i,o)=>Math.abs(o-i)));if(r<1e3)return px("millisecond","utc",n);for(const[i,o,a,l]of XU(e)){if(r>l||i==="hour"&&!r)break;if(t.every(s=>o.floor(s)>=s))return px(i,a,n)}}function Io(e,t,n){return(r,i,o)=>{const a=e(r,i),l=t(r,i),s=i-Ia(o);return i!==s&&o[s]!==void 0&&l===t(o[s],s)?a:n(a,l)}}const av=Object.getPrototypeOf(Uint8Array),KU=Object.prototype.toString;function su(e){return e instanceof Array||e instanceof av}function eM(e){return e instanceof av&&!QU(e)}function tM(e){return(e==null?void 0:e.prototype)instanceof av&&!ZU(e)}function QU(e){return e instanceof BigInt64Array||e instanceof BigUint64Array}function ZU(e){return e===BigInt64Array||e===BigUint64Array}const JU=Symbol("reindex");function Si(e,t,n){const r=typeof t;return r==="string"?sM(e)?lv(e.getChild(t),n):mx(e,tW(t),n):r==="function"?mx(e,t,n):r==="number"||t instanceof Date||r==="boolean"?wt(e,yr(t),n):typeof(t==null?void 0:t.transform)=="function"?D1(t.transform(e),n):eW(D1(t,n),e==null?void 0:e[JU])}function eW(e,t){return e!=null&&t?uv(e,t):e}function mx(e,t,n){return wt(e,tM(n)?(r,i)=>sv(t(r,i)):t,n)}function D1(e,t){return t===void 0?Mi(e):uM(e)?lv(e,t):e instanceof t?e:t.from(e,tM(t)&&!eM(e)?sv:void 0)}function lv(e,t){return e==null?e:(t===void 0||t===Array)&&_W(e.type)?rM(e.toArray()):D1(e.toArray(),t)}const Rc=[null],tW=e=>t=>{var r;const n=t[e];return n===void 0&&t.type==="Feature"?(r=t.properties)==null?void 0:r[e]:n},nW={transform:uu},Lr={transform:e=>e},rW=()=>!0,St=e=>e==null?e:`${e}`,yt=e=>e==null?e:+e,nM=e=>e?e[0]:void 0,iW=e=>e?e[1]:void 0,yr=e=>()=>e;function oW(e){const t=+`${e}`.slice(1)/100;return(n,r)=>_f(n,t,r)}function Qf(e){return eM(e)?e:wt(e,sv,Float64Array)}function sv(e){return e==null?NaN:Number(e)}function rM(e){return wt(e,aW)}function aW(e){return e instanceof Date&&!isNaN(e)?e:typeof e=="string"?XS(e):e==null||isNaN(e=Number(e))?void 0:new Date(e)}function go(e,t){return e===void 0&&(e=t),e===null?[void 0,"none"]:P0(e)?[void 0,e]:[e,void 0]}function Mt(e,t){return e===void 0&&(e=t),e===null||typeof e=="number"?[void 0,e]:[e,void 0]}function iM(e,t,n){if(e!=null)return Tn(e,t,n)}function Tn(e,t,n){const r=`${e}`.toLowerCase();if(!n.includes(r))throw new Error(`invalid ${t}: ${e}`);return r}function La(e){return sM(e)?e:Mi(e)}function Mi(e){if(e==null||su(e))return e;if(uM(e))return lv(e);switch(e.type){case"FeatureCollection":return e.features;case"GeometryCollection":return e.geometries;case"Feature":case"LineString":case"MultiLineString":case"MultiPoint":case"MultiPolygon":case"Point":case"Polygon":case"Sphere":return[e]}return Array.from(e)}function wt(e,t,n=Array){return e==null?e:e instanceof n?e.map(t):n.from(e,t)}function z1(e,t=Array){return e instanceof t?e.slice():t.from(e)}function Co(e){return(e==null?void 0:e.toString)===KU}function F1(e){return Co(e)&&(e.type!==void 0||e.domain!==void 0)}function E0(e){return Co(e)&&typeof e.transform!="function"}function Oa(e){return E0(e)&&e.value===void 0&&e.channel===void 0}function k0(e,t){return e===void 0&&t===void 0?[nM,iW]:[e,t]}function lW({z:e,fill:t,stroke:n}={}){return e===void 0&&([e]=go(t)),e===void 0&&([e]=go(n)),e}function B1(e){return su(e)?e.length:e==null?void 0:e.numRows}function uu(e){const t=B1(e),n=new Uint32Array(t);for(let r=0;r<t;++r)n[r]=r;return n}function uv(e,t){return su(e)?wt(t,n=>e[n],e.constructor):wt(t,n=>e.at(n))}function sW(e,t,n){return e.subarray?e.subarray(t,n):e.slice(t,n)}function vr(e){return e!==null&&typeof e=="object"?e.valueOf():e}function T0(e,t){return typeof e=="string"?e:e&&e.label!==void 0?e.label:t}function uW(e,t){const n=cv(e,t);return n&&(r=>_i(r)?n.floor(r):r)}function cv(e,t){if(e!=null){if(typeof e=="number")return cW(e);if(typeof e=="string")return(t==="time"?QS:ZS)(e);if(typeof e.floor!="function")throw new Error("invalid interval; missing floor method");if(typeof e.offset!="function")throw new Error("invalid interval; missing offset method");return e}}function cW(e){e=+e,0<e&&e<1&&Number.isInteger(1/e)&&(e=-1/e);const t=Math.abs(e);return e<0?{floor:n=>Math.floor(n*t)/t,offset:(n,r=1)=>(n*t+Math.floor(r))/t,range:(n,r)=>n1(Math.ceil(n*t),r*t).map(i=>i/t)}:{floor:n=>Math.floor(n/t)*t,offset:(n,r=1)=>n+t*Math.floor(r),range:(n,r)=>n1(Math.ceil(n/t),r/t).map(i=>i*t)}}function cu(e,t){if(e=cv(e,t),e&&typeof e.range!="function")throw new Error("invalid interval: missing range method");return e}function fW(e,t){if(e=cu(e,t),e&&typeof e.ceil!="function")throw new Error("invalid interval: missing ceil method");return e}function dW(e){return typeof(e==null?void 0:e.range)=="function"}function $0(e){return e===void 0||E0(e)?e:{value:e}}function hW(e){return e==null?null:{transform:t=>Si(t,e,Float64Array),label:T0(e)}}function Eo(e){return e&&typeof e[Symbol.iterator]=="function"}function oM(e){for(const t of e)if(t!=null)return typeof t!="object"||t instanceof Date}function gx(e){for(const t of e){if(t==null)continue;const n=typeof t;return n==="string"||n==="boolean"}}function Jn(e){for(const t of e)if(t!=null)return t instanceof Date}function pW(e){for(const t of e)if(t!=null)return typeof t=="string"&&isNaN(t)&&XS(t)}function mW(e){for(const t of e)if(t!=null){if(typeof t!="string")return!1;if(t.trim())return!isNaN(t)}}function gW(e){for(const t of e)if(t!=null)return typeof t=="number"}function dp(e,t){let n;for(const r of e)if(r!=null){if(!t(r))return!1;n=!0}return n}const yW=new Set("none,currentcolor,transparent,aliceblue,antiquewhite,aqua,aquamarine,azure,beige,bisque,black,blanchedalmond,blue,blueviolet,brown,burlywood,cadetblue,chartreuse,chocolate,coral,cornflowerblue,cornsilk,crimson,cyan,darkblue,darkcyan,darkgoldenrod,darkgray,darkgreen,darkgrey,darkkhaki,darkmagenta,darkolivegreen,darkorange,darkorchid,darkred,darksalmon,darkseagreen,darkslateblue,darkslategray,darkslategrey,darkturquoise,darkviolet,deeppink,deepskyblue,dimgray,dimgrey,dodgerblue,firebrick,floralwhite,forestgreen,fuchsia,gainsboro,ghostwhite,gold,goldenrod,gray,green,greenyellow,grey,honeydew,hotpink,indianred,indigo,ivory,khaki,lavender,lavenderblush,lawngreen,lemonchiffon,lightblue,lightcoral,lightcyan,lightgoldenrodyellow,lightgray,lightgreen,lightgrey,lightpink,lightsalmon,lightseagreen,lightskyblue,lightslategray,lightslategrey,lightsteelblue,lightyellow,lime,limegreen,linen,magenta,maroon,mediumaquamarine,mediumblue,mediumorchid,mediumpurple,mediumseagreen,mediumslateblue,mediumspringgreen,mediumturquoise,mediumvioletred,midnightblue,mintcream,mistyrose,moccasin,navajowhite,navy,oldlace,olive,olivedrab,orange,orangered,orchid,palegoldenrod,palegreen,paleturquoise,palevioletred,papayawhip,peachpuff,peru,pink,plum,powderblue,purple,rebeccapurple,red,rosybrown,royalblue,saddlebrown,salmon,sandybrown,seagreen,seashell,sienna,silver,skyblue,slateblue,slategray,slategrey,snow,springgreen,steelblue,tan,teal,thistle,tomato,turquoise,violet,wheat,white,whitesmoke,yellow".split(","));function P0(e){return typeof e!="string"?!1:(e=e.toLowerCase().trim(),/^#[0-9a-f]{3,8}$/.test(e)||/^(?:url|var|rgb|rgba|hsl|hsla|hwb|lab|lch|oklab|oklch|color|color-mix)\(.*\)$/.test(e)||yW.has(e))}function vW(e){return typeof e=="number"&&(0<=e&&e<=1||isNaN(e))}function $t(e){return e==null||Ns(e)}function Ns(e){return/^\s*none\s*$/i.test(e)}function wW(e){return/^\s*round\s*$/i.test(e)}function H1(e,t){return iM(e,t,["middle","top-left","top","top-right","right","bottom-right","bottom","bottom-left","left"])}function R0(e="middle"){return H1(e,"frameAnchor")}function bW(e={},...t){let n=e;for(const r of t)for(const i in r)if(n[i]===void 0){const o=r[i];n===e?n={...n,[i]:o}:n[i]=o}return n}function xW(e){console.warn("named iterables are deprecated; please use an object instead");const t=new Set;return Object.fromEntries(Array.from(e,n=>{const{name:r}=n;if(r==null)throw new Error("missing name");const i=`${r}`;if(i==="__proto__")throw new Error(`illegal name: ${i}`);if(t.has(i))throw new Error(`duplicate name: ${i}`);return t.add(i),[r,n]}))}function aM(e){return Eo(e)?xW(e):e}function lM(e){return e===!0?e="frame":e===!1?e=null:e!=null&&(e=Tn(e,"clip",["frame","sphere"])),e}function sM(e){return e&&typeof e.getChild=="function"&&typeof e.toArray=="function"&&e.schema&&Array.isArray(e.schema.fields)}function uM(e){return e&&typeof e.toArray=="function"&&e.type}function _W(e){return e&&(e.typeId===8||e.typeId===10)&&e.unit===1}const Un=Symbol("position"),Or=Symbol("color"),fu=Symbol("radius"),du=Symbol("length"),hu=Symbol("opacity"),N0=Symbol("symbol"),cM=Symbol("projection"),Oe=new Map([["x",Un],["y",Un],["fx",Un],["fy",Un],["r",fu],["color",Or],["opacity",hu],["symbol",N0],["length",du],["projection",cM]]);function SW(e){return e===Un||e===cM}function MW(e){return e===Un||e===fu||e===du||e===hu}const CW=Math.sqrt(3),EW=2/CW,kW={draw(e,t){const n=Math.sqrt(t/Math.PI),r=n*EW,i=r/2;e.moveTo(0,r),e.lineTo(n,i),e.lineTo(n,-i),e.lineTo(0,-r),e.lineTo(-n,-i),e.lineTo(-n,i),e.closePath()}},fv=new Map([["asterisk",SS],["circle",Rs],["cross",MS],["diamond",ES],["diamond2",kS],["hexagon",kW],["plus",TS],["square",$S],["square2",PS],["star",NS],["times",OS],["triangle",AS],["triangle2",IS],["wye",LS]]);function dv(e){return e&&typeof e.draw=="function"}function TW(e){return dv(e)?!0:typeof e!="string"?!1:fv.has(e.toLowerCase())}function hv(e){if(e==null||dv(e))return e;const t=fv.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid symbol: ${e}`)}function $W(e){if(e==null||dv(e))return[void 0,e];if(typeof e=="string"){const t=fv.get(`${e}`.toLowerCase());if(t)return[void 0,t]}return[e,void 0]}function fM({filter:e,sort:t,reverse:n,transform:r,initializer:i,...o}={},a){if(r===void 0&&(e!=null&&(r=dM(e)),t!=null&&!Oa(t)&&(r=hp(r,pv(t))),n&&(r=hp(r,hM))),a!=null&&i!=null)throw new Error("transforms cannot be applied after initializers");return{...o,...(t===null||Oa(t))&&{sort:t},transform:hp(r,a)}}function Da({filter:e,sort:t,reverse:n,initializer:r,...i}={},o){return r===void 0&&(e!=null&&(r=dM(e)),t!=null&&!Oa(t)&&(r=pp(r,pv(t))),n&&(r=pp(r,hM))),{...i,...(t===null||Oa(t))&&{sort:t},initializer:pp(r,o)}}function hp(e,t){return e==null?t===null?void 0:t:t==null?e===null?void 0:e:function(n,r,i){return{data:n,facets:r}=e.call(this,n,r,i),t.call(this,La(n),r,i)}}function pp(e,t){return e==null?t===null?void 0:t:t==null?e===null?void 0:e:function(n,r,i,...o){let a,l,s,u,c,f;return{data:l=n,facets:s=r,channels:a}=e.call(this,n,r,i,...o),{data:c=l,facets:f=s,channels:u}=t.call(this,l,s,{...i,...a},...o),{data:c,facets:f,channels:{...a,...u}}}}function PW(e,t){return(e.initializer!=null?Da:fM)(e,t)}function dM(e){return(t,n)=>{const r=Si(t,e);return{data:t,facets:n.map(i=>i.filter(o=>r[o]))}}}function hM(e,t){return{data:e,facets:t.map(n=>n.slice().reverse())}}function RW(e,{sort:t,...n}={}){return{...(E0(e)&&e.channel!==void 0?Da:PW)(n,pv(e)),sort:Oa(t)?t:null}}function pv(e){return(typeof e=="function"&&e.length!==1?NW:AW)(e)}function NW(e){return(t,n)=>{const r=su(t)?(i,o)=>e(t[i],t[o]):(i,o)=>e(t.get(i),t.get(o));return{data:t,facets:n.map(i=>i.slice().sort(r))}}}function AW(e){let t,n;({channel:t,value:e,order:n}={...$0(e)});const r=t==null?void 0:t.startsWith("-");if(r&&(t=t.slice(1)),n===void 0&&(n=r?O1:Aa),typeof n!="function")switch(`${n}`.toLowerCase()){case"ascending":n=Aa;break;case"descending":n=O1;break;default:throw new Error(`invalid order: ${n}`)}return(i,o,a)=>{let l;if(t===void 0)l=Si(i,e);else{if(a===void 0)throw new Error("channel sort requires an initializer");if(l=a[t],!l)return{};l=l.value}const s=(u,c)=>n(l[u],l[c]);return{data:i,facets:o.map(u=>u.slice().sort(s))}}}function IW(e,t,n=LW){if(e==null)return n(e);if(typeof e.reduceIndex=="function")return e;if(typeof e.reduce=="function"&&Co(e))return OW(e);if(typeof e=="function")return DW(e);if(/^p\d{2}$/i.test(e))return lr(oW(e));switch(`${e}`.toLowerCase()){case"first":return FW;case"last":return BW;case"identity":return zW;case"count":return vx;case"distinct":return HW;case"sum":return t==null?vx:UW;case"proportion":return wx(t,"data");case"proportion-facet":return wx(t,"facet");case"deviation":return lr(CL);case"min":return lr(_s);case"min-index":return lr(IL);case"max":return lr(Kn);case"max-index":return lr(AL);case"mean":return yx(OL);case"median":return yx(t1);case"variance":return lr(h_);case"mode":return lr(zL)}return n(e)}function LW(e){throw new Error(`invalid reduce: ${e}`)}function OW(e){return console.warn("deprecated reduce interface; implement reduceIndex instead."),{...e,reduceIndex:e.reduce.bind(e)}}function DW(e){return{reduceIndex(t,n,r){return e(uv(n,t),r)}}}function lr(e){return{reduceIndex(t,n){return e(t,r=>n[r])}}}function yx(e){return{reduceIndex(t,n){const r=e(t,i=>n[i]);return Jn(n)?new Date(r):r}}}const zW={reduceIndex(e,t){return uv(t,e)}},FW={reduceIndex(e,t){return t[e[0]]}},BW={reduceIndex(e,t){return t[e[e.length-1]]}},vx={label:"Frequency",reduceIndex(e){return e.length}},HW={label:"Distinct",reduceIndex(e,t){const n=new t0;for(const r of e)n.add(t[r]);return n.size}},UW=lr($y);function wx(e,t){return e==null?{scope:t,label:"Frequency",reduceIndex:(n,r,i=1)=>n.length/i}:{scope:t,reduceIndex:(n,r,i=1)=>$y(n,o=>r[o])/i}}function As(e,{scale:t,type:n,value:r,filter:i,hint:o,label:a=T0(r)},l){return o===void 0&&typeof(r==null?void 0:r.transform)=="function"&&(o=r.hint),pM(l,{scale:t,type:n,value:Si(e,r),label:a,filter:i,hint:o})}function WW(e,t){return Object.fromEntries(Object.entries(e).map(([n,r])=>[n,As(t,r,n)]))}function jW(e,t){const n=Object.fromEntries(Object.entries(e).map(([r,{scale:i,value:o}])=>{const a=i==null?null:t[i];return[r,a==null?o:wt(o,a)]}));return n.channels=e,n}function pM(e,t){const{scale:n,value:r}=t;if(n===!0||n==="auto")switch(e){case"fill":case"stroke":case"color":t.scale=n!==!0&&dp(r,P0)?null:"color",t.defaultScale="color";break;case"fillOpacity":case"strokeOpacity":case"opacity":t.scale=n!==!0&&dp(r,vW)?null:"opacity",t.defaultScale="opacity";break;case"symbol":n!==!0&&dp(r,TW)?(t.scale=null,t.value=wt(r,hv)):t.scale="symbol",t.defaultScale="symbol";break;default:t.scale=Oe.has(e)?e:null;break}else if(n===!1)t.scale=null;else if(n!=null&&!Oe.has(n))throw new Error(`unknown scale: ${n}`);return t}function VW(e,t,n,r,i){const{order:o,reverse:a,reduce:l=!0,limit:s}=i;for(const u in i){if(!Oe.has(u))continue;let{value:c,order:f=o,reverse:d=a,reduce:h=l,limit:m=s}=$0(i[u]);const p=c==null?void 0:c.startsWith("-");if(p&&(c=c.slice(1)),f=f===void 0?p!==(c==="width"||c==="height")?gM:mM:XW(f),h==null||h===!1)continue;const w=u==="fx"||u==="fy"?YW(t,r[u]):qW(n,u);if(!w)throw new Error(`missing channel for scale: ${u}`);const y=w.value,[g=0,v=1/0]=Eo(m)?m:m<0?[m]:[0,m];if(c==null)w.domain=()=>{let b=Array.from(new t0(y));return d&&(b=b.reverse()),(g!==0||v!==1/0)&&(b=b.slice(g,v)),b};else{const b=c==="data"?e:c==="height"?bx(n,"y1","y2"):c==="width"?bx(n,"x1","x2"):U1(n,c,c==="y"?"y2":c==="x"?"x2":void 0),_=IW(h===!0?"max":h,b);w.domain=()=>{let M=kL(uu(y),S=>_.reduceIndex(S,b),S=>y[S]);return f&&M.sort(f),d&&M.reverse(),(g!==0||v!==1/0)&&(M=M.slice(g,v)),M.map(nM)}}}}function qW(e,t){for(const n in e){const r=e[n];if(r.scale===t)return r}}function YW(e,t){const n=e.original;if(n===e)return t;const r=t.value,i=t.value=[];for(let o=0;o<n.length;++o){const a=r[n[o][0]];for(const l of e[o])i[l]=a}return t}function bx(e,t,n){const r=U1(e,t),i=U1(e,n);return wt(i,(o,a)=>Math.abs(o-r[a]),Float64Array)}function U1(e,t,n){let r=e[t];if(!r&&n!==void 0&&(r=e[n]),r)return r.value;throw new Error(`missing channel: ${t}`)}function XW(e){if(e==null||typeof e=="function")return e;switch(`${e}`.toLowerCase()){case"ascending":return mM;case"descending":return gM}throw new Error(`invalid order: ${e}`)}function mM([e,t],[n,r]){return Aa(t,r)||Aa(e,n)}function gM([e,t],[n,r]){return O1(t,r)||Aa(e,n)}function xx(e,t){let n=e[t];if(n){for(;n.source;)n=n.source;return n.source===null?null:n}}const yM=new Map([["accent",ZH],["category10",QH],["dark2",JH],["observable10",eU],["paired",tU],["pastel1",nU],["pastel2",rU],["set1",iU],["set2",oU],["set3",aU],["tableau10",lU]]);function GW(e){return e!=null&&yM.has(`${e}`.toLowerCase())}const _x=new Map([...yM,["brbg",ir(h9,p9)],["prgn",ir(m9,g9)],["piyg",ir(y9,v9)],["puor",ir(w9,b9)],["rdbu",ir(A1,jf)],["rdgy",ir(x9,_9)],["rdylbu",ir(I1,Vf)],["rdylgn",ir(S9,M9)],["spectral",ir(C9,E9)],["burd",Sx(A1,jf)],["buylrd",Sx(I1,Vf)],["blues",Ke(Q9,Z9)],["greens",Ke(J9,eS)],["greys",Ke(tS,nS)],["oranges",Ke(lS,sS)],["purples",Ke(rS,iS)],["reds",Ke(oS,aS)],["turbo",or(mS)],["viridis",or(gS)],["magma",or(yS)],["inferno",or(vS)],["plasma",or(wS)],["cividis",or(uS)],["cubehelix",or(cS)],["warm",or(fS)],["cool",or(dS)],["bugn",Ke(k9,T9)],["bupu",Ke($9,P9)],["gnbu",Ke(R9,N9)],["orrd",Ke(A9,I9)],["pubu",Ke(D9,z9)],["pubugn",Ke(L9,O9)],["purd",Ke(F9,B9)],["rdpu",Ke(H9,U9)],["ylgn",Ke(V9,q9)],["ylgnbu",Ke(W9,j9)],["ylorbr",Ke(Y9,X9)],["ylorrd",Ke(G9,K9)],["rainbow",Mx(hS)],["sinebow",Mx(pS)]]);function Ke(e,t){return({length:n})=>n===1?[e[3][1]]:n===2?[e[3][1],e[3][2]]:(n=Math.max(3,Math.floor(n)),n>9?Mn(t,n):e[n])}function ir(e,t){return({length:n})=>n===2?[e[3][0],e[3][2]]:(n=Math.max(3,Math.floor(n)),n>11?Mn(t,n):e[n])}function Sx(e,t){return({length:n})=>n===2?[e[3][2],e[3][0]]:(n=Math.max(3,Math.floor(n)),n>11?Mn(r=>t(1-r),n):e[n].slice().reverse())}function or(e){return({length:t})=>Mn(e,Math.max(2,Math.floor(t)))}function Mx(e){return({length:t})=>Mn(e,Math.floor(t)+1).slice(0,-1)}function vM(e){const t=`${e}`.toLowerCase();if(!_x.has(t))throw new Error(`unknown ordinal scheme: ${t}`);return _x.get(t)}function A0(e,t){const n=vM(e),r=typeof n=="function"?n({length:t}):n;return r.length!==t?r.slice(0,t):r}function KW(e,t="greys"){const n=new Set,[r,i]=A0(t,2);for(const o of e)if(o!=null)if(o===!0)n.add(i);else if(o===!1)n.add(r);else return;return[...n]}const Cx=new Map([["brbg",p9],["prgn",g9],["piyg",v9],["puor",b9],["rdbu",jf],["rdgy",_9],["rdylbu",Vf],["rdylgn",M9],["spectral",E9],["burd",e=>jf(1-e)],["buylrd",e=>Vf(1-e)],["blues",Z9],["greens",eS],["greys",nS],["purples",iS],["reds",aS],["oranges",sS],["turbo",mS],["viridis",gS],["magma",yS],["inferno",vS],["plasma",wS],["cividis",uS],["cubehelix",cS],["warm",fS],["cool",dS],["bugn",T9],["bupu",P9],["gnbu",N9],["orrd",I9],["pubugn",O9],["pubu",z9],["purd",B9],["rdpu",U9],["ylgnbu",j9],["ylgn",q9],["ylorbr",X9],["ylorrd",K9],["rainbow",hS],["sinebow",pS]]);function mv(e){const t=`${e}`.toLowerCase();if(!Cx.has(t))throw new Error(`unknown quantitative scheme: ${t}`);return Cx.get(t)}const QW=new Set(["brbg","prgn","piyg","puor","rdbu","rdgy","rdylbu","rdylgn","spectral","burd","buylrd"]);function ZW(e){return e!=null&&QW.has(`${e}`.toLowerCase())}const wM=e=>t=>e(1-t),mp=[0,1],Ex=new Map([["number",mt],["rgb",co],["hsl",wO],["hcl",_O],["lab",bO]]);function bM(e){const t=`${e}`.toLowerCase();if(!Ex.has(t))throw new Error(`unknown interpolator: ${t}`);return Ex.get(t)}function pu(e,t,n,{type:r,nice:i,clamp:o,zero:a,domain:l=_M(e,n),unknown:s,round:u,scheme:c,interval:f,range:d=Oe.get(e)===fu?uj(n,l):Oe.get(e)===du?cj(n,l):Oe.get(e)===hu?mp:void 0,interpolate:h=Oe.get(e)===Or?c==null&&d!==void 0?co:mv(c!==void 0?c:r==="cyclical"?"rainbow":"turbo"):u?Ly:mt,reverse:m}){if(f=cu(f,r),(r==="cyclical"||r==="sequential")&&(r="linear"),typeof h!="function"&&(h=bM(h)),m=!!m,d!==void 0){const p=(l=Mi(l)).length,w=(d=Mi(d)).length;if(p!==w){if(h.length===1)throw new Error("invalid piecewise interpolator");h=a0(h,d),d=void 0}}if(h.length===1?(m&&(h=wM(h),m=!1),d===void 0&&(d=Float64Array.from(l,(p,w)=>w/(l.length-1)),d.length===2&&(d=mp)),t.interpolate((d===mp?yr:yv)(h))):t.interpolate(h),a){const[p,w]=ci(l);(p>0||w<0)&&(l=z1(l),(Ia(l)||1)===Math.sign(p)?l[0]=0:l[l.length-1]=0)}return m&&(l=Sf(l)),t.domain(l).unknown(s),i&&(t.nice(JW(i,r)),l=t.domain()),d!==void 0&&t.range(d),o&&t.clamp(o),{type:r,domain:l,range:d,scale:t,interpolate:h,interval:f}}function JW(e,t){return e===!0?void 0:typeof e=="number"?e:fW(e,t)}function ej(e,t,n){return pu(e,zy(),t,n)}function tj(e,t,n){return xM(e,t,{...n,exponent:.5})}function xM(e,t,{exponent:n=1,...r}){return pu(e,Y_().exponent(n),t,{...r,type:"pow"})}function nj(e,t,{base:n=10,domain:r=fj(t),...i}){return pu(e,W_().base(n),t,{...i,domain:r})}function rj(e,t,{constant:n=1,...r}){return pu(e,V_().constant(n),t,r)}function ij(e,t,{range:n,quantiles:r=n===void 0?5:(n=[...n]).length,n:i=r,scheme:o="rdylbu",domain:a=dj(t),unknown:l,interpolate:s,reverse:u}){return n===void 0&&(n=s!==void 0?Mn(s,i):Oe.get(e)===Or?A0(o,i):void 0),a.length>0&&(a=X_(a,n===void 0?{length:i}:n).quantiles()),gv(e,t,{domain:a,range:n,reverse:u,unknown:l})}function oj(e,t,{range:n,n:r=n===void 0?5:(n=[...n]).length,scheme:i="rdylbu",domain:o=_M(e,t),unknown:a,interpolate:l,reverse:s}){const[u,c]=ci(o);let f;return n===void 0?(f=xf(u,c,r),f[0]<=u&&f.splice(0,1),f[f.length-1]>=c&&f.pop(),r=f.length+1,n=l!==void 0?Mn(l,r):Oe.get(e)===Or?A0(i,r):void 0):(f=Mn(mt(u,c),r+1).slice(1,-1),u instanceof Date&&(f=f.map(d=>new Date(d)))),Ia(Mi(o))<0&&f.reverse(),gv(e,t,{domain:f,range:n,reverse:s,unknown:a})}function gv(e,t,{domain:n=[0],unknown:r,scheme:i="rdylbu",interpolate:o,range:a=o!==void 0?Mn(o,n.length+1):Oe.get(e)===Or?A0(i,n.length+1):void 0,reverse:l}){n=Mi(n);const s=Ia(n);if(!isNaN(s)&&!aj(n,s))throw new Error(`the ${e} scale has a non-monotonic domain`);return l&&(a=Sf(a)),{type:"threshold",scale:G_(s<0?Sf(n):n,a===void 0?[]:a).unknown(r),domain:n,range:a}}function aj(e,t){for(let n=1,r=e.length,i=e[0];n<r;++n){const o=Ys(i,i=e[n]);if(o!==0&&o!==t)return!1}return!0}function lj(e){return{type:"identity",scale:MW(Oe.get(e))?B_():t=>t}}function Is(e,t=YS){return e.length?[_s(e,({value:n})=>n===void 0?n:_s(n,t)),Kn(e,({value:n})=>n===void 0?n:Kn(n,t))]:[0,1]}function _M(e,t){const n=Oe.get(e);return(n===fu||n===hu||n===du?sj:Is)(t)}function sj(e){return[0,e.length?Kn(e,({value:t})=>t===void 0?t:Kn(t,YS)):1]}function uj(e,t){const n=e.find(({radius:a})=>a!==void 0);if(n!==void 0)return[0,n.radius];const r=_f(e,.5,({value:a})=>a===void 0?NaN:_f(a,.25,M0)),i=t.map(a=>3*Math.sqrt(a/r)),o=30/Kn(i);return o<1?i.map(a=>a*o):i}function cj(e,t){const n=t1(e,({value:o})=>o===void 0?NaN:t1(o,Math.abs)),r=t.map(o=>12*o/n),i=60/Kn(r);return i<1?r.map(o=>o*i):r}function fj(e){for(const{value:t}of e)if(t!==void 0)for(let n of t){if(n>0)return Is(e,M0);if(n<0)return Is(e,rv)}return[1,10]}function dj(e){const t=[];for(const{value:n}of e)if(n!==void 0)for(const r of n)t.push(r);return t}function yv(e){return(t,n)=>r=>e(t+r*(n-t))}let W1=0,j1;function hj(){const e=W1;return W1=0,j1=void 0,e}function fi(e){e!==j1&&(j1=e,console.warn(e),++W1)}function I0(e,t,n,r,{type:i,nice:o,clamp:a,domain:l=Is(r),unknown:s,pivot:u=0,scheme:c,range:f,symmetric:d=!0,interpolate:h=Oe.get(e)===Or?c==null&&f!==void 0?co:mv(c!==void 0?c:"rdbu"):mt,reverse:m}){u=+u,l=Mi(l);let[p,w]=l;if(l.length>2&&fi(`Warning: the diverging ${e} scale domain contains extra elements.`),Ys(p,w)<0&&([p,w]=[w,p],m=!m),p=Math.min(p,u),w=Math.max(w,u),typeof h!="function"&&(h=bM(h)),f!==void 0&&(h=h.length===1?yv(h)(...f):a0(h,f)),m&&(h=wM(h)),d){const y=n.apply(u),g=y-n.apply(p),v=n.apply(w)-y;g<v?p=n.invert(y-v):g>v&&(w=n.invert(y+g))}return t.domain([p,u,w]).unknown(s).interpolator(h),a&&t.clamp(a),o&&t.nice(o),{type:i,domain:[p,w],pivot:u,interpolate:h,scale:t}}function pj(e,t,n){return I0(e,u7(),vj,t,n)}function mj(e,t,n){return SM(e,t,{...n,exponent:.5})}function SM(e,t,{exponent:n=1,...r}){return I0(e,d7().exponent(n=+n),xj(n),t,{...r,type:"diverging-pow"})}function gj(e,t,{base:n=10,pivot:r=1,domain:i=Is(t,r<0?rv:M0),...o}){return I0(e,c7().base(n=+n),wj,t,{domain:i,pivot:r,...o})}function yj(e,t,{constant:n=1,...r}){return I0(e,f7().constant(n=+n),_j(n),t,r)}const vj={apply(e){return e},invert(e){return e}},wj={apply:Math.log,invert:Math.exp},bj={apply(e){return Math.sign(e)*Math.sqrt(Math.abs(e))},invert(e){return Math.sign(e)*(e*e)}};function xj(e){return e===.5?bj:{apply(t){return Math.sign(t)*Math.pow(Math.abs(t),e)},invert(t){return Math.sign(t)*Math.pow(Math.abs(t),1/e)}}}function _j(e){return{apply(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))},invert(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}}function MM(e,t,n,r){return pu(e,t,n,r)}function Sj(e,t,n){return MM(e,JD(),t,n)}function Mj(e,t,n){return MM(e,ez(),t,n)}const mu=Symbol("ordinal");function CM(e,t,n,{type:r,interval:i,domain:o,range:a,reverse:l,hint:s}){return i=cu(i,r),o===void 0&&(o=kM(n,i,e)),(r==="categorical"||r===mu)&&(r="ordinal"),l&&(o=Sf(o)),o=t.domain(o).domain(),a!==void 0&&(typeof a=="function"&&(a=a(o)),t.range(a)),{type:r,domain:o,range:a,scale:t,hint:s,interval:i}}function Cj(e,t,{type:n,interval:r,domain:i,range:o,scheme:a,unknown:l,...s}){r=cu(r,n),i===void 0&&(i=kM(t,r,e));let u;if(Oe.get(e)===N0)u=Tj(t),o=o===void 0?$j(u):wt(o,hv);else if(Oe.get(e)===Or&&(o===void 0&&(n==="ordinal"||n===mu)&&(o=KW(i,a),o!==void 0&&(a=void 0)),a===void 0&&o===void 0&&(a=n==="ordinal"?"turbo":"observable10"),a!==void 0))if(o!==void 0){const c=mv(a),f=o[0],d=o[1]-o[0];o=({length:h})=>Mn(m=>c(f+d*m),h)}else o=vM(a);if(l===r1)throw new Error(`implicit unknown on ${e} scale is not supported`);return CM(e,Py().unknown(l),t,{...s,type:n,domain:i,range:o,hint:u})}function Ej(e,t,{align:n=.5,padding:r=.5,...i}){return EM(HL().align(n).padding(r),t,i,e)}function kj(e,t,{align:n=.5,padding:r=.1,paddingInner:i=r,paddingOuter:o=e==="fx"||e==="fy"?0:r,...a}){return EM(r0().align(n).paddingInner(i).paddingOuter(o),t,a,e)}function EM(e,t,n,r){let{round:i}=n;return i!==void 0&&e.round(i=!!i),e=CM(r,e,t,n),e.round=i,e}function kM(e,t,n){const r=new t0;for(const{value:i,domain:o}of e){if(o!==void 0)return o();if(i!==void 0)for(const a of i)r.add(a)}if(t!==void 0){const[i,o]=ci(r).map(t.floor,t);return t.range(i,t.offset(o))}if(r.size>1e4&&Oe.get(n)===Un)throw new Error(`implicit ordinal domain of ${n} scale has more than 10,000 values`);return $L(r,Aa)}function kx(e,t){let n;for(const{hint:r}of e){const i=r==null?void 0:r[t];if(i!==void 0){if(n===void 0)n=i;else if(n!==i)return}}return n}function Tj(e){return{fill:kx(e,"fill"),stroke:kx(e,"stroke")}}function $j(e){return $t(e.fill)?CU:MU}function V1(e,{label:t,inset:n=0,insetTop:r=n,insetRight:i=n,insetBottom:o=n,insetLeft:a=n,round:l,nice:s,clamp:u,zero:c,align:f,padding:d,projection:h,facet:{label:m=t}={},...p}={}){const w={};for(const[y,g]of e){const v=p[y],b=Ij(y,g,{round:Oe.get(y)===Un?l:void 0,nice:s,clamp:u,zero:c,align:f,padding:d,projection:h,...v});if(b){let{label:_=y==="fx"||y==="fy"?m:t,percent:M,transform:S,inset:C,insetTop:k=C!==void 0?C:y==="y"?r:0,insetRight:$=C!==void 0?C:y==="x"?i:0,insetBottom:E=C!==void 0?C:y==="y"?o:0,insetLeft:U=C!==void 0?C:y==="x"?a:0}=v||{};if(S==null)S=void 0;else if(typeof S!="function")throw new Error("invalid scale transform; not a function");b.percent=!!M,b.label=_===void 0?Rj(g,b):_,b.transform=S,y==="x"||y==="fx"?(b.insetLeft=+U,b.insetRight=+$):(y==="y"||y==="fy")&&(b.insetTop=+k,b.insetBottom=+E),w[y]=b}}return w}function Tx(e){const t={},n={scales:t};for(const[r,i]of Object.entries(e)){const{scale:o,type:a,interval:l,label:s}=i;t[r]=Fj(i),n[r]=o,o.type=a,l!=null&&(o.interval=l),s!=null&&(o.label=s)}return n}function Pj(e,t){const{x:n,y:r,fx:i,fy:o}=e,a=i||o?vv(t):t;i&&$x(i,a),o&&Px(o,a);const l=i||o?TM(e,t):t;n&&$x(n,l),r&&Px(r,l)}function Rj(e=[],t){let n;for(const{label:r}of e)if(r!==void 0){if(n===void 0)n=r;else if(n!==r)return}if(n!==void 0)return!ko(t)&&t.percent&&(n=`${n} (%)`),{inferred:!0,toString:()=>n}}function Nj(e){return Math.sign(Ia(e.domain()))*Math.sign(Ia(e.range()))}function vv(e){const{marginTop:t,marginRight:n,marginBottom:r,marginLeft:i,width:o,height:a,facet:{marginTop:l,marginRight:s,marginBottom:u,marginLeft:c}}=e;return{marginTop:Math.max(t,l),marginRight:Math.max(n,s),marginBottom:Math.max(r,u),marginLeft:Math.max(i,c),width:o,height:a}}function TM({fx:e,fy:t},n){const{marginTop:r,marginRight:i,marginBottom:o,marginLeft:a,width:l,height:s}=vv(n);return{marginTop:r,marginRight:i,marginBottom:o,marginLeft:a,width:e?e.scale.bandwidth()+a+i:l,height:t?t.scale.bandwidth()+r+o:s,facet:{width:l,height:s}}}function $x(e,t){if(e.range===void 0){const{insetLeft:n,insetRight:r}=e,{width:i,marginLeft:o=0,marginRight:a=0}=t,l=o+n,s=i-a-r;e.range=[l,Math.max(l,s)],ko(e)||(e.range=PM(e)),e.scale.range(e.range)}$M(e)}function Px(e,t){if(e.range===void 0){const{insetTop:n,insetBottom:r}=e,{height:i,marginTop:o=0,marginBottom:a=0}=t,l=o+n,s=i-a-r;e.range=[Math.max(l,s),l],ko(e)?e.range.reverse():e.range=PM(e),e.scale.range(e.range)}$M(e)}function $M(e){e.round===void 0&&Oj(e)&&Aj(e)<=30&&e.scale.round(!0)}function Aj({scale:e}){const t=e.domain().length,[n,r]=e.range(),i=e.paddingInner?e.paddingInner():1,o=e.paddingOuter?e.paddingOuter():e.padding(),a=t-i,l=Math.abs(r-n)/Math.max(1,a+o*2);return(l-Math.floor(l))*a}function PM(e){const t=e.scale.domain().length+RM(e);if(!(t>2))return e.range;const[n,r]=e.range;return Array.from({length:t},(i,o)=>n+o/(t-1)*(r-n))}function Ij(e,t=[],n={}){const r=Lj(e,t,n);if(n.type===void 0&&n.domain===void 0&&n.range===void 0&&n.interval==null&&e!=="fx"&&e!=="fy"&&ko({type:r})){const i=t.map(({value:o})=>o).filter(o=>o!==void 0);i.some(Jn)?fi(`Warning: some data associated with the ${e} scale are dates. Dates are typically associated with a "utc" or "time" scale rather than a "${Lo(r)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can specify the interval of the ${e} scale (e.g., d3.utcDay), or you can suppress this warning by setting the type of the ${e} scale to "${Lo(r)}".`):i.some(pW)?fi(`Warning: some data associated with the ${e} scale are strings that appear to be dates (e.g., YYYY-MM-DD). If these strings represent dates, you should parse them to Date objects. Dates are typically associated with a "utc" or "time" scale rather than a "${Lo(r)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can suppress this warning by setting the type of the ${e} scale to "${Lo(r)}".`):i.some(mW)&&fi(`Warning: some data associated with the ${e} scale are strings that appear to be numbers. If these strings represent numbers, you should parse or coerce them to numbers. Numbers are typically associated with a "linear" scale rather than a "${Lo(r)}" scale. If you want to treat this data as ordinal, you can specify the interval of the ${e} scale (e.g., 1 for integers), or you can suppress this warning by setting the type of the ${e} scale to "${Lo(r)}".`)}switch(n.type=r,r){case"diverging":case"diverging-sqrt":case"diverging-pow":case"diverging-log":case"diverging-symlog":case"cyclical":case"sequential":case"linear":case"sqrt":case"threshold":case"quantile":case"pow":case"log":case"symlog":n=ec(t,n,Qf);break;case"identity":switch(Oe.get(e)){case Un:n=ec(t,n,Qf);break;case N0:n=ec(t,n,Dj);break}break;case"utc":case"time":n=ec(t,n,rM);break}switch(r){case"diverging":return pj(e,t,n);case"diverging-sqrt":return mj(e,t,n);case"diverging-pow":return SM(e,t,n);case"diverging-log":return gj(e,t,n);case"diverging-symlog":return yj(e,t,n);case"categorical":case"ordinal":case mu:return Cj(e,t,n);case"cyclical":case"sequential":case"linear":return ej(e,t,n);case"sqrt":return tj(e,t,n);case"threshold":return gv(e,t,n);case"quantile":return ij(e,t,n);case"quantize":return oj(e,t,n);case"pow":return xM(e,t,n);case"log":return nj(e,t,n);case"symlog":return rj(e,t,n);case"utc":return Mj(e,t,n);case"time":return Sj(e,t,n);case"point":return Ej(e,t,n);case"band":return kj(e,t,n);case"identity":return lj(e);case void 0:return;default:throw new Error(`unknown scale type: ${r}`)}}function Lo(e){return typeof e=="symbol"?e.description:e}function Rx(e){return typeof e=="string"?`${e}`.toLowerCase():e}const Nx={toString:()=>"projection"};function Lj(e,t,{type:n,domain:r,range:i,scheme:o,pivot:a,projection:l}){if(n=Rx(n),e==="fx"||e==="fy")return"band";(e==="x"||e==="y")&&l!=null&&(n=Nx);for(const u of t){const c=Rx(u.type);if(c!==void 0){if(n===void 0)n=c;else if(n!==c)throw new Error(`scale incompatible with channel: ${n} !== ${c}`)}}if(n===Nx)return;if(n!==void 0)return n;if(r===void 0&&!t.some(({value:u})=>u!==void 0))return;const s=Oe.get(e);if(s===fu)return"sqrt";if(s===hu||s===du)return"linear";if(s===N0)return"ordinal";if((r||i||[]).length>2)return gp(s);if(r!==void 0){if(gx(r))return gp(s);if(Jn(r))return"utc"}else{const u=t.map(({value:c})=>c).filter(c=>c!==void 0);if(u.some(gx))return gp(s);if(u.some(Jn))return"utc"}if(s===Or){if(a!=null||ZW(o))return"diverging";if(GW(o))return"categorical"}return"linear"}function gp(e){switch(e){case Un:return"point";case Or:return mu;default:return"ordinal"}}function ko({type:e}){return e==="ordinal"||e==="point"||e==="band"||e===mu}function RM({type:e}){return e==="threshold"}function Oj({type:e}){return e==="point"||e==="band"}function Zf(e){if(e===void 0)return!0;const t=e.domain(),n=e(t[0]);for(let r=1,i=t.length;r<i;++r)if(e(t[r])-n)return!1;return!0}function ec(e,{domain:t,...n},r){var i;for(const o of e)o.value!==void 0&&(t===void 0&&(t=(i=o.value)==null?void 0:i.domain),o.value=r(o.value));return{domain:t===void 0?t:r(t),...n}}function Dj(e){return wt(e,hv)}function zj(e){return t=>{if(!Oe.has(t=`${t}`))throw new Error(`unknown scale: ${t}`);return e[t]}}function Fj({scale:e,type:t,domain:n,range:r,interpolate:i,interval:o,transform:a,percent:l,pivot:s}){if(t==="identity")return{type:"identity",apply:c=>c,invert:c=>c};const u=e.unknown?e.unknown():void 0;return{type:t,domain:z1(n),...r!==void 0&&{range:z1(r)},...a!==void 0&&{transform:a},...l&&{percent:l},...u!==void 0&&{unknown:u},...o!==void 0&&{interval:o},...i!==void 0&&{interpolate:i},...e.clamp&&{clamp:e.clamp()},...s!==void 0&&{pivot:s,symmetric:!1},...e.base&&{base:e.base()},...e.exponent&&{exponent:e.exponent()},...e.constant&&{constant:e.constant()},...e.align&&{align:e.align(),round:e.round()},...e.padding&&(e.paddingInner?{paddingInner:e.paddingInner(),paddingOuter:e.paddingOuter()}:{padding:e.padding()}),...e.bandwidth&&{bandwidth:e.bandwidth(),step:e.step()},apply:c=>e(c),...e.invert&&{invert:c=>e.invert(c)}}}function Bj(e,t){const{fx:n,fy:r}=V1(e,t),i=n==null?void 0:n.scale.domain(),o=r==null?void 0:r.scale.domain();return i&&o?ML(i,o).map(([a,l],s)=>({x:a,y:l,i:s})):i?i.map((a,l)=>({x:a,i:l})):o?o.map((a,l)=>({y:a,i:l})):void 0}function Hj(e,{x:t,y:n}){return t&&(t=q1(t)),n&&(n=q1(n)),e.filter(t&&n?r=>t.has(r.x)&&n.has(r.y):t?r=>t.has(r.x):r=>n.has(r.y)).sort(t&&n?(r,i)=>t.get(r.x)-t.get(i.x)||n.get(r.y)-n.get(i.y):t?(r,i)=>t.get(r.x)-t.get(i.x):(r,i)=>n.get(r.y)-n.get(i.y))}function wv(e,{fx:t,fy:n}){const r=uu(e),i=t==null?void 0:t.value,o=n==null?void 0:n.value;return t&&n?qh(r,a=>(a.fx=i[a[0]],a.fy=o[a[0]],a),a=>i[a],a=>o[a]):t?qh(r,a=>(a.fx=i[a[0]],a),a=>i[a]):qh(r,a=>(a.fy=o[a[0]],a),a=>o[a])}function Uj(e,t,{marginTop:n,marginLeft:r}){return e&&t?({x:i,y:o})=>`translate(${e(i)-r},${t(o)-n})`:e?({x:i})=>`translate(${e(i)-r},0)`:({y:i})=>`translate(0,${t(i)-n})`}function Wj(e){const t=[],n=new Uint32Array($y(e,r=>r.length));for(const r of e){let i=0;for(const o of e)r!==o&&(n.set(o,i),i+=o.length);t.push(n.slice(0,i))}return t}const jj=new Map([["top",yp],["right",bp],["bottom",vp],["left",wp],["top-left",tc(yp,wp)],["top-right",tc(yp,bp)],["bottom-left",tc(vp,wp)],["bottom-right",tc(vp,bp)],["top-empty",Yj],["right-empty",Kj],["bottom-empty",Xj],["left-empty",Gj],["empty",Qj]]);function Vj(e){if(e==null)return null;const t=jj.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid facet anchor: ${e}`)}const Ax=new WeakMap;function q1(e){let t=Ax.get(e);return t||Ax.set(e,t=new xs(wt(e,(n,r)=>[n,r]))),t}function Ni(e,t){return q1(e).get(t)}function qj(e,t,n){return t=vr(t),n=vr(n),e.find(r=>Object.is(vr(r.x),t)&&Object.is(vr(r.y),n))}function L0(e,t,n){var r;return(r=qj(e,t,n))==null?void 0:r.empty}function yp(e,{y:t},{y:n}){return t?Ni(t,n)===0:!0}function vp(e,{y:t},{y:n}){return t?Ni(t,n)===t.length-1:!0}function wp(e,{x:t},{x:n}){return t?Ni(t,n)===0:!0}function bp(e,{x:t},{x:n}){return t?Ni(t,n)===t.length-1:!0}function Yj(e,{y:t},{x:n,y:r,empty:i}){if(i)return!1;if(!t)return;const o=Ni(t,r);if(o>0)return L0(e,n,t[o-1])}function Xj(e,{y:t},{x:n,y:r,empty:i}){if(i)return!1;if(!t)return;const o=Ni(t,r);if(o<t.length-1)return L0(e,n,t[o+1])}function Gj(e,{x:t},{x:n,y:r,empty:i}){if(i)return!1;if(!t)return;const o=Ni(t,n);if(o>0)return L0(e,t[o-1],r)}function Kj(e,{x:t},{x:n,y:r,empty:i}){if(i)return!1;if(!t)return;const o=Ni(t,n);if(o<t.length-1)return L0(e,t[o+1],r)}function Qj(e,t,{empty:n}){return n}function tc(e,t){return function(){return e.apply(null,arguments)&&t.apply(null,arguments)}}function xp(e,{channels:{fx:t,fy:n},groups:r}){return t&&n?e.map(({x:i,y:o})=>{var a;return((a=r.get(i))==null?void 0:a.get(o))??[]}):t?e.map(({x:i})=>r.get(i)??[]):e.map(({y:i})=>r.get(i)??[])}const NM=Math.PI,ar=2*NM,_p=.618;function Zj({projection:e,inset:t=0,insetTop:n=t,insetRight:r=t,insetBottom:i=t,insetLeft:o=t}={},a){if(e==null)return;if(typeof e.stream=="function")return e;let l,s,u="frame";if(Co(e)){let _;if({type:e,domain:s,inset:_,insetTop:n=_!==void 0?_:n,insetRight:r=_!==void 0?_:r,insetBottom:i=_!==void 0?_:i,insetLeft:o=_!==void 0?_:o,clip:u=u,...l}=e,e==null)return}typeof e!="function"&&({type:e}=Y1(e));const{width:c,height:f,marginLeft:d,marginRight:h,marginTop:m,marginBottom:p}=a,w=c-d-h-o-r,y=f-m-p-n-i;if(e=e==null?void 0:e({width:w,height:y,clip:u,...l}),e==null)return;u=Jj(u,d,m,c-h,f-p);let g=d+o,v=m+n,b;if(s!=null){const[[_,M],[S,C]]=g0(e).bounds(s),k=Math.min(w/(S-_),y/(C-M));k>0?(g-=(k*(_+S)-w)/2,v-=(k*(M+C)-y)/2,b=R1({point($,E){this.stream.point($*k+g,E*k+v)}})):fi("Warning: the projection could not be fit to the specified domain; using the default scale.")}return b??(b=g===0&&v===0?AM():R1({point(_,M){this.stream.point(_+g,M+v)}})),{stream:_=>e.stream(b.stream(u(_)))}}function Y1(e){switch(`${e}`.toLowerCase()){case"albers-usa":return pn(OH,.7463,.4673);case"albers":return nc(r9,.7463,.4673);case"azimuthal-equal-area":return pn(DH,4,4);case"azimuthal-equidistant":return pn(zH,ar,ar);case"conic-conformal":return nc(HH,ar,ar);case"conic-equal-area":return nc(Hf,6.1702,2.9781);case"conic-equidistant":return nc(jH,7.312,3.6282);case"equal-earth":return pn(qH,5.4133,2.6347);case"equirectangular":return pn(UH,ar,NM);case"gnomonic":return pn(YH,3.4641,3.4641);case"identity":return{type:AM};case"reflect-y":return{type:eV};case"mercator":return pn(FH,ar,ar);case"orthographic":return pn(XH,2,2);case"stereographic":return pn(GH,2,2);case"transverse-mercator":return pn(KH,ar,ar);default:throw new Error(`unknown projection type: ${e}`)}}function Jj(e,t,n,r,i){if(e===!1||e==null||typeof e=="number")return o=>o;switch(e===!0&&(e="frame"),`${e}`.toLowerCase()){case"frame":return H7(t,n,r,i);default:throw new Error(`unknown projection clip type: ${e}`)}}function pn(e,t,n){return{type:({width:r,height:i,rotate:o,precision:a=.15,clip:l})=>{var u,c,f;const s=e();return a!=null&&((u=s.precision)==null||u.call(s,a)),o!=null&&((c=s.rotate)==null||c.call(s,o)),typeof l=="number"&&((f=s.clipAngle)==null||f.call(s,l)),r!=null&&(s.scale(Math.min(r/t,i/n)),s.translate([r/2,i/2])),s},aspectRatio:n/t}}function nc(e,t,n){const{type:r,aspectRatio:i}=pn(e,t,n);return{type:o=>{const{parallels:a,domain:l,width:s,height:u}=o,c=r(o);return a!=null&&(c.parallels(a),l===void 0&&s!=null&&c.fitSize([s,u],{type:"Sphere"})),c},aspectRatio:i}}const AM=yr({stream:e=>e}),eV=yr(R1({point(e,t){this.stream.point(e,-t)}}));function tV(e,t,n,r){const i=n[e],o=n[t],a=i.length,l=n[e]=new Float64Array(a).fill(NaN),s=n[t]=new Float64Array(a).fill(NaN);let u;const c=r.stream({point(f,d){l[u]=f,s[u]=d}});for(u=0;u<a;++u)c.point(i[u],o[u])}function nV({projection:e}={}){return e==null?!1:typeof e.stream=="function"?!0:(Co(e)&&(e=e.type),e!=null)}function rV(e){if(typeof(e==null?void 0:e.stream)=="function")return _p;if(Co(e)){let t,n;if({domain:t,type:e,...n}=e,t!=null&&e!=null){const r=typeof e=="string"?Y1(e).type:e,[[i,o],[a,l]]=g0(r({...n,width:100,height:100})).bounds(t),s=(l-o)/(a-i);return s&&isFinite(s)?s<.2?.2:s>5?5:s:_p}}if(e!=null){if(typeof e!="function"){const{aspectRatio:t}=Y1(e);if(t)return t}return _p}}function iV(e){const t=[],n=[],r={scale:"x",value:t},i={scale:"y",value:n},o={point(a,l){t.push(a),n.push(l)},lineStart(){},lineEnd(){},polygonStart(){},polygonEnd(){},sphere(){}};for(const a of e.value)Bi(a,o);return[r,i]}function bv(e={}){const{document:t=typeof window<"u"?window.document:void 0,clip:n}=e;return{document:t,clip:lM(n)}}function bt(e,{document:t}){return fa(h0(e).call(t.documentElement))}const X1=Symbol("unset");function xv(e){return(e.length===1?oV:aV)(e)}function oV(e){let t,n=X1;return r=>(Object.is(n,r)||(n=r,t=e(r)),t)}function aV(e){let t,n;return(...r)=>(((n==null?void 0:n.length)!==r.length||n.some((i,o)=>!Object.is(i,r[o])))&&(n=r,t=e(...r)),t)}const lV=xv(e=>new Intl.NumberFormat(e));xv((e,t)=>new Intl.DateTimeFormat(e,{timeZone:"UTC",...t&&{month:t}}));xv((e,t)=>new Intl.DateTimeFormat(e,{timeZone:"UTC",...t&&{weekday:t}}));function sV(e="en-US"){const t=lV(e);return n=>n!=null&&!isNaN(n)?t.format(n):void 0}function uV(e){return WU(e,"Invalid Date")}function cV(e="en-US"){const t=sV(e);return n=>(n instanceof Date?uV:typeof n=="number"?t:St)(n)}const za=cV(),Bt=(typeof window<"u"?window.devicePixelRatio>1:typeof it>"u")?0:.5;let fV=0;function dV(){return`plot-clip-${++fV}`}function hV(e,{title:t,href:n,ariaLabel:r,ariaDescription:i,ariaHidden:o,target:a,fill:l,fillOpacity:s,stroke:u,strokeWidth:c,strokeOpacity:f,strokeLinejoin:d,strokeLinecap:h,strokeMiterlimit:m,strokeDasharray:p,strokeDashoffset:w,opacity:y,mixBlendMode:g,imageFilter:v,paintOrder:b,pointerEvents:_,shapeRendering:M,channels:S},{ariaLabel:C,fill:k="currentColor",fillOpacity:$,stroke:E="none",strokeOpacity:U,strokeWidth:D,strokeLinecap:N,strokeLinejoin:P,strokeMiterlimit:I,paintOrder:z}){k===null&&(l=null,s=null),E===null&&(u=null,f=null),$t(k)?!$t(E)&&(!$t(l)||S!=null&&S.fill)&&(E="none"):$t(E)&&(!$t(u)||S!=null&&S.stroke)&&(k="none");const[T,R]=go(l,k),[A,L]=Mt(s,$),[H,G]=go(u,E),[J,te]=Mt(f,U),[Z,B]=Mt(y);Ns(G)||(c===void 0&&(c=D),h===void 0&&(h=N),d===void 0&&(d=P),m===void 0&&!wW(d)&&(m=I),!Ns(R)&&b===void 0&&(b=z));const[j,F]=Mt(c);return k!==null&&(e.fill=ot(R,"currentColor"),e.fillOpacity=yl(L,1)),E!==null&&(e.stroke=ot(G,"none"),e.strokeWidth=yl(F,1),e.strokeOpacity=yl(te,1),e.strokeLinejoin=ot(d,"miter"),e.strokeLinecap=ot(h,"butt"),e.strokeMiterlimit=yl(m,4),e.strokeDasharray=ot(p,"none"),e.strokeDashoffset=ot(w,"0")),e.target=St(a),e.ariaLabel=St(C),e.ariaDescription=St(i),e.ariaHidden=St(o),e.opacity=yl(B,1),e.mixBlendMode=ot(g,"normal"),e.imageFilter=ot(v,"none"),e.paintOrder=ot(b,"normal"),e.pointerEvents=ot(_,"auto"),e.shapeRendering=ot(M,"auto"),{title:{value:t,optional:!0,filter:null},href:{value:n,optional:!0,filter:null},ariaLabel:{value:r,optional:!0,filter:null},fill:{value:T,scale:"auto",optional:!0},fillOpacity:{value:A,scale:"auto",optional:!0},stroke:{value:H,scale:"auto",optional:!0},strokeOpacity:{value:J,scale:"auto",optional:!0},strokeWidth:{value:j,optional:!0},opacity:{value:Z,scale:"auto",optional:!0}}}function pV(e,t){t&&e.filter(n=>nv(t[n])).append("title").call(gV,t)}function mV(e,t){t&&e.filter(([n])=>nv(t[n])).append("title").call(yV,t)}function gV(e,t){t&&e.text(n=>za(t[n]))}function yV(e,t){t&&e.text(([n])=>za(t[n]))}function Ja(e,{target:t,tip:n},{ariaLabel:r,title:i,fill:o,fillOpacity:a,stroke:l,strokeOpacity:s,strokeWidth:u,opacity:c,href:f}){r&&se(e,"aria-label",d=>r[d]),o&&se(e,"fill",d=>o[d]),a&&se(e,"fill-opacity",d=>a[d]),l&&se(e,"stroke",d=>l[d]),s&&se(e,"stroke-opacity",d=>s[d]),u&&se(e,"stroke-width",d=>u[d]),c&&se(e,"opacity",d=>c[d]),f&&LM(e,d=>f[d],t),n||pV(e,i)}function vV(e,{target:t,tip:n},{ariaLabel:r,title:i,fill:o,fillOpacity:a,stroke:l,strokeOpacity:s,strokeWidth:u,opacity:c,href:f}){r&&se(e,"aria-label",([d])=>r[d]),o&&se(e,"fill",([d])=>o[d]),a&&se(e,"fill-opacity",([d])=>a[d]),l&&se(e,"stroke",([d])=>l[d]),s&&se(e,"stroke-opacity",([d])=>s[d]),u&&se(e,"stroke-width",([d])=>u[d]),c&&se(e,"opacity",([d])=>c[d]),f&&LM(e,([d])=>f[d],t),n||mV(e,i)}function wV({ariaLabel:e,title:t,fill:n,fillOpacity:r,stroke:i,strokeOpacity:o,strokeWidth:a,opacity:l,href:s},{tip:u}){return[e,u?void 0:t,n,r,i,o,a,l,s].filter(c=>c!==void 0)}function bV(e,t,n){const r=EL(e,i=>t[i]);return n===void 0&&r.size>1+e.length>>1&&fi("Warning: the implicit z channel has high cardinality. This may occur when the fill or stroke channel is associated with quantitative data rather than ordinal or categorical data. You can suppress this warning by setting the z option explicitly; if this data represents a single series, set z to null."),r.values()}function*xV(e,t,n,r){const{z:i}=n,{z:o}=r,a=wV(r,n),l=[...t,...a];for(const s of o?bV(e,o,i):[e]){let u,c;e:for(const f of s){for(const d of l)if(!_i(d[f])){c&&c.push(-1);continue e}if(u===void 0){c&&(yield c),u=a.map(d=>vr(d[f])),c=[f];continue}c.push(f);for(let d=0;d<a.length;++d)if(vr(a[d][f])!==u[d]){yield c,u=a.map(m=>vr(m[f])),c=[f];continue e}}c&&(yield c)}}function _V(e,t,n,r){let i;const{clip:o=r.clip}=t;switch(o){case"frame":{e=bt("svg:g",r).each(function(){this.appendChild(e.node()),e.node=()=>this}),i=SV(r,n);break}case"sphere":{i=MV(r);break}}se(e,"aria-label",t.ariaLabel),se(e,"aria-description",t.ariaDescription),se(e,"aria-hidden",t.ariaHidden),se(e,"clip-path",i)}function IM(e){const t=new WeakMap;return(n,r)=>{let i=t.get(n);if(!i){const o=dV();fa(n.ownerSVGElement).append("clipPath").attr("id",o).call(e,n,r),t.set(n,i=`url(#${o})`)}return i}}const SV=IM((e,t,n)=>{const{width:r,height:i,marginLeft:o,marginRight:a,marginTop:l,marginBottom:s}=n;e.append("rect").attr("x",o).attr("y",l).attr("width",r-a-o).attr("height",i-l-s)}),MV=IM((e,t)=>{const{projection:n}=t;if(!n)throw new Error('the "sphere" clip option requires a projection');e.append("path").attr("d",g0(n)({type:"Sphere"}))});function Ai(e,t,n,r){_V(e,t,n,r),se(e,"class",t.className),se(e,"fill",t.fill),se(e,"fill-opacity",t.fillOpacity),se(e,"stroke",t.stroke),se(e,"stroke-width",t.strokeWidth),se(e,"stroke-opacity",t.strokeOpacity),se(e,"stroke-linejoin",t.strokeLinejoin),se(e,"stroke-linecap",t.strokeLinecap),se(e,"stroke-miterlimit",t.strokeMiterlimit),se(e,"stroke-dasharray",t.strokeDasharray),se(e,"stroke-dashoffset",t.strokeDashoffset),se(e,"shape-rendering",t.shapeRendering),se(e,"filter",t.imageFilter),se(e,"paint-order",t.paintOrder);const{pointerEvents:i=r.pointerSticky===!1?"none":void 0}=t;se(e,"pointer-events",i)}function Ii(e,t){CV(e,"mix-blend-mode",t.mixBlendMode),se(e,"opacity",t.opacity)}function LM(e,t,n){e.each(function(r){const i=t(r);if(i!=null){const o=this.ownerDocument.createElementNS(Ta.svg,"a");o.setAttribute("fill","inherit"),o.setAttributeNS(Ta.xlink,"href",i),n!=null&&o.setAttribute("target",n),this.parentNode.insertBefore(o,this).appendChild(this)}})}function se(e,t,n){n!=null&&e.attr(t,n)}function CV(e,t,n){n!=null&&e.style(t,n)}function Li(e,t,{x:n,y:r},i=Bt,o=Bt){i+=t.dx,o+=t.dy,n!=null&&n.bandwidth&&(i+=n.bandwidth()/2),r!=null&&r.bandwidth&&(o+=r.bandwidth()/2),(i||o)&&e.attr("transform",`translate(${i},${o})`)}function ot(e,t){if((e=St(e))!==t)return e}function yl(e,t){if((e=yt(e))!==t)return e}const EV=/^-?([_a-z]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])([_a-z0-9-]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])*$/i;function O0(e){if(e===void 0)return"plot-d6a7b5";if(e=`${e}`,!EV.test(e))throw new Error(`invalid class name: ${e}`);return e}function _v(e,t){if(typeof t=="string")e.property("style",t);else if(t!=null)for(const n of e)Object.assign(n.style,t)}function gu({frameAnchor:e},{width:t,height:n,marginTop:r,marginRight:i,marginBottom:o,marginLeft:a}){return[/left$/.test(e)?a:/right$/.test(e)?t-i:(a+t-i)/2,/^top/.test(e)?r:/^bottom/.test(e)?n-o:(r+n-o)/2]}class $n{constructor(t,n={},r={},i){const{facet:o="auto",facetAnchor:a,fx:l,fy:s,sort:u,dx:c=0,dy:f=0,margin:d=0,marginTop:h=d,marginRight:m=d,marginBottom:p=d,marginLeft:w=d,className:y,clip:g=i==null?void 0:i.clip,channels:v,tip:b,render:_}=r;if(this.data=t,this.sort=Oa(u)?u:null,this.initializer=Da(r).initializer,this.transform=this.initializer?r.transform:fM(r).transform,o===null||o===!1?this.facet=null:(this.facet=Tn(o===!0?"include":o,"facet",["auto","include","exclude","super"]),this.fx=t===Rc&&typeof l=="string"?[l]:l,this.fy=t===Rc&&typeof s=="string"?[s]:s),this.facetAnchor=Vj(a),n=aM(n),v!==void 0&&(n={...kV(v),...n}),i!==void 0&&(n={...hV(this,r,i),...n}),this.channels=Object.fromEntries(Object.entries(n).map(([M,S])=>{if(E0(S.value)){const{value:C,label:k=S.label,scale:$=S.scale}=S.value;S={...S,label:k,scale:$,value:C}}if(t===Rc&&typeof S.value=="string"){const{value:C}=S;S={...S,value:[C]}}return[M,S]}).filter(([M,{value:S,optional:C}])=>{if(S!=null)return!0;if(C)return!1;throw new Error(`missing channel value: ${M}`)})),this.dx=+c,this.dy=+f,this.marginTop=+h,this.marginRight=+m,this.marginBottom=+p,this.marginLeft=+w,this.clip=lM(g),this.tip=TV(b),this.className=y?O0(y):null,this.facet==="super"){if(l||s)throw new Error("super-faceting cannot use fx or fy");for(const M in this.channels){const{scale:S}=n[M];if(!(S!=="x"&&S!=="y"))throw new Error("super-faceting cannot use x or y")}}_!=null&&(this.render=DM(_,this.render))}initialize(t,n,r){let i=La(this.data);t===void 0&&i!=null&&(t=[uu(i)]);const o=t;this.transform!=null&&({facets:t,data:i}=this.transform(i,t,r),i=La(i)),t!==void 0&&(t.original=o);const a=WW(this.channels,i);return this.sort!=null&&VW(i,t,a,n,this.sort),{data:i,facets:t,channels:a}}filter(t,n,r){for(const i in n){const{filter:o=_i}=n[i];if(o!==null){const a=r[i];t=t.filter(l=>o(a[l]))}}return t}project(t,n,r){for(const i in t)if(t[i].scale==="x"&&/^x|x$/.test(i)){const o=i.replace(/^x|x$/,"y");o in t&&t[o].scale==="y"&&tV(i,o,n,r.projection)}}scale(t,n,r){const i=jW(t,n);return r.projection&&this.project(t,i,r),i}}function OM(...e){return e.plot=$n.prototype.plot,e}function DM(e,t){if(e==null)return t===null?void 0:t;if(t==null)return e===null?void 0:e;if(typeof e!="function")throw new TypeError(`invalid render transform: ${e}`);if(typeof t!="function")throw new TypeError(`invalid render transform: ${t}`);return function(n,r,i,o,a,l){return e.call(this,n,r,i,o,a,(s,u,c,f,d)=>t.call(this,s,u,c,f,d,l))}}function kV(e){return Object.fromEntries(Object.entries(aM(e)).map(([t,n])=>(n=typeof n=="string"?{value:n,label:t}:$0(n),n.filter===void 0&&n.scale==null&&(n={...n,filter:null}),[t,n])))}function TV(e){return e===!0?"xy":e===!1||e==null?null:typeof e=="string"?Tn(e,"tip",["x","y","xy"]):e}function zM(e,t){return(e==null?void 0:e.tip)===!0?{...e,tip:t}:Co(e==null?void 0:e.tip)&&e.tip.pointer===void 0?{...e,tip:{...e.tip,pointer:t}}:e}function $V(e,t,n={}){let r=.5-Bt,i=.5+Bt,o=.5+Bt,a=.5-Bt;for(const{marginTop:p,marginRight:w,marginBottom:y,marginLeft:g}of t)p>r&&(r=p),w>i&&(i=w),y>o&&(o=y),g>a&&(a=g);let{margin:l,marginTop:s=l!==void 0?l:r,marginRight:u=l!==void 0?l:i,marginBottom:c=l!==void 0?l:o,marginLeft:f=l!==void 0?l:a}=n;s=+s,u=+u,c=+c,f=+f;let{width:d=640,height:h=PV(e,n,{width:d,marginTopDefault:r,marginRightDefault:i,marginBottomDefault:o,marginLeftDefault:a})+Math.max(0,s-r+c-o)}=n;d=+d,h=+h;const m={width:d,height:h,marginTop:s,marginRight:u,marginBottom:c,marginLeft:f};if(e.fx||e.fy){let{margin:p,marginTop:w=p!==void 0?p:s,marginRight:y=p!==void 0?p:u,marginBottom:g=p!==void 0?p:c,marginLeft:v=p!==void 0?p:f}=n.facet??{};w=+w,y=+y,g=+g,v=+v,m.facet={marginTop:w,marginRight:y,marginBottom:g,marginLeft:v}}return m}function PV({x:e,y:t,fy:n,fx:r},{projection:i,aspectRatio:o},{width:a,marginTopDefault:l,marginRightDefault:s,marginBottomDefault:u,marginLeftDefault:c}){const f=n&&n.scale.domain().length||1,d=rV(i);if(d){const m=r?r.scale.domain().length:1,p=(1.1*f-.1)/(1.1*m-.1)*d,w=Math.max(.1,Math.min(10,p));return Math.round((a-c-s)*w+l+u)}const h=t?ko(t)?t.scale.domain().length||1:Math.max(7,17/f):1;if(o!=null){if(o=+o,!(isFinite(o)&&o>0))throw new Error(`invalid aspectRatio: ${o}`);const m=Ix("y",t)/(Ix("x",e)*o),p=r?r.scale.bandwidth():1,w=n?n.scale.bandwidth():1,y=p*(a-c-s)-e.insetLeft-e.insetRight;return(m*y+t.insetTop+t.insetBottom)/w+l+u}return!!(t||n)*Math.max(1,Math.min(60,h*f))*20+!!r*30+60}function Ix(e,t){if(!t)throw new Error(`aspectRatio requires ${e} scale`);const{type:n,domain:r}=t;let i;switch(n){case"linear":case"utc":case"time":i=Number;break;case"pow":{const l=t.scale.exponent();i=s=>Math.pow(s,l);break}case"log":i=Math.log;break;case"point":case"band":return r.length;default:throw new Error(`unsupported ${e} scale for aspectRatio: ${n}`)}const[o,a]=ci(r);return Math.abs(i(a)-i(o))}const Lx=new WeakMap;function Sv(e,t,{x:n,y:r,px:i,py:o,maxRadius:a=40,channels:l,render:s,...u}={}){return a=+a,i!=null&&(n??(n=null),l={...l,px:{value:i,scale:"x"}}),o!=null&&(r??(r=null),l={...l,py:{value:o,scale:"y"}}),{x:n,y:r,channels:l,...u,render:DM(function(c,f,d,h,m,p){m={...m,pointerSticky:!1};const w=m.ownerSVGElement,{data:y}=m.getMarkState(this);let g=Lx.get(w);g||Lx.set(w,g={sticky:!1,roots:[],renders:[]});let v=g.renders.push(G)-1;const{x:b,y:_,fx:M,fy:S}=f;let C=M?M(c.fx)-h.marginLeft:0,k=S?S(c.fy)-h.marginTop:0;b!=null&&b.bandwidth&&(C+=b.bandwidth()/2),_!=null&&_.bandwidth&&(k+=_.bandwidth()/2);const $=c.fi!=null;let E;if($){let B=g.facetStates;B||(g.facetStates=B=new Map),E=B.get(this),E||B.set(this,E=new Map)}const[U,D]=gu(this,h),{px:N,py:P}=d,I=N?B=>N[B]:FM(d,U),z=P?B=>P[B]:BM(d,D);let T,R,A,L;function H(B,j){if($)if(L&&(L=cancelAnimationFrame(L)),B==null)E.delete(c.fi);else{E.set(c.fi,j),L=requestAnimationFrame(()=>{L=null;for(const[F,V]of E)if(V<j||V===j&&F<c.fi){B=null;break}G(B)});return}G(B)}function G(B){if(T===B&&A===g.sticky)return;T=B,A=m.pointerSticky=g.sticky;const j=T==null?[]:[T];$&&(j.fx=c.fx,j.fy=c.fy,j.fi=c.fi);const F=p(j,f,d,h,m);if(R){if($){const V=R.parentNode,X=R.getAttribute("transform"),O=F.getAttribute("transform");X?F.setAttribute("transform",X):F.removeAttribute("transform"),O?V.setAttribute("transform",O):V.removeAttribute("transform"),F.removeAttribute("aria-label"),F.removeAttribute("aria-description"),F.removeAttribute("aria-hidden")}R.replaceWith(F)}if(g.roots[v]=R=F,!(T==null&&(E==null?void 0:E.size)>1)){const V=T==null?null:su(y)?y[T]:y.get(T);m.dispatchValue(V)}return F}function J(B){if(g.sticky||B.pointerType==="mouse"&&B.buttons===1)return;let[j,F]=VF(B);j-=C,F-=k;const V=j<h.marginLeft||j>h.width-h.marginRight?1:e,X=F<h.marginTop||F>h.height-h.marginBottom?1:t;let O=null,le=a*a;for(const ne of c){const ge=V*(I(ne)-j),Se=X*(z(ne)-F),je=ge*ge+Se*Se;je<=le&&(O=ne,le=je)}if(O!=null&&(e!==1||t!==1)){const ne=I(O)-j,ge=z(O)-F;le=ne*ne+ge*ge}H(O,le)}function te(B){B.pointerType==="mouse"&&T!=null&&(g.sticky&&g.roots.some(j=>j==null?void 0:j.contains(B.target))||(g.sticky?(g.sticky=!1,g.renders.forEach(j=>j(null))):(g.sticky=!0,G(T)),B.stopImmediatePropagation()))}function Z(B){B.pointerType==="mouse"&&(g.sticky||H(null))}return w.addEventListener("pointerenter",J),w.addEventListener("pointermove",J),w.addEventListener("pointerdown",te),w.addEventListener("pointerleave",Z),G(null)},s)}}function RV(e){return Sv(1,1,e)}function NV(e){return Sv(1,.01,e)}function Ox(e){return Sv(.01,1,e)}function FM({x1:e,x2:t,x:n=e},r){return e&&t?i=>(e[i]+t[i])/2:n?i=>n[i]:()=>r}function BM({y1:e,y2:t,y:n=e},r){return e&&t?i=>(e[i]+t[i])/2:n?i=>n[i]:()=>r}function HM(e){return ko(e)&&e.interval===void 0?void 0:"tabular-nums"}function AV(e,t){let{label:n=e.label,tickSize:r=6,width:i=240,height:o=44+r,marginTop:a=18,marginRight:l=0,marginBottom:s=16+r,marginLeft:u=0,style:c,ticks:f=(i-u-l)/64,tickFormat:d,fontVariant:h=HM(e),round:m=!0,opacity:p,className:w}=t;const y=bv(t);w=O0(w),p=Mt(p)[1],d===null&&(d=()=>null);const g=bt("svg",y).attr("class",`${w}-ramp`).attr("font-family","system-ui, sans-serif").attr("font-size",10).attr("width",i).attr("height",o).attr("viewBox",`0 0 ${i} ${o}`).call(U=>U.append("style").text(`:where(.${w}-ramp) {
  display: block;
  height: auto;
  height: intrinsic;
  max-width: 100%;
  overflow: visible;
}
:where(.${w}-ramp text) {
  white-space: pre;
}`)).call(_v,c);let v=U=>U.selectAll(".tick line").attr("y1",a+s-o),b;const _=m?(U,D)=>U.rangeRound(D):(U,D)=>U.range(D),{type:M,domain:S,range:C,interpolate:k,scale:$,pivot:E}=e;if(k){const U=C===void 0?k:a0(k.length===1?yv(k):k,C);b=_($.copy(),Mn(mt(u,i-l),Math.min(S.length+(E!==void 0),C===void 0?1/0:C.length)));const D=256,N=y.document.createElement("canvas");N.width=D,N.height=1;const P=N.getContext("2d");for(let I=0,z=D-1;I<D;++I)P.fillStyle=U(I/z),P.fillRect(I,0,1,1);g.append("image").attr("opacity",p).attr("x",u).attr("y",a).attr("width",i-u-l).attr("height",o-a-s).attr("preserveAspectRatio","none").attr("xlink:href",N.toDataURL())}else if(M==="threshold"){const U=S,D=d===void 0?N=>N:typeof d=="string"?Qa(d):d;b=_(zy().domain([-1,C.length-1]),[u,i-l]),g.append("g").attr("fill-opacity",p).selectAll().data(C).enter().append("rect").attr("x",(N,P)=>b(P-1)).attr("y",a).attr("width",(N,P)=>b(P)-b(P-1)).attr("height",o-a-s).attr("fill",N=>N),f=wt(U,(N,P)=>P),d=N=>D(U[N],N)}else b=_(r0().domain(S),[u,i-l]),g.append("g").attr("fill-opacity",p).selectAll().data(S).enter().append("rect").attr("x",b).attr("y",a).attr("width",Math.max(0,b.bandwidth()-1)).attr("height",o-a-s).attr("fill",$),v=()=>{};return g.append("g").attr("transform",`translate(0,${o-s})`).call(sz(b).ticks(Array.isArray(f)?null:f,typeof d=="string"?d:void 0).tickFormat(typeof d=="function"?d:void 0).tickSize(r).tickValues(Array.isArray(f)?f:null)).attr("font-size",null).attr("font-family",null).attr("font-variant",ot(h,"normal")).call(v).call(U=>U.select(".domain").remove()),n!==void 0&&g.append("text").attr("x",u).attr("y",a-6).attr("fill","currentColor").attr("font-weight","bold").text(n),g.node()}const UM=Math.PI/180;function Mv(e,{marker:t,markerStart:n=t,markerMid:r=t,markerEnd:i=t}={}){e.markerStart=Sp(n),e.markerMid=Sp(r),e.markerEnd=Sp(i)}function Sp(e){if(e==null||e===!1)return null;if(e===!0)return zx;if(typeof e=="function")return e;switch(`${e}`.toLowerCase()){case"none":return null;case"arrow":return Dx("auto");case"arrow-reverse":return Dx("auto-start-reverse");case"dot":return IV;case"circle":case"circle-fill":return zx;case"circle-stroke":return LV;case"tick":return Mp("auto");case"tick-x":return Mp(90);case"tick-y":return Mp(0)}throw new Error(`invalid marker: ${e}`)}function Dx(e){return(t,n)=>bt("svg:marker",n).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("orient",e).attr("fill","none").attr("stroke",t).attr("stroke-width",1.5).attr("stroke-linecap","round").attr("stroke-linejoin","round").call(r=>r.append("path").attr("d","M-1.5,-3l3,3l-3,3")).node()}function IV(e,t){return bt("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill",e).attr("stroke","none").call(n=>n.append("circle").attr("r",2.5)).node()}function zx(e,t){return bt("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill",e).attr("stroke","var(--plot-background)").attr("stroke-width",1.5).call(n=>n.append("circle").attr("r",3)).node()}function LV(e,t){return bt("svg:marker",t).attr("viewBox","-5 -5 10 10").attr("markerWidth",6.67).attr("markerHeight",6.67).attr("fill","var(--plot-background)").attr("stroke",e).attr("stroke-width",1.5).call(n=>n.append("circle").attr("r",3)).node()}function Mp(e){return(t,n)=>bt("svg:marker",n).attr("viewBox","-3 -3 6 6").attr("markerWidth",6).attr("markerHeight",6).attr("orient",e).attr("stroke",t).call(r=>r.append("path").attr("d","M0,-3v6")).node()}let OV=0;function WM(e,t,{stroke:n},r){return VM(e,t,n&&(i=>n[i]),null,r)}function DV(e,t,{stroke:n,z:r},i){return VM(e,t,n&&(([o])=>n[o]),r,i)}const G1=1,jM=2;function zV(e,t){const n=new Uint8Array(t.length),r=e.data().filter(o=>o.length>1),i=r.length;for(let o=0,a=X1;o<i;++o){const l=r[o];if(l.length>1){const s=l[0];a!==(a=vr(t[s]))&&(n[s]|=G1)}}for(let o=i-1,a=X1;o>=0;--o){const l=r[o];if(l.length>1){const s=l[0];a!==(a=vr(t[s]))&&(n[s]|=jM)}}return([o])=>n[o]}function VM(e,{markerStart:t,markerMid:n,markerEnd:r,stroke:i},o=()=>i,a,l){if(!t&&!n&&!r)return;const s=new Map,u=a&&zV(e,a);function c(f,d,h){return function(m){if(h&&!h(m))return;const p=o(m);let w=s.get(d);w||s.set(d,w=new Map);let y=w.get(p);if(!y){const g=this.parentNode.insertBefore(d(p,l),this),v=`plot-marker-${++OV}`;g.setAttribute("id",v),w.set(p,y=`url(#${v})`)}this.setAttribute(f,y)}}t&&e.each(c("marker-start",t,u&&(f=>u(f)&G1))),n&&u&&e.each(c("marker-start",n,f=>!(u(f)&G1))),n&&e.each(c("marker-mid",n)),r&&e.each(c("marker-end",r,u&&(f=>u(f)&jM)))}function qM({inset:e,insetLeft:t,insetRight:n,...r}={}){return[t,n]=XM(e,t,n),{inset:e,insetLeft:t,insetRight:n,...r}}function YM({inset:e,insetTop:t,insetBottom:n,...r}={}){return[t,n]=XM(e,t,n),{inset:e,insetTop:t,insetBottom:n,...r}}function XM(e,t,n){return e===void 0&&t===void 0&&n===void 0?Bt?[1,0]:[.5,.5]:[t,n]}function GM(e,{interval:t}){return e={...$0(e)},e.interval=cv(e.interval===void 0?t:e.interval),e}function KM(e,t,n,r){const{[e]:i,[`${e}1`]:o,[`${e}2`]:a}=n,{value:l,interval:s}=GM(i,n);if(l==null||s==null&&!r)return n;const u=T0(i);if(s==null){let h;const m={transform:p=>h||(h=Si(p,l)),label:u};return{...n,[e]:void 0,[`${e}1`]:o===void 0?m:o,[`${e}2`]:a===void 0&&!(o===a&&r)?m:a}}let c,f;function d(h){return f!==void 0&&h===c?f:f=wt(Si(c=h,l),m=>s.floor(m))}return t({...n,[e]:void 0,[`${e}1`]:o===void 0?{transform:d,label:u}:o,[`${e}2`]:a===void 0?{transform:h=>d(h).map(m=>s.offset(m)),label:u}:a})}function QM(e,t,n){const{[e]:r}=n,{value:i,interval:o}=GM(r,n);return i==null||o==null?n:t({...n,[e]:{label:T0(r),transform:a=>{const l=wt(Si(a,i),u=>o.floor(u)),s=l.map(u=>o.offset(u));return l.map(Jn(l)?(u,c)=>u==null||isNaN(u=+u)||(c=s[c],c==null)||isNaN(c=+c)?void 0:new Date((u+c)/2):(u,c)=>u==null||(c=s[c],c==null)?NaN:(+u+ +c)/2)}}})}function FV(e={}){return KM("x",qM,e)}function BV(e={}){return KM("y",YM,e)}function HV(e={}){return QM("x",qM,e)}function UV(e={}){return QM("y",YM,e)}const ZM={ariaLabel:"rule",fill:null,stroke:"currentColor"};class WV extends $n{constructor(t,n={}){const{x:r,y1:i,y2:o,inset:a=0,insetTop:l=a,insetBottom:s=a}=n;super(t,{x:{value:r,scale:"x",optional:!0},y1:{value:i,scale:"y",optional:!0},y2:{value:o,scale:"y",optional:!0}},zM(n,"x"),ZM),this.insetTop=yt(l),this.insetBottom=yt(s),Mv(this,n)}render(t,n,r,i,o){const{x:a,y:l}=n,{x:s,y1:u,y2:c}=r,{width:f,height:d,marginTop:h,marginRight:m,marginLeft:p,marginBottom:w}=i,{insetTop:y,insetBottom:g}=this;return bt("svg:g",o).call(Ai,this,i,o).call(Li,this,{x:s&&a},Bt,0).call(v=>v.selectAll().data(t).enter().append("line").call(Ii,this).attr("x1",s?b=>s[b]:(p+f-m)/2).attr("x2",s?b=>s[b]:(p+f-m)/2).attr("y1",u&&!Zf(l)?b=>u[b]+y:h+y).attr("y2",c&&!Zf(l)?l.bandwidth?b=>c[b]+l.bandwidth()-g:b=>c[b]-g:d-w-g).call(Ja,this,r).call(WM,this,r,o)).node()}}class jV extends $n{constructor(t,n={}){const{x1:r,x2:i,y:o,inset:a=0,insetRight:l=a,insetLeft:s=a}=n;super(t,{y:{value:o,scale:"y",optional:!0},x1:{value:r,scale:"x",optional:!0},x2:{value:i,scale:"x",optional:!0}},zM(n,"y"),ZM),this.insetRight=yt(l),this.insetLeft=yt(s),Mv(this,n)}render(t,n,r,i,o){const{x:a,y:l}=n,{y:s,x1:u,x2:c}=r,{width:f,height:d,marginTop:h,marginRight:m,marginLeft:p,marginBottom:w}=i,{insetLeft:y,insetRight:g}=this;return bt("svg:g",o).call(Ai,this,i,o).call(Li,this,{y:s&&l},0,Bt).call(v=>v.selectAll().data(t).enter().append("line").call(Ii,this).attr("x1",u&&!Zf(a)?b=>u[b]+y:p+y).attr("x2",c&&!Zf(a)?a.bandwidth?b=>c[b]+a.bandwidth()-g:b=>c[b]-g:f-m-g).attr("y1",s?b=>s[b]:(h+d-w)/2).attr("y2",s?b=>s[b]:(h+d-w)/2).call(Ja,this,r).call(WM,this,r,o)).node()}}function VV(e,t){let{x:n=Lr,y:r,y1:i,y2:o,...a}=BV(t);return[i,o]=JM(r,i,o),new WV(e,{...a,x:n,y1:i,y2:o})}function qV(e,t){let{y:n=Lr,x:r,x1:i,x2:o,...a}=FV(t);return[i,o]=JM(r,i,o),new jV(e,{...a,y:n,x1:i,x2:o})}function JM(e,t,n){if(e==null){if(t===void 0){if(n!==void 0)return[0,n]}else if(n===void 0)return[0,t]}else{if(t===void 0)return n===void 0?[0,e]:[e,n];if(n===void 0)return[e,t]}return[t,n]}function Cv(e,...t){let n=t.length;for(let r=0,i=!0;r<n;++r)typeof t[r]!="function"&&(i&&(e=e.slice(),i=!1),e.splice(r,2,e[r]+t[r]+e[r+1]),t.splice(r,1),--r,--n);return r=>{let i=e[0];for(let o=0;o<n;++o)i+=t[o](r)+e[o+1];return i}}const YV={ariaLabel:"text",strokeLinejoin:"round",strokeWidth:3,paintOrder:"stroke"},eC="­";class Ev extends $n{constructor(t,n={}){const{x:r,y:i,text:o=Eo(t)&&oM(t)?Lr:nW,frameAnchor:a,textAnchor:l=/right$/i.test(a)?"end":/left$/i.test(a)?"start":"middle",lineAnchor:s=/^top/i.test(a)?"top":/^bottom/i.test(a)?"bottom":"middle",lineHeight:u=1,lineWidth:c=1/0,textOverflow:f,monospace:d,fontFamily:h=d?"ui-monospace, monospace":void 0,fontSize:m,fontStyle:p,fontVariant:w,fontWeight:y,rotate:g}=n,[v,b]=Mt(g,0),[_,M]=JV(m);if(super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},fontSize:{value:_,optional:!0},rotate:{value:hW(v),optional:!0},text:{value:o,filter:nv,optional:!0}},n,YV),this.rotate=b,this.textAnchor=ot(l,"middle"),this.lineAnchor=Tn(s,"lineAnchor",["top","middle","bottom"]),this.lineHeight=+u,this.lineWidth=+c,this.textOverflow=tC(f),this.monospace=!!d,this.fontFamily=St(h),this.fontSize=M,this.fontStyle=St(p),this.fontVariant=St(w),this.fontWeight=St(y),this.frameAnchor=R0(a),!(this.lineWidth>=0))throw new Error(`invalid lineWidth: ${c}`);this.splitLines=iC(this),this.clipLine=oC(this)}render(t,n,r,i,o){const{x:a,y:l}=n,{x:s,y:u,rotate:c,text:f,title:d,fontSize:h}=r,{rotate:m}=this,[p,w]=gu(this,i);return bt("svg:g",o).call(Ai,this,i,o).call(rC,this,f,i).call(Li,this,{x:s&&a,y:u&&l}).call(y=>y.selectAll().data(t).enter().append("text").call(Ii,this).call(XV,this,f,d).attr("transform",Cv`translate(${s?g=>s[g]:p},${u?g=>u[g]:w})${c?g=>` rotate(${c[g]})`:m?` rotate(${m})`:""}`).call(se,"font-size",h&&(g=>h[g])).call(Ja,this,r)).node()}}function tC(e){return e==null?null:Tn(e,"textOverflow",["clip","ellipsis","clip-start","clip-end","ellipsis-start","ellipsis-middle","ellipsis-end"]).replace(/^(clip|ellipsis)$/,"$1-end")}function XV(e,t,n,r){if(!n)return;const{lineAnchor:i,lineHeight:o,textOverflow:a,splitLines:l,clipLine:s}=t;e.each(function(u){const c=l(za(n[u])??"").map(s),f=c.length,d=i==="top"?.71:i==="bottom"?1-f:(164-f*100)/200;if(f>1){let h=0;for(let m=0;m<f;++m){if(++h,!c[m])continue;const p=this.ownerDocument.createElementNS(Ta.svg,"tspan");p.setAttribute("x",0),m===h-1?p.setAttribute("y",`${(d+m)*o}em`):p.setAttribute("dy",`${h*o}em`),p.textContent=c[m],this.appendChild(p),h=0}}else d&&this.setAttribute("y",`${d*o}em`),this.textContent=c[0];if(a&&!r&&c[0]!==n[u]){const h=this.ownerDocument.createElementNS(Ta.svg,"title");h.textContent=n[u],this.appendChild(h)}})}function nC(e,{x:t,y:n,...r}={}){return r.frameAnchor===void 0&&([t,n]=k0(t,n)),new Ev(e,{...r,x:t,y:n})}function GV(e,{x:t=Lr,...n}={}){return new Ev(e,UV({...n,x:t}))}function KV(e,{y:t=Lr,...n}={}){return new Ev(e,HV({...n,y:t}))}function rC(e,t,n){se(e,"text-anchor",t.textAnchor),se(e,"font-family",t.fontFamily),se(e,"font-size",t.fontSize),se(e,"font-style",t.fontStyle),se(e,"font-variant",t.fontVariant===void 0?QV(n):t.fontVariant),se(e,"font-weight",t.fontWeight)}function QV(e){return e&&(gW(e)||Jn(e))?"tabular-nums":void 0}const ZV=new Set(["inherit","initial","revert","unset","xx-small","x-small","small","medium","large","x-large","xx-large","xxx-large","larger","smaller"]);function JV(e){return e==null||typeof e=="number"?[void 0,e]:typeof e!="string"?[e,void 0]:(e=e.trim().toLowerCase(),ZV.has(e)||/^[+-]?\d*\.?\d+(e[+-]?\d+)?(\w*|%)$/.test(e)?[void 0,e]:[e,void 0])}function eq(e,t,n){const r=[];let i,o=0;for(const[a,l,s]of tq(e)){if(i===void 0&&(i=a),o>i&&n(e,i,l)>t&&(r.push(e.slice(i,o)+(e[o-1]===eC?"-":"")),i=a),s){r.push(e.slice(i,l)),i=void 0;continue}o=l}return r}function*tq(e){let t=0,n=0;const r=e.length;for(;n<r;){let i=1;switch(e[n]){case eC:case"-":++n,yield[t,n,!1],t=n;break;case" ":for(yield[t,n,!1];e[++n]===" ";);t=n;break;case"\r":e[n+1]===`
`&&++i;case`
`:yield[t,n,!0],n+=i,t=n;break;default:++n;break}}yield[t,n,!0]}const Fx={a:56,b:63,c:57,d:63,e:58,f:37,g:62,h:60,i:26,j:26,k:55,l:26,m:88,n:60,o:60,p:62,q:62,r:39,s:54,t:38,u:60,v:55,w:79,x:54,y:55,z:55,A:69,B:67,C:73,D:74,E:61,F:58,G:76,H:75,I:28,J:55,K:67,L:58,M:89,N:75,O:78,P:65,Q:78,R:67,S:65,T:65,U:75,V:69,W:98,X:69,Y:67,Z:67,0:64,1:48,2:62,3:64,4:66,5:63,6:65,7:58,8:65,9:65," ":29,"!":32,'"':49,"'":31,"(":39,")":39,",":31,"-":48,".":31,"/":32,":":31,";":31,"?":52,"‘":31,"’":31,"“":47,"”":47,"…":82};function kv(e,t=0,n=e.length){let r=0;for(let i=t;i<n;i=el(e,i))r+=Fx[e[i]]??(lC(e,i)?120:Fx.e);return r}function Tv(e,t=0,n=e.length){let r=0;for(let i=t;i<n;i=el(e,i))r+=lC(e,i)?126:63;return r}function iC({monospace:e,lineWidth:t,textOverflow:n}){if(n!=null||t==1/0)return o=>o.split(/\r\n?|\n/g);const r=e?Tv:kv,i=t*100;return o=>eq(o,i,r)}function oC({monospace:e,lineWidth:t,textOverflow:n}){if(n==null||t==1/0)return o=>o;const r=e?Tv:kv,i=t*100;switch(n){case"clip-start":return o=>Hx(o,i,r,"");case"clip-end":return o=>Bx(o,i,r,"");case"ellipsis-start":return o=>Hx(o,i,r,da);case"ellipsis-middle":return o=>nq(o,i,r,da);case"ellipsis-end":return o=>Bx(o,i,r,da)}}const da="…";function Fa(e,t,n,r){const i=[];let o=0;for(let a=0,l=0,s=e.length;a<s;a=l){l=el(e,a);const u=n(e,a,l);if(o+u>t){for(o+=r;o>t&&a>0;)l=a,a=i.pop(),o-=n(e,a,l);return[a,t-o]}o+=u,i.push(a)}return[-1,0]}function Bx(e,t,n,r){e=e.trim();const i=n(r),[o]=Fa(e,t,n,i);return o<0?e:e.slice(0,o).trimEnd()+r}function nq(e,t,n,r){e=e.trim();const i=n(e);if(i<=t)return e;const o=n(r)/2,[a,l]=Fa(e,t/2,n,o),[s]=Fa(e,i-t/2-l+o,n,-o);return s<0?r:e.slice(0,a).trimEnd()+r+e.slice(el(e,s)).trimStart()}function Hx(e,t,n,r){e=e.trim();const i=n(e);if(i<=t)return e;const o=n(r),[a]=Fa(e,i-t+o,n,-o);return a<0?r:r+e.slice(el(e,a)).trimStart()}const K1=/[\p{Combining_Mark}\p{Emoji_Modifier}]+/uy,Ux=new RegExp("\\p{Extended_Pictographic}","uy");function el(e,t){return t+=rq(e,t)?2:1,oq(e,t)&&(t=K1.lastIndex),iq(e,t)?el(e,t+1):t}function aC(e,t){return e.charCodeAt(t)<128}function rq(e,t){const n=e.charCodeAt(t);if(n>=55296&&n<56320){const r=e.charCodeAt(t+1);return r>=56320&&r<57344}return!1}function iq(e,t){return e.charCodeAt(t)===8205}function oq(e,t){return aC(e,t)?!1:(K1.lastIndex=t,K1.test(e))}function lC(e,t){return aC(e,t)?!1:(Ux.lastIndex=t,Ux.test(e))}const aq={ariaLabel:"vector",fill:"none",stroke:"currentColor",strokeWidth:1.5,strokeLinejoin:"round",strokeLinecap:"round"},sC=3.5,lq=sC*5,uC={draw(e,t,n){const r=t*n/lq;e.moveTo(0,0),e.lineTo(0,-t),e.moveTo(-r,r-t),e.lineTo(0,-t),e.lineTo(r,r-t)}},sq={draw(e,t,n){e.moveTo(-n,0),e.lineTo(0,-t),e.lineTo(n,0)}},uq=new Map([["arrow",uC],["spike",sq]]);function cq(e){return e&&typeof e.draw=="function"}function fq(e){if(cq(e))return e;const t=uq.get(`${e}`.toLowerCase());if(t)return t;throw new Error(`invalid shape: ${e}`)}class cC extends $n{constructor(t,n={}){const{x:r,y:i,r:o=sC,length:a,rotate:l,shape:s=uC,anchor:u="middle",frameAnchor:c}=n,[f,d]=Mt(a,12),[h,m]=Mt(l,0);super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},length:{value:f,scale:"length",optional:!0},rotate:{value:h,optional:!0}},n,aq),this.r=+o,this.length=d,this.rotate=m,this.shape=fq(s),this.anchor=Tn(u,"anchor",["start","middle","end"]),this.frameAnchor=R0(c)}render(t,n,r,i,o){const{x:a,y:l}=n,{x:s,y:u,length:c,rotate:f}=r,{length:d,rotate:h,anchor:m,shape:p,r:w}=this,[y,g]=gu(this,i);return bt("svg:g",o).call(Ai,this,i,o).call(Li,this,{x:s&&a,y:u&&l}).call(v=>v.selectAll().data(t).enter().append("path").call(Ii,this).attr("transform",Cv`translate(${s?b=>s[b]:y},${u?b=>u[b]:g})${f?b=>` rotate(${f[b]})`:h?` rotate(${h})`:""}${m==="start"?"":m==="end"?c?b=>` translate(0,${c[b]})`:` translate(0,${d})`:c?b=>` translate(0,${c[b]/2})`:` translate(0,${d/2})`}`).attr("d",c?b=>{const _=qi();return p.draw(_,c[b],w),_}:(()=>{const b=qi();return p.draw(b,d,w),b})()).call(Ja,this,r)).node()}}function dq(e,t={}){const{x:n=Lr,...r}=t;return new cC(e,{...r,x:n})}function hq(e,t={}){const{y:n=Lr,...r}=t;return new cC(e,{...r,y:n})}function Oi(e,t){return arguments.length<2&&!Eo(e)&&(t=e,e=null),t===void 0&&(t={}),[e,t]}function D0({anchor:e}={},t){return e===void 0?t[0]:Tn(e,"anchor",t)}function fC(e){return D0(e,["left","right"])}function dC(e){return D0(e,["right","left"])}function hC(e){return D0(e,["bottom","top"])}function pC(e){return D0(e,["top","bottom"])}function mC(){const[e,t]=Oi(...arguments);return yC("y",fC(t),e,t)}function pq(){const[e,t]=Oi(...arguments);return yC("fy",dC(t),e,t)}function gC(){const[e,t]=Oi(...arguments);return vC("x",hC(t),e,t)}function mq(){const[e,t]=Oi(...arguments);return vC("fx",pC(t),e,t)}function yC(e,t,n,{color:r="currentColor",opacity:i=1,stroke:o=r,strokeOpacity:a=i,strokeWidth:l=1,fill:s=r,fillOpacity:u=i,textAnchor:c,textStroke:f,textStrokeOpacity:d,textStrokeWidth:h,tickSize:m=e==="y"?6:0,tickPadding:p,tickRotate:w,x:y,margin:g,marginTop:v=g===void 0?20:g,marginRight:b=g===void 0?t==="right"?40:0:g,marginBottom:_=g===void 0?20:g,marginLeft:M=g===void 0?t==="left"?40:0:g,label:S,labelAnchor:C,labelArrow:k,labelOffset:$,...E}){return m=yt(m),p=yt(p),w=yt(w),C!==void 0&&(C=Tn(C,"labelAnchor",["center","top","bottom"])),k=EC(k),OM(m&&!$t(o)?gq(e,t,n,{stroke:o,strokeOpacity:a,strokeWidth:l,tickSize:m,tickPadding:p,tickRotate:w,x:y,...E}):null,$t(s)?null:vq(e,t,n,{fill:s,fillOpacity:u,stroke:f,strokeOpacity:d,strokeWidth:h,textAnchor:c,tickSize:m,tickPadding:p,tickRotate:w,x:y,marginTop:v,marginRight:b,marginBottom:_,marginLeft:M,...E}),!$t(s)&&S!==null?nC([],_C({fill:s,fillOpacity:u,...E},function(U,D,N,P,I){const z=P[e],{marginTop:T,marginRight:R,marginBottom:A,marginLeft:L}=e==="y"&&I.inset||I,H=C??(z.bandwidth?"center":"top"),G=$??(t==="right"?R:L)-3;return H==="center"?(this.textAnchor=void 0,this.lineAnchor=t==="right"?"bottom":"top",this.frameAnchor=t,this.rotate=-90):(this.textAnchor=t==="right"?"end":"start",this.lineAnchor=H,this.frameAnchor=`${H}-${t}`,this.rotate=0),this.dy=H==="top"?3-T:H==="bottom"?A-3:0,this.dx=t==="right"?G:-G,this.ariaLabel=`${e}-axis label`,{facets:[[0]],channels:{text:{value:[CC(e,z,{anchor:t,label:S,labelAnchor:H,labelArrow:k})]}}}})):null)}function vC(e,t,n,{color:r="currentColor",opacity:i=1,stroke:o=r,strokeOpacity:a=i,strokeWidth:l=1,fill:s=r,fillOpacity:u=i,textAnchor:c,textStroke:f,textStrokeOpacity:d,textStrokeWidth:h,tickSize:m=e==="x"?6:0,tickPadding:p,tickRotate:w,y,margin:g,marginTop:v=g===void 0?t==="top"?30:0:g,marginRight:b=g===void 0?20:g,marginBottom:_=g===void 0?t==="bottom"?30:0:g,marginLeft:M=g===void 0?20:g,label:S,labelAnchor:C,labelArrow:k,labelOffset:$,...E}){return m=yt(m),p=yt(p),w=yt(w),C!==void 0&&(C=Tn(C,"labelAnchor",["center","left","right"])),k=EC(k),OM(m&&!$t(o)?yq(e,t,n,{stroke:o,strokeOpacity:a,strokeWidth:l,tickSize:m,tickPadding:p,tickRotate:w,y,...E}):null,$t(s)?null:wq(e,t,n,{fill:s,fillOpacity:u,stroke:f,strokeOpacity:d,strokeWidth:h,textAnchor:c,tickSize:m,tickPadding:p,tickRotate:w,y,marginTop:v,marginRight:b,marginBottom:_,marginLeft:M,...E}),!$t(s)&&S!==null?nC([],_C({fill:s,fillOpacity:u,...E},function(U,D,N,P,I){const z=P[e],{marginTop:T,marginRight:R,marginBottom:A,marginLeft:L}=e==="x"&&I.inset||I,H=C??(z.bandwidth?"center":"right"),G=$??(t==="top"?T:A)-3;return H==="center"?(this.frameAnchor=t,this.textAnchor=void 0):(this.frameAnchor=`${t}-${H}`,this.textAnchor=H==="right"?"end":"start"),this.lineAnchor=t,this.dy=t==="top"?-G:G,this.dx=H==="right"?R-3:H==="left"?3-L:0,this.ariaLabel=`${e}-axis label`,{facets:[[0]],channels:{text:{value:[CC(e,z,{anchor:t,label:S,labelAnchor:H,labelArrow:k})]}}}})):null)}function gq(e,t,n,{strokeWidth:r=1,strokeLinecap:i=null,strokeLinejoin:o=null,facetAnchor:a=t+(e==="y"?"-empty":""),frameAnchor:l=t,tickSize:s,inset:u=0,insetLeft:c=u,insetRight:f=u,dx:d=0,y:h=e==="y"?void 0:null,...m}){return tl(hq,e,n,{ariaLabel:`${e}-axis tick`,ariaHidden:!0},{strokeWidth:r,strokeLinecap:i,strokeLinejoin:o,facetAnchor:a,frameAnchor:l,y:h,...m,dx:t==="left"?+d-Bt+ +c:+d+Bt-f,anchor:"start",length:s,shape:t==="left"?kq:Tq})}function yq(e,t,n,{strokeWidth:r=1,strokeLinecap:i=null,strokeLinejoin:o=null,facetAnchor:a=t+(e==="x"?"-empty":""),frameAnchor:l=t,tickSize:s,inset:u=0,insetTop:c=u,insetBottom:f=u,dy:d=0,x:h=e==="x"?void 0:null,...m}){return tl(dq,e,n,{ariaLabel:`${e}-axis tick`,ariaHidden:!0},{strokeWidth:r,strokeLinejoin:o,strokeLinecap:i,facetAnchor:a,frameAnchor:l,x:h,...m,dy:t==="bottom"?+d-Bt-f:+d+Bt+ +c,anchor:"start",length:s,shape:t==="bottom"?Cq:Eq})}function vq(e,t,n,{facetAnchor:r=t+(e==="y"?"-empty":""),frameAnchor:i=t,tickSize:o,tickRotate:a=0,tickPadding:l=Math.max(3,9-o)+(Math.abs(a)>60?4*Math.cos(a*UM):0),text:s,textAnchor:u=Math.abs(a)>60?"middle":t==="left"?"end":"start",lineAnchor:c=a>60?"top":a<-60?"bottom":"middle",fontVariant:f,inset:d=0,insetLeft:h=d,insetRight:m=d,dx:p=0,y:w=e==="y"?void 0:null,...y}){return tl(KV,e,n,{ariaLabel:`${e}-axis tick label`},{facetAnchor:r,frameAnchor:i,text:s,textAnchor:u,lineAnchor:c,fontVariant:f,rotate:a,y:w,...y,dx:t==="left"?+p-o-l+ +h:+p+ +o+ +l-m},function(g,v,b,_,M){f===void 0&&(this.fontVariant=MC(g)),s===void 0&&(M.text=SC(g,v,b,_,t))})}function wq(e,t,n,{facetAnchor:r=t+(e==="x"?"-empty":""),frameAnchor:i=t,tickSize:o,tickRotate:a=0,tickPadding:l=Math.max(3,9-o)+(Math.abs(a)>=10?4*Math.cos(a*UM):0),text:s,textAnchor:u=Math.abs(a)>=10?a<0^t==="bottom"?"start":"end":"middle",lineAnchor:c=Math.abs(a)>=10?"middle":t==="bottom"?"top":"bottom",fontVariant:f,inset:d=0,insetTop:h=d,insetBottom:m=d,dy:p=0,x:w=e==="x"?void 0:null,...y}){return tl(GV,e,n,{ariaLabel:`${e}-axis tick label`},{facetAnchor:r,frameAnchor:i,text:s===void 0?null:s,textAnchor:u,lineAnchor:c,fontVariant:f,rotate:a,x:w,...y,dy:t==="bottom"?+p+ +o+ +l-m:+p-o-l+ +h},function(g,v,b,_,M){f===void 0&&(this.fontVariant=MC(g)),s===void 0&&(M.text=SC(g,v,b,_,t))})}function bq(){const[e,t]=Oi(...arguments);return wC("y",fC(t),e,t)}function xq(){const[e,t]=Oi(...arguments);return wC("fy",dC(t),e,t)}function _q(){const[e,t]=Oi(...arguments);return bC("x",hC(t),e,t)}function Sq(){const[e,t]=Oi(...arguments);return bC("fx",pC(t),e,t)}function wC(e,t,n,{y:r=e==="y"?void 0:null,x:i=null,x1:o=t==="left"?i:null,x2:a=t==="right"?i:null,...l}){return tl(qV,e,n,{ariaLabel:`${e}-grid`,ariaHidden:!0},{y:r,x1:o,x2:a,...xC(l)})}function bC(e,t,n,{x:r=e==="x"?void 0:null,y:i=null,y1:o=t==="top"?i:null,y2:a=t==="bottom"?i:null,...l}){return tl(VV,e,n,{ariaLabel:`${e}-grid`,ariaHidden:!0},{x:r,y1:o,y2:a,...xC(l)})}function xC({color:e="currentColor",opacity:t=.1,stroke:n=e,strokeOpacity:r=t,strokeWidth:i=1,...o}){return{stroke:n,strokeOpacity:r,strokeWidth:i,...o}}function _C({fill:e,fillOpacity:t,fontFamily:n,fontSize:r,fontStyle:i,fontVariant:o,fontWeight:a,monospace:l,pointerEvents:s,shapeRendering:u,clip:c=!1},f){return[,e]=go(e),[,t]=Mt(t),{facet:"super",x:null,y:null,fill:e,fillOpacity:t,fontFamily:n,fontSize:r,fontStyle:i,fontVariant:o,fontWeight:a,monospace:l,pointerEvents:s,shapeRendering:u,clip:c,initializer:f}}function tl(e,t,n,r,i,o){let a;function l(c,f,d,h,m,p){const w=c==null&&(t==="fx"||t==="fy"),{[t]:y}=h;if(!y)throw new Error(`missing scale: ${t}`);const g=y.domain();let{interval:v,ticks:b,tickFormat:_,tickSpacing:M=t==="x"?80:35}=i;if(typeof b=="string"&&kC(y)&&(v=b,b=void 0),b===void 0&&(b=cu(v,y.type)??Mq(y,M)),c==null){if(Eo(b))c=Mi(b);else if(dW(b))c=Cp(b,...ci(g));else if(y.interval){let C=y.interval;if(y.ticks){const[k,$]=ci(g),E=($-k)/C[lu];C=hx(C,E/b)??C,c=Cp(C,k,$)}else{c=g;const k=c.length;C=hx(C,k/b)??C,C!==y.interval&&(c=Cp(C,...ci(c)))}if(C===y.interval){const k=Math.round(c.length/b);k>1&&(c=c.filter(($,E)=>E%k===0))}}else y.ticks?c=y.ticks(b):c=g;if(!y.ticks&&c.length&&c!==g){const C=new t0(g);c=c.filter(k=>C.has(k)),c.length||fi(`Warning: the ${t}-axis ticks appear to not align with the scale domain, resulting in no ticks. Try different ticks?`)}t==="y"||t==="x"?f=[uu(c)]:a[t]={scale:t,value:Lr}}o==null||o.call(this,y,c,b,_,a);const S=Object.fromEntries(Object.entries(a).map(([C,k])=>[C,{...k,value:Si(c,k.value)}]));return w&&(f=p.filterFacets(c,S)),{data:c,facets:f,channels:S}}const s=Da(i).initializer,u=e(n,Da({...i,initializer:l},s));return n==null?(a=u.channels,u.channels={}):a={},r!==void 0&&Object.assign(u,r),u.clip===void 0&&(u.clip=!1),u}function Mq(e,t){const[n,r]=ci(e.range());return(r-n)/t}function SC(e,t,n,r,i){return{value:$v(e,t,n,r,i)}}function $v(e,t,n,r,i){return typeof r=="function"&&!(e.type==="log"&&e.tickFormat)?r:r===void 0&&t&&Jn(t)?GU(e.type,t,i)??za:e.tickFormat?e.tickFormat(typeof n=="number"?n:null,r):r===void 0?za:typeof r=="string"?(Jn(e.domain())?iu:Qa)(r):yr(r)}function Cp(e,t,n){return e.range(t,e.offset(e.floor(n)))}const Cq={draw(e,t){e.moveTo(0,0),e.lineTo(0,t)}},Eq={draw(e,t){e.moveTo(0,0),e.lineTo(0,-t)}},kq={draw(e,t){e.moveTo(0,0),e.lineTo(-t,0)}},Tq={draw(e,t){e.moveTo(0,0),e.lineTo(t,0)}};function MC(e){return e.bandwidth&&!e.interval?void 0:"tabular-nums"}function CC(e,t,{anchor:n,label:r=t.label,labelAnchor:i,labelArrow:o}={}){if(!(r==null||r.inferred&&kC(t)&&/^(date|time|year)$/i.test(r))){if(r=String(r),o==="auto"&&(o=(!t.bandwidth||t.interval)&&!/[↑↓→←]/.test(r)),!o)return r;if(o===!0){const a=Nj(t);a&&(o=/x$/.test(e)||i==="center"?/x$/.test(e)===a<0?"left":"right":a<0?"up":"down")}switch(o){case"left":return`← ${r}`;case"right":return`${r} →`;case"up":return n==="right"?`${r} ↑`:`↑ ${r}`;case"down":return n==="right"?`${r} ↓`:`↓ ${r}`}return r}}function EC(e="auto"){return $t(e)?!1:typeof e=="boolean"?e:Tn(e,"labelArrow",["auto","up","right","down","left"])}function kC(e){return Jn(e.domain())}function Wx(e,t){if(t==null)return t;const n=e(t);if(!n)throw new Error(`scale not found: ${t}`);return n}function $q(e,{opacity:t,...n}={}){if(!ko(e)&&!RM(e))throw new Error(`swatches legend requires ordinal or threshold color scale (not ${e.type})`);return TC(e,n,(r,i,o,a)=>r.append("svg").attr("width",o).attr("height",a).attr("fill",i.scale).attr("fill-opacity",Mt(t)[1]).append("rect").attr("width","100%").attr("height","100%"))}function Pq(e,{fill:t=(u=>(u=e.hint)==null?void 0:u.fill)()!==void 0?e.hint.fill:"none",fillOpacity:n=1,stroke:r=(c=>(c=e.hint)==null?void 0:c.stroke)()!==void 0?e.hint.stroke:$t(t)?"currentColor":"none",strokeOpacity:i=1,strokeWidth:o=1.5,r:a=4.5,...l}={},s){const[f,d]=go(t),[h,m]=go(r),p=Wx(s,f),w=Wx(s,h),y=a*a*Math.PI;return n=Mt(n)[1],i=Mt(i)[1],o=Mt(o)[1],TC(e,l,(g,v,b,_)=>g.append("svg").attr("viewBox","-8 -8 16 16").attr("width",b).attr("height",_).attr("fill",f==="color"?M=>p.scale(M):d).attr("fill-opacity",n).attr("stroke",h==="color"?M=>w.scale(M):m).attr("stroke-opacity",i).attr("stroke-width",o).append("path").attr("d",M=>{const S=qi();return e.scale(M).draw(S,y),S}))}function TC(e,t={},n){let{columns:r,tickFormat:i,fontVariant:o=HM(e),swatchSize:a=15,swatchWidth:l=a,swatchHeight:s=a,marginLeft:u=0,className:c,style:f,width:d}=t;const h=bv(t);c=O0(c),i=$v(e.scale,e.domain,void 0,i);const m=bt("div",h).attr("class",`${c}-swatches ${c}-swatches-${r!=null?"columns":"wrap"}`);let p;return r!=null?(p=`:where(.${c}-swatches-columns .${c}-swatch) {
  display: flex;
  align-items: center;
  break-inside: avoid;
  padding-bottom: 1px;
}
:where(.${c}-swatches-columns .${c}-swatch::before) {
  flex-shrink: 0;
}
:where(.${c}-swatches-columns .${c}-swatch-label) {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}`,m.style("columns",r).selectAll().data(e.domain).enter().append("div").attr("class",`${c}-swatch`).call(n,e,l,s).call(w=>w.append("div").attr("class",`${c}-swatch-label`).attr("title",i).text(i))):(p=`:where(.${c}-swatches-wrap) {
  display: flex;
  align-items: center;
  min-height: 33px;
  flex-wrap: wrap;
}
:where(.${c}-swatches-wrap .${c}-swatch) {
  display: inline-flex;
  align-items: center;
  margin-right: 1em;
}`,m.selectAll().data(e.domain).enter().append("span").attr("class",`${c}-swatch`).call(n,e,l,s).append(function(){return this.ownerDocument.createTextNode(i.apply(this,arguments))})),m.call(w=>w.insert("style","*").text(`:where(.${c}-swatches) {
  font-family: system-ui, sans-serif;
  font-size: 10px;
  margin-bottom: 0.5em;
}
:where(.${c}-swatch > svg) {
  margin-right: 0.5em;
  overflow: visible;
}
${p}`)).style("margin-left",u?`${+u}px`:null).style("width",d===void 0?null:`${+d}px`).style("font-variant",ot(o,"normal")).call(_v,f).node()}const Q1=new Map([["symbol",Pq],["color",PC],["opacity",Nq]]);function Rq(e,t,n={}){return(r,i)=>{if(!Q1.has(r))throw new Error(`unknown legend type: ${r}`);if(r in e)return Q1.get(r)(e[r],$C(t,n[r],i),o=>e[o])}}function $C({className:e,...t},{label:n,ticks:r,tickFormat:i}={},o){return bW(o,{className:e,...t},{label:n,ticks:r,tickFormat:i})}function PC(e,{legend:t=!0,...n}){if(t===!0&&(t=e.type==="ordinal"?"swatches":"ramp"),e.domain!==void 0)switch(`${t}`.toLowerCase()){case"swatches":return $q(e,n);case"ramp":return AV(e,n);default:throw new Error(`unknown legend type: ${t}`)}}function Nq({type:e,interpolate:t,...n},{legend:r=!0,color:i=bi(0,0,0),...o}){if(!t)throw new Error(`${e} opacity scales are not supported`);if(r===!0&&(r="ramp"),`${r}`.toLowerCase()!=="ramp")throw new Error(`${r} opacity legends are not supported`);return PC({type:e,...n,interpolate:Aq(i)},{legend:r,...o})}function Aq(e){const{r:t,g:n,b:r}=bi(e)||bi(0,0,0);return i=>`rgba(${t},${n},${r},${i})`}function Iq(e,t,n){const r=[];for(const[i,o]of Q1){const a=n[i];if(a!=null&&a.legend&&i in e){const l=o(e[i],$C(t,e[i],a),s=>e[s]);l!=null&&r.push(l)}}return r}function Lq(e,{inset:t=0,insetTop:n=t,insetRight:r=t,insetBottom:i=t,insetLeft:o=t}={}){e.insetTop=yt(n),e.insetRight=yt(r),e.insetBottom=yt(i),e.insetLeft=yt(o)}function Oq(e,{r:t,rx:n,ry:r,rx1:i=t,ry1:o=t,rx2:a=t,ry2:l=t,rx1y1:s=i!==void 0?+i:o!==void 0?+o:0,rx1y2:u=i!==void 0?+i:l!==void 0?+l:0,rx2y1:c=a!==void 0?+a:o!==void 0?+o:0,rx2y2:f=a!==void 0?+a:l!==void 0?+l:0}={}){s||u||c||f?(e.rx1y1=s,e.rx1y2=u,e.rx2y1=c,e.rx2y2=f):(e.rx=ot(n,"auto"),e.ry=ot(r,"auto"))}function Dq(e,t,n,r,i,o){const{rx1y1:a,rx1y2:l,rx2y1:s,rx2y2:u}=o;typeof t!="function"&&(t=yr(t)),typeof n!="function"&&(n=yr(n)),typeof r!="function"&&(r=yr(r)),typeof i!="function"&&(i=yr(i));const c=Math.max(Math.abs(a+s),Math.abs(l+u)),f=Math.max(Math.abs(a+l),Math.abs(s+u));e.attr("d",d=>{const h=t(d),m=n(d),p=r(d),w=i(d),y=h>p,g=m>w,v=y?p:h,b=y?h:p,_=g?w:m,M=g?m:w,S=Math.min(1,(b-v)/c,(M-_)/f),C=S*(y?g?u:s:g?l:a),k=S*(y?g?l:a:g?u:s),$=S*(y?g?a:l:g?s:u),E=S*(y?g?s:u:g?a:l);return`M${v},${_+ic(C,E)}A${C},${C} 0 0 ${C<0?0:1} ${v+rc(C,E)},${_}H${b-rc(k,$)}A${k},${k} 0 0 ${k<0?0:1} ${b},${_+ic(k,$)}V${M-ic($,k)}A${$},${$} 0 0 ${$<0?0:1} ${b-rc($,k)},${M}H${v+rc(E,C)}A${E},${E} 0 0 ${E<0?0:1} ${v},${M-ic(E,C)}Z`})}function rc(e,t){return t<0?e:Math.abs(e)}function ic(e,t){return t<0?Math.abs(e):e}const zq={ariaLabel:"frame",fill:"none",stroke:"currentColor",clip:!1},Fq={ariaLabel:"frame",fill:null,stroke:"currentColor",strokeLinecap:"square",clip:!1};class Bq extends $n{constructor(t={}){const{anchor:n=null}=t;super(Rc,void 0,t,n==null?zq:Fq),this.anchor=iM(n,"anchor",["top","right","bottom","left"]),Lq(this,t),n||Oq(this,t)}render(t,n,r,i,o){const{marginTop:a,marginRight:l,marginBottom:s,marginLeft:u,width:c,height:f}=i,{anchor:d,insetTop:h,insetRight:m,insetBottom:p,insetLeft:w}=this,{rx:y,ry:g,rx1y1:v,rx1y2:b,rx2y1:_,rx2y2:M}=this,S=u+w,C=c-l-m,k=a+h,$=f-s-p;return bt(d?"svg:line":v||b||_||M?"svg:path":"svg:rect",o).datum(0).call(Ai,this,i,o).call(Ii,this).call(Ja,this,r).call(Li,this,{}).call(d==="left"?E=>E.attr("x1",S).attr("x2",S).attr("y1",k).attr("y2",$):d==="right"?E=>E.attr("x1",C).attr("x2",C).attr("y1",k).attr("y2",$):d==="top"?E=>E.attr("x1",S).attr("x2",C).attr("y1",k).attr("y2",k):d==="bottom"?E=>E.attr("x1",S).attr("x2",C).attr("y1",$).attr("y2",$):v||b||_||M?E=>E.call(Dq,S,k,C,$,this):E=>E.attr("x",S).attr("y",k).attr("width",C-S).attr("height",$-k).attr("rx",y).attr("ry",g)).node()}}function Hq(e){return new Bq(e)}const Ep={ariaLabel:"tip",fill:"var(--plot-background)",stroke:"currentColor"},Uq=new Set(["geometry","href","src","ariaLabel","scales"]);class Wq extends $n{constructor(t,n={}){n.tip&&(n={...n,tip:!1}),n.title===void 0&&Eo(t)&&oM(t)&&(n={...n,title:Lr});const{x:r,y:i,x1:o,x2:a,y1:l,y2:s,anchor:u,preferredAnchor:c="bottom",monospace:f,fontFamily:d=f?"ui-monospace, monospace":void 0,fontSize:h,fontStyle:m,fontVariant:p,fontWeight:w,lineHeight:y=1,lineWidth:g=20,frameAnchor:v,format:b,textAnchor:_="start",textOverflow:M,textPadding:S=8,title:C,pointerSize:k=12,pathFilter:$="drop-shadow(0 3px 4px rgba(0,0,0,0.2))"}=n;super(t,{x:{value:o!=null&&a!=null?null:r,scale:"x",optional:!0},y:{value:l!=null&&s!=null?null:i,scale:"y",optional:!0},x1:{value:o,scale:"x",optional:a==null},y1:{value:l,scale:"y",optional:s==null},x2:{value:a,scale:"x",optional:o==null},y2:{value:s,scale:"y",optional:l==null},title:{value:C,optional:!0}},n,Ep),this.anchor=H1(u,"anchor"),this.preferredAnchor=H1(c,"preferredAnchor"),this.frameAnchor=R0(v),this.textAnchor=ot(_,"middle"),this.textPadding=+S,this.pointerSize=+k,this.pathFilter=St($),this.lineHeight=+y,this.lineWidth=+g,this.textOverflow=tC(M),this.monospace=!!f,this.fontFamily=St(d),this.fontSize=yt(h),this.fontStyle=St(m),this.fontVariant=St(p),this.fontWeight=St(w);for(const E in Ep)E in this.channels&&(this[E]=Ep[E]);this.splitLines=iC(this),this.clipLine=oC(this),this.format=typeof b=="string"||typeof b=="function"?{title:b}:{...b}}render(t,n,r,i,o){const a=this,{x:l,y:s,fx:u,fy:c}=n,{ownerSVGElement:f,document:d}=o,{anchor:h,monospace:m,lineHeight:p,lineWidth:w}=this,{textPadding:y,pointerSize:g,pathFilter:v}=this,{marginTop:b,marginLeft:_}=i,{x1:M,y1:S,x2:C,y2:k,x:$=M??C,y:E=S??k}=r,U=u?u(t.fx)-_:0,D=c?c(t.fy)-b:0,[N,P]=gu(this,i),I=FM(r,N),z=BM(r,P),T=m?Tv:kv,R=T(da);let A,L;"title"in r?(A=jx.call(this,{title:r.channels.title},n),L=Xq):(A=jx.call(this,r.channels,n),L=Gq);const H=bt("svg:g",o).call(Ai,this,i,o).call(rC,this).call(Li,this,{x:$&&l,y:E&&s}).call(te=>te.selectAll().data(t).enter().append("g").attr("transform",Z=>`translate(${Math.round(I(Z))},${Math.round(z(Z))})`).call(Ii,this).call(Z=>Z.append("path").attr("filter",v)).call(Z=>Z.append("text").each(function(B){const j=fa(this);this.setAttribute("fill","currentColor"),this.setAttribute("fill-opacity",1),this.setAttribute("stroke","none");const F=L.call(a,B,t,A,n,r);if(typeof F=="string")for(const V of a.splitLines(F))G(j,{value:a.clipLine(V)});else{const V=new Set;for(const X of F){const{label:O=""}=X;O&&V.has(O)||(V.add(O),G(j,X))}}})));function G(te,{label:Z,value:B,color:j,opacity:F}){Z??(Z=""),B??(B="");const V=j!=null||F!=null;let X,O=w*100;const[le]=Fa(Z,O,T,R);if(le>=0)Z=Z.slice(0,le).trimEnd()+da,X=B.trim(),B="";else{(Z||!B&&!V)&&(B=" "+B);const[ge]=Fa(B,O-T(Z),T,R);ge>=0&&(X=B.trim(),B=B.slice(0,ge).trimEnd()+da)}const ne=te.append("tspan").attr("x",0).attr("dy",`${p}em`).text("​");Z&&ne.append("tspan").attr("font-weight","bold").text(Z),B&&ne.append(()=>d.createTextNode(B)),V&&ne.append("tspan").text(" ■").attr("fill",j).attr("fill-opacity",F).style("user-select","none"),X&&ne.append("title").text(X)}function J(){const{width:te,height:Z}=i.facet??i;H.selectChildren().each(function(B){let{x:j,width:F,height:V}=this.getBBox();F=Math.round(F),V=Math.round(V);let X=h;if(X===void 0){const ne=I(B)+U,ge=z(B)+D,Se=ne+F+g+y*2<te,je=ne-F-g-y*2>0,Dr=ge+V+g+y*2<Z,Pn=ge-V-g-y*2>0;X=Se&&je?Dr&&Pn?a.preferredAnchor:Pn?"bottom":"top":Dr&&Pn?Se?"left":"right":(Se||je)&&(Dr||Pn)?`${Pn?"bottom":"top"}-${Se?"left":"right"}`:a.preferredAnchor}const O=this.firstChild,le=this.lastChild;if(O.setAttribute("d",Yq(X,g,y,F,V)),j)for(const ne of le.childNodes)ne.setAttribute("x",-j);le.setAttribute("y",`${+Vq(X,le.childNodes.length,p).toFixed(6)}em`),le.setAttribute("transform",`translate(${qq(X,g,y,F,V)})`)}),H.attr("visibility",null)}return t.length&&(H.attr("visibility","hidden"),f.isConnected?Promise.resolve().then(J):typeof requestAnimationFrame<"u"&&requestAnimationFrame(J)),H.node()}}function jq(e,{x:t,y:n,...r}={}){return r.frameAnchor===void 0&&([t,n]=k0(t,n)),new Wq(e,{...r,x:t,y:n})}function Vq(e,t,n){return/^top(?:-|$)/.test(e)?.94-n:-.29-t*n}function qq(e,t,n,r,i){switch(e){case"middle":return[-r/2,i/2];case"top-left":return[n,t+n];case"top":return[-r/2,t/2+n];case"top-right":return[-r-n,t+n];case"right":return[-t/2-r-n,i/2];case"bottom-left":return[n,-t-n];case"bottom":return[-r/2,-t/2-n];case"bottom-right":return[-r-n,-t-n];case"left":return[n+t/2,i/2]}}function Yq(e,t,n,r,i){const o=r+n*2,a=i+n*2;switch(e){case"middle":return`M${-o/2},${-a/2}h${o}v${a}h${-o}z`;case"top-left":return`M0,0l${t},${t}h${o-t}v${a}h${-o}z`;case"top":return`M0,0l${t/2},${t/2}h${(o-t)/2}v${a}h${-o}v${-a}h${(o-t)/2}z`;case"top-right":return`M0,0l${-t},${t}h${t-o}v${a}h${o}z`;case"right":return`M0,0l${-t/2},${-t/2}v${t/2-a/2}h${-o}v${a}h${o}v${t/2-a/2}z`;case"bottom-left":return`M0,0l${t},${-t}h${o-t}v${-a}h${-o}z`;case"bottom":return`M0,0l${t/2},${-t/2}h${(o-t)/2}v${-a}h${-o}v${a}h${(o-t)/2}z`;case"bottom-right":return`M0,0l${-t},${-t}h${t-o}v${-a}h${o}z`;case"left":return`M0,0l${t/2},${-t/2}v${t/2-a/2}h${o}v${a}h${-o}v${t/2-a/2}z`}}function jx(e,t){var i,o;const n={};let r=this.format;r=Vx(r,e,"x"),r=Vx(r,e,"y"),this.format=r;for(const a in r){const l=r[a];if(!(l===null||l===!1))if(a==="fx"||a==="fy")n[a]=!0;else{const s=xx(e,a);s&&(n[a]=s)}}for(const a in e){if(a in n||a in r||Uq.has(a)||(a==="x"||a==="y")&&e.geometry)continue;const l=xx(e,a);if(l){if(l.scale==null&&l.defaultScale==="color")continue;n[a]=l}}this.facet&&(t.fx&&!("fx"in r)&&(n.fx=!0),t.fy&&!("fy"in r)&&(n.fy=!0));for(const a in n){const l=this.format[a];if(typeof l=="string"){const s=((i=n[a])==null?void 0:i.value)??((o=t[a])==null?void 0:o.domain())??[];this.format[a]=(Jn(s)?iu:Qa)(l)}else if(l===void 0||l===!0){const s=t[a];this.format[a]=s!=null&&s.bandwidth?$v(s,s.domain()):za}}return n}function Vx(e,t,n){if(!(n in e))return e;const r=`${n}1`,i=`${n}2`;if((r in e||!(r in t))&&(i in e||!(i in t)))return e;const o=Object.entries(e),a=e[n];return o.splice(o.findIndex(([l])=>l===n)+1,0,[r,a],[i,a]),Object.fromEntries(o)}function Xq(e,t,{title:n}){return this.format.title(n.value[e],e)}function*Gq(e,t,n,r,i){for(const o in n){if(o==="fx"||o==="fy"){yield{label:Jf(r,n,o),value:this.format[o](t[o],e)};continue}if(o==="x1"&&"x2"in n||o==="y1"&&"y2"in n)continue;const a=n[o];if(o==="x2"&&"x1"in n)yield{label:Yx(r,n,"x"),value:qx(this.format.x2,n.x1,a,e)};else if(o==="y2"&&"y1"in n)yield{label:Yx(r,n,"y"),value:qx(this.format.y2,n.y1,a,e)};else{const l=a.value[e],s=a.scale;if(!_i(l)&&s==null)continue;yield{label:Jf(r,n,o),value:this.format[o](l,e),color:s==="color"?i[o][e]:null,opacity:s==="opacity"?i[o][e]:null}}}}function qx(e,t,n,r){var i;return(i=n.hint)!=null&&i.length?`${e(n.value[r]-t.value[r],r)}`:`${e(t.value[r],r)}–${e(n.value[r],r)}`}function Yx(e,t,n){const r=Jf(e,t,`${n}1`,n),i=Jf(e,t,`${n}2`,n);return r===i?r:`${r}–${i}`}function Jf(e,t,n,r=n){const i=t[n],o=e[(i==null?void 0:i.scale)??n];return String((o==null?void 0:o.label)??(i==null?void 0:i.label)??r)}function RC(e={}){var R;const{facet:t,style:n,title:r,subtitle:i,caption:o,ariaLabel:a,ariaDescription:l}=e,s=O0(e.className),u=e.marks===void 0?[]:Gx(e.marks);u.push(...nY(u));const c=eY(t,e),f=new Map;for(const A of u){const L=Kx(A,c,e);L&&f.set(A,L)}const d=new Map;c&&vl(d,[c],e),vl(d,f,e);const h=Gx(rY(u,d,e));for(const A of h){const L=Kx(A,c,e);L&&f.set(A,L)}u.unshift(...h);let m=Bj(d,e);if(m!==void 0){const A=c?xp(m,c):void 0;for(const H of u){if(H.facet===null||H.facet==="super")continue;const G=f.get(H);G!==void 0&&(G.facetsIndex=H.fx!=null||H.fy!=null?xp(m,G):A)}const L=new Set;for(const{facetsIndex:H}of f.values())H==null||H.forEach((G,J)=>{(G==null?void 0:G.length)>0&&L.add(J)});m.forEach(0<L.size&&L.size<m.length?(H,G)=>H.empty=!L.has(G):H=>H.empty=!1);for(const H of u)if(H.facet==="exclude"){const G=f.get(H);G!==void 0&&(G.facetsIndex=Wj(G.facetsIndex))}}for(const A of Oe.keys())F1(e[A])&&A!=="fx"&&A!=="fy"&&d.set(A,[]);const p=new Map;for(const A of u){if(p.has(A))throw new Error("duplicate mark; each mark must be unique");const{facetsIndex:L,channels:H}=f.get(A)??{},{data:G,facets:J,channels:te}=A.initialize(L,H,e);Pv(te,e),p.set(A,{data:G,facets:J,channels:te})}const w=V1(vl(d,p,e),e),y=$V(w,u,e);Pj(w,y);const g=Tx(w),{fx:v,fy:b}=g,_=v||b?TM(w,y):y,M=v||b?cY(g,y):y,S=bv(e),C=S.document,k=h0("svg").call(C.documentElement);let $=k;S.ownerSVGElement=k,S.className=s,S.projection=Zj(e,_),S.filterFacets=(A,L)=>xp(m,{channels:L,groups:wv(A,L)}),S.getMarkState=A=>{const L=p.get(A),H=f.get(A);return{...L,channels:{...L.channels,...H==null?void 0:H.channels}}},S.dispatchValue=A=>{$.value!==A&&($.value=A,$.dispatchEvent(new Event("input",{bubbles:!0})))};const E=new Set;for(const[A,L]of p)if(A.initializer!=null){const H=A.facet==="super"?M:_,G=A.initializer(L.data,L.facets,L.channels,g,H,S);if(G.data!==void 0&&(L.data=G.data),G.facets!==void 0&&(L.facets=G.facets),G.channels!==void 0){const{fx:J,fy:te,...Z}=G.channels;Jq(Z),Object.assign(L.channels,Z);for(const B of Object.values(Z)){const{scale:j}=B;j!=null&&!SW(Oe.get(j))&&(NC(B,e),E.add(j))}(J!=null||te!=null)&&f.set(A,!0)}}if(E.size){const A=new Map;vl(A,p,e,J=>E.has(J)),vl(d,p,e,J=>E.has(J));const L=uY(V1(A,e),w),{scales:H,...G}=Tx(L);Object.assign(w,L),Object.assign(g,G),Object.assign(g.scales,H)}let U,D;m!==void 0&&(U={x:v==null?void 0:v.domain(),y:b==null?void 0:b.domain()},m=Hj(m,U),D=Uj(v,b,y));for(const[A,L]of p)L.values=A.scale(L.channels,g,S);const{width:N,height:P}=y;fa(k).attr("class",s).attr("fill","currentColor").attr("font-family","system-ui, sans-serif").attr("font-size",10).attr("text-anchor","middle").attr("width",N).attr("height",P).attr("viewBox",`0 0 ${N} ${P}`).attr("aria-label",a).attr("aria-description",l).call(A=>A.append("style").text(`:where(.${s}) {
  --plot-background: white;
  display: block;
  height: auto;
  height: intrinsic;
  max-width: 100%;
}
:where(.${s} text),
:where(.${s} tspan) {
  white-space: pre;
}`)).call(_v,n);for(const A of u){const{channels:L,values:H,facets:G}=p.get(A);if(m===void 0||A.facet==="super"){let J=null;if(G&&(J=G[0],J=A.filter(J,L,H),J.length===0))continue;const te=A.render(J,g,H,M,S);if(te==null)continue;k.appendChild(te)}else{let J;for(const te of m){if(!(((R=A.facetAnchor)==null?void 0:R.call(A,m,U,te))??!te.empty))continue;let Z=null;if(G){const j=f.has(A);if(Z=G[j?te.i:0],Z=A.filter(Z,L,H),Z.length===0)continue;!j&&Z===G[0]&&(Z=sW(Z)),Z.fx=te.x,Z.fy=te.y,Z.fi=te.i}const B=A.render(Z,g,H,_,S);if(B!=null){(J??(J=fa(k).append("g"))).append(()=>B).datum(te);for(const j of["aria-label","aria-description","aria-hidden","transform"])B.hasAttribute(j)&&(J.attr(j,B.getAttribute(j)),B.removeAttribute(j))}}J==null||J.selectChildren().attr("transform",D)}}const I=Iq(w,S,e),{figure:z=r!=null||i!=null||o!=null||I.length>0}=e;z&&($=C.createElement("figure"),$.className=`${s}-figure`,$.style.maxWidth="initial",r!=null&&$.append(Xx(C,r,"h2")),i!=null&&$.append(Xx(C,i,"h3")),$.append(...I,k),o!=null&&$.append(Kq(C,o)),"value"in k&&($.value=k.value,delete k.value)),$.scale=zj(g.scales),$.legend=Rq(w,S,e);const T=hj();return T>0&&fa(k).append("text").attr("x",N).attr("y",20).attr("dy","-1em").attr("text-anchor","end").attr("font-family","initial").text("⚠️").append("title").text(`${T.toLocaleString("en-US")} warning${T===1?"":"s"}. Please check the console.`),$}function Xx(e,t,n){if(t.ownerDocument)return t;const r=e.createElement(n);return r.append(t),r}function Kq(e,t){const n=e.createElement("figcaption");return n.append(t),n}function Gx(e){return e.flat(1/0).filter(t=>t!=null).map(Qq)}function Qq(e){return typeof e.render=="function"?e:new Zq(e)}class Zq extends $n{constructor(t){if(typeof t!="function")throw new TypeError("invalid mark; missing render function");super(),this.render=t}render(){}}function Pv(e,t){for(const n in e)NC(e[n],t);return e}function NC(e,t){const{scale:n,transform:r=!0}=e;if(n==null||!r)return;const{type:i,percent:o,interval:a,transform:l=o?s=>s==null?NaN:s*100:uW(a,i)}=t[n]??{};l!=null&&(e.value=wt(e.value,l),e.transform=!1)}function Jq(e){for(const t in e)pM(t,e[t])}function vl(e,t,n,r=rW){var i,o;for(const{channels:a}of t.values())for(const l in a){const s=a[l],{scale:u}=s;if(u!=null&&r(u))if(u==="projection"){if(!nV(n)){const c=((i=n.x)==null?void 0:i.domain)===void 0,f=((o=n.y)==null?void 0:o.domain)===void 0;if(c||f){const[d,h]=iV(s);c&&kp(e,"x",d),f&&kp(e,"y",h)}}}else kp(e,u,s)}return e}function kp(e,t,n){const r=e.get(t);r!==void 0?r.push(n):e.set(t,[n])}function eY(e,t){if(e==null)return;const{x:n,y:r}=e;if(n==null&&r==null)return;const i=La(e.data);if(i==null)throw new Error("missing facet data");const o={};n!=null&&(o.fx=As(i,{value:n,scale:"fx"})),r!=null&&(o.fy=As(i,{value:r,scale:"fy"})),Pv(o,t);const a=wv(i,o);return{channels:o,groups:a,data:e.data}}function Kx(e,t,n){if(e.facet===null||e.facet==="super")return;const{fx:r,fy:i}=e;if(r!=null||i!=null){const s=La(e.data??r??i);if(s===void 0)throw new Error(`missing facet data in ${e.ariaLabel}`);if(s===null)return;const u={};return r!=null&&(u.fx=As(s,{value:r,scale:"fx"})),i!=null&&(u.fy=As(s,{value:i,scale:"fy"})),Pv(u,n),{channels:u,groups:wv(s,u)}}if(t===void 0)return;const{channels:o,groups:a,data:l}=t;if(e.facet!=="auto"||e.data===l)return{channels:o,groups:a};l.length>0&&(a.size>1||a.size===1&&o.fx&&o.fy&&[...a][0][1].size>1)&&B1(La(e.data))===B1(l)&&fi(`Warning: the ${e.ariaLabel} mark appears to use faceted data, but isn’t faceted. The mark data has the same length as the facet data and the mark facet option is "auto", but the mark data and facet data are distinct. If this mark should be faceted, set the mark facet option to true; otherwise, suppress this warning by setting the mark facet option to false.`)}function tY(e,t={}){return Da({...t,x:null,y:null},(n,r,i,o,a,l)=>l.getMarkState(e))}function nY(e){const t=[];for(const n of e){let r=n.tip;if(r){r===!0?r={}:typeof r=="string"&&(r={pointer:r});let{pointer:i,preferredAnchor:o}=r;i=/^x$/i.test(i)?NV:/^y$/i.test(i)?Ox:RV,r=i(tY(n,r)),r.title=null,o===void 0&&(r.preferredAnchor=i===Ox?"left":"bottom");const a=jq(n.data,r);a.facet=n.facet,a.facetAnchor=n.facetAnchor,t.push(a)}}return t}function rY(e,t,n){let{projection:r,x:i={},y:o={},fx:a={},fy:l={},axis:s,grid:u,facet:c={},facet:{axis:f=s,grid:d}=c,x:{axis:h=s,grid:m=h===null?null:u}=i,y:{axis:p=s,grid:w=p===null?null:u}=o,fx:{axis:y=f,grid:g=y===null?null:d}=a,fy:{axis:v=f,grid:b=v===null?null:d}=l}=n;(r||!F1(i)&&!Qx("x",e))&&(h=m=null),(r||!F1(o)&&!Qx("y",e))&&(p=w=null),t.has("fx")||(y=g=null),t.has("fy")||(v=b=null),h===void 0&&(h=!lc(e,"x")),p===void 0&&(p=!lc(e,"y")),y===void 0&&(y=!lc(e,"fx")),v===void 0&&(v=!lc(e,"fy")),h===!0&&(h="bottom"),p===!0&&(p="left"),y===!0&&(y=h==="top"||h===null?"bottom":"top"),v===!0&&(v=p==="right"||p===null?"left":"right");const _=[];return ac(_,b,xq,l),oc(_,v,pq,"right","left",c,l),ac(_,g,Sq,a),oc(_,y,mq,"top","bottom",c,a),ac(_,w,bq,o),oc(_,p,mC,"left","right",n,o),ac(_,m,_q,i),oc(_,h,gC,"bottom","top",n,i),_}function oc(e,t,n,r,i,o,a){if(!t)return;const l=iY(t);a=oY(l?r:t,o,a);const{line:s}=a;(n===mC||n===gC)&&s&&!Ns(s)&&e.push(Hq(aY(a))),e.push(n(a)),l&&e.push(n({...a,anchor:i,label:null}))}function ac(e,t,n,r){!t||Ns(t)||e.push(n(lY(t,r)))}function iY(e){return/^\s*both\s*$/i.test(e)}function oY(e,t,{line:n=t.line,ticks:r,tickSize:i,tickSpacing:o,tickPadding:a,tickFormat:l,tickRotate:s,fontVariant:u,ariaLabel:c,ariaDescription:f,label:d=t.label,labelAnchor:h,labelArrow:m=t.labelArrow,labelOffset:p}){return{anchor:e,line:n,ticks:r,tickSize:i,tickSpacing:o,tickPadding:a,tickFormat:l,tickRotate:s,fontVariant:u,ariaLabel:c,ariaDescription:f,label:d,labelAnchor:h,labelArrow:m,labelOffset:p}}function aY(e){const{anchor:t,line:n}=e;return{anchor:t,facetAnchor:t+"-empty",stroke:n===!0?void 0:n}}function lY(e,{stroke:t=P0(e)?e:void 0,ticks:n=sY(e)?e:void 0,tickSpacing:r,ariaLabel:i,ariaDescription:o}){return{stroke:t,ticks:n,tickSpacing:r,ariaLabel:i,ariaDescription:o}}function sY(e){switch(typeof e){case"number":return!0;case"string":return!P0(e)}return Eo(e)||typeof(e==null?void 0:e.range)=="function"}function lc(e,t){const n=`${t}-axis `;return e.some(r=>{var i;return(i=r.ariaLabel)==null?void 0:i.startsWith(n)})}function Qx(e,t){for(const n of t)for(const r in n.channels){const{scale:i}=n.channels[r];if(i===e||i==="projection")return!0}return!1}function uY(e,t){for(const n in e){const r=e[n],i=t[n];r.label===void 0&&i&&(r.label=i.label)}return e}function cY({fx:e,fy:t},n){const{marginTop:r,marginRight:i,marginBottom:o,marginLeft:a,width:l,height:s}=vv(n),u=e&&Zx(e),c=t&&Zx(t);return{marginTop:t?c[0]:r,marginRight:e?l-u[1]:i,marginBottom:t?s-c[1]:o,marginLeft:e?u[0]:a,inset:{marginTop:n.marginTop,marginRight:n.marginRight,marginBottom:n.marginBottom,marginLeft:n.marginLeft},width:l,height:s}}function Zx(e){const t=e.domain();if(t.length===0)return[0,e.bandwidth()];let n=e(t[0]),r=e(t[t.length-1]);return r<n&&([n,r]=[r,n]),[n,r+e.bandwidth()]}const fY=new Map([["basis",EU],["basis-closed",kU],["basis-open",TU],["bundle",$U],["bump-x",mU],["bump-y",gU],["cardinal",PU],["cardinal-closed",RU],["cardinal-open",NU],["catmull-rom",AU],["catmull-rom-closed",IU],["catmull-rom-open",LU],["linear",x0],["linear-closed",OU],["monotone-x",DU],["monotone-y",zU],["natural",FU],["step",BU],["step-after",UU],["step-before",HU]]);function dY(e=x0,t){if(typeof e=="function")return e;const n=fY.get(`${e}`.toLowerCase());if(!n)throw new Error(`unknown curve: ${e}`);if(t!==void 0){if("beta"in n)return n.beta(t);if("tension"in n)return n.tension(t);if("alpha"in n)return n.alpha(t)}return n}function hY(e=ed,t){return typeof e!="function"&&`${e}`.toLowerCase()==="auto"?ed:dY(e,t)}function ed(e){return x0(e)}const pY={ariaLabel:"dot",fill:"none",stroke:"currentColor",strokeWidth:1.5};function mY(e){return e.sort===void 0&&e.reverse===void 0?RW({channel:"-r"},e):e}class gY extends $n{constructor(t,n={}){const{x:r,y:i,r:o,rotate:a,symbol:l=Rs,frameAnchor:s}=n,[u,c]=Mt(a,0),[f,d]=$W(l),[h,m]=Mt(o,f==null?3:4.5);super(t,{x:{value:r,scale:"x",optional:!0},y:{value:i,scale:"y",optional:!0},r:{value:h,scale:"r",filter:M0,optional:!0},rotate:{value:u,optional:!0},symbol:{value:f,scale:"auto",optional:!0}},mY(n),pY),this.r=m,this.rotate=c,this.symbol=d,this.frameAnchor=R0(s);const{channels:p}=this,{symbol:w}=p;if(w){const{fill:y,stroke:g}=p;w.hint={fill:y?y.value===w.value?"color":"currentColor":this.fill??"currentColor",stroke:g?g.value===w.value?"color":"currentColor":this.stroke??"none"}}}render(t,n,r,i,o){const{x:a,y:l}=n,{x:s,y:u,r:c,rotate:f,symbol:d}=r,{r:h,rotate:m,symbol:p}=this,[w,y]=gu(this,i),g=p===Rs,v=c?void 0:h*h*Math.PI;return rv(h)&&(t=[]),bt("svg:g",o).call(Ai,this,i,o).call(Li,this,{x:s&&a,y:u&&l}).call(b=>b.selectAll().data(t).enter().append(g?"circle":"path").call(Ii,this).call(g?_=>{_.attr("cx",s?M=>s[M]:w).attr("cy",u?M=>u[M]:y).attr("r",c?M=>c[M]:h)}:_=>{_.attr("transform",Cv`translate(${s?M=>s[M]:w},${u?M=>u[M]:y})${f?M=>` rotate(${f[M]})`:m?` rotate(${m})`:""}`).attr("d",c&&d?M=>{const S=qi();return d[M].draw(S,c[M]*c[M]*Math.PI),S}:c?M=>{const S=qi();return p.draw(S,c[M]*c[M]*Math.PI),S}:d?M=>{const S=qi();return d[M].draw(S,v),S}:(()=>{const M=qi();return p.draw(M,v),M})())}).call(Ja,this,r)).node()}}function yY(e,{x:t,y:n,...r}={}){return r.frameAnchor===void 0&&([t,n]=k0(t,n)),new gY(e,{...r,x:t,y:n})}const vY={ariaLabel:"line",fill:"none",stroke:"currentColor",strokeWidth:1.5,strokeLinecap:"round",strokeLinejoin:"round",strokeMiterlimit:1};class wY extends $n{constructor(t,n={}){const{x:r,y:i,z:o,curve:a,tension:l}=n;super(t,{x:{value:r,scale:"x"},y:{value:i,scale:"y"},z:{value:lW(n),optional:!0}},n,vY),this.z=o,this.curve=hY(a,l),Mv(this,n)}filter(t){return t}project(t,n,r){this.curve!==ed&&super.project(t,n,r)}render(t,n,r,i,o){const{x:a,y:l}=r,{curve:s}=this;return bt("svg:g",o).call(Ai,this,i,o).call(Li,this,n).call(u=>u.selectAll().data(xV(t,[a,l],this,r)).enter().append("path").call(Ii,this).call(vV,this,r).call(DV,this,r,o).attr("d",s===ed&&o.projection?bY(o.projection,a,l):pU().curve(s).defined(c=>c>=0).x(c=>a[c]).y(c=>l[c]))).node()}}function bY(e,t,n){const r=g0(e);return t=Qf(t),n=Qf(n),i=>{let o=[];const a=[o];for(const l of i)l===-1?(o=[],a.push(o)):o.push([t[l],n[l]]);return r({type:"MultiLineString",coordinates:a})}}function xY(e,{x:t,y:n,...r}={}){return[t,n]=k0(t,n),new wY(e,{...r,x:t,y:n})}$n.prototype.plot=function({marks:e=[],...t}={}){return RC({...t,marks:[...e,this]})};const _Y={top:20,right:20,bottom:32,left:40},Tp=e=>{const{data:t,getX:n,getY:r,xDomain:i,yDomain:o,xLabel:a,yLabel:l,width:s,height:u,margin:c=_Y,...f}=e,d=x.useRef();return x.useEffect(()=>{if(t===void 0)return;const h=RC({width:s,height:u,grid:!0,x:{domain:i,label:a},y:{domain:o,label:l},marks:[yY(t.map(m=>[n(m),r(m)]),{tip:{fontSize:12}}),xY(t.map(m=>[n(m),r(m)]),{curve:"linear",strokeWidth:1})]});return d.current.append(h),()=>h.remove()},[t]),W(SY,{...f,ref:d})},SY=ie("div",{target:"e1rs5new0"})({name:"bjn8wh",styles:"position:relative"});function Z1(e){let t=e.activeElement;for(;((n=t)==null||(n=n.shadowRoot)==null?void 0:n.activeElement)!=null;){var n;t=t.shadowRoot.activeElement}return t}function br(e,t){if(!e||!t)return!1;const n=t.getRootNode==null?void 0:t.getRootNode();if(e.contains(t))return!0;if(n&&Wm(n)){let r=t;for(;r;){if(e===r)return!0;r=r.parentNode||r.host}}return!1}function AC(){const e=navigator.userAgentData;return e!=null&&e.platform?e.platform:navigator.platform}function IC(){const e=navigator.userAgentData;return e&&Array.isArray(e.brands)?e.brands.map(t=>{let{brand:n,version:r}=t;return n+"/"+r}).join(" "):navigator.userAgent}function MY(e){return EY()?!1:!Jx()&&e.width===0&&e.height===0||Jx()&&e.width===1&&e.height===1&&e.pressure===0&&e.detail===0&&e.pointerType==="mouse"||e.width<1&&e.height<1&&e.pressure===0&&e.detail===0&&e.pointerType==="touch"}function LC(){return/apple/i.test(navigator.vendor)}function Jx(){const e=/android/i;return e.test(AC())||e.test(IC())}function CY(){return AC().toLowerCase().startsWith("mac")&&!navigator.maxTouchPoints}function EY(){return IC().includes("jsdom/")}function J1(e,t){const n=["mouse","pen"];return n.push("",void 0),n.includes(e)}function kY(e){return"nativeEvent"in e}function TY(e){return e.matches("html,body")}function Zr(e){return(e==null?void 0:e.ownerDocument)||document}function $p(e,t){if(t==null)return!1;if("composedPath"in e)return e.composedPath().includes(t);const n=e;return n.target!=null&&t.contains(n.target)}function Hi(e){return"composedPath"in e?e.composedPath()[0]:e.target}const $Y="input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";function PY(e){return Vt(e)&&e.matches($Y)}/*!
* tabbable 6.2.0
* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
*/var RY=["input:not([inert])","select:not([inert])","textarea:not([inert])","a[href]:not([inert])","button:not([inert])","[tabindex]:not(slot):not([inert])","audio[controls]:not([inert])","video[controls]:not([inert])",'[contenteditable]:not([contenteditable="false"]):not([inert])',"details>summary:first-of-type:not([inert])","details:not([inert])"],eg=RY.join(","),OC=typeof Element>"u",Ls=OC?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,td=!OC&&Element.prototype.getRootNode?function(e){var t;return e==null||(t=e.getRootNode)===null||t===void 0?void 0:t.call(e)}:function(e){return e==null?void 0:e.ownerDocument},nd=function e(t,n){var r;n===void 0&&(n=!0);var i=t==null||(r=t.getAttribute)===null||r===void 0?void 0:r.call(t,"inert"),o=i===""||i==="true",a=o||n&&t&&e(t.parentNode);return a},NY=function(t){var n,r=t==null||(n=t.getAttribute)===null||n===void 0?void 0:n.call(t,"contenteditable");return r===""||r==="true"},AY=function(t,n,r){if(nd(t))return[];var i=Array.prototype.slice.apply(t.querySelectorAll(eg));return n&&Ls.call(t,eg)&&i.unshift(t),i=i.filter(r),i},IY=function e(t,n,r){for(var i=[],o=Array.from(t);o.length;){var a=o.shift();if(!nd(a,!1))if(a.tagName==="SLOT"){var l=a.assignedElements(),s=l.length?l:a.children,u=e(s,!0,r);r.flatten?i.push.apply(i,u):i.push({scopeParent:a,candidates:u})}else{var c=Ls.call(a,eg);c&&r.filter(a)&&(n||!t.includes(a))&&i.push(a);var f=a.shadowRoot||typeof r.getShadowRoot=="function"&&r.getShadowRoot(a),d=!nd(f,!1)&&(!r.shadowRootFilter||r.shadowRootFilter(a));if(f&&d){var h=e(f===!0?a.children:f.children,!0,r);r.flatten?i.push.apply(i,h):i.push({scopeParent:a,candidates:h})}else o.unshift.apply(o,a.children)}}return i},DC=function(t){return!isNaN(parseInt(t.getAttribute("tabindex"),10))},zC=function(t){if(!t)throw new Error("No node provided");return t.tabIndex<0&&(/^(AUDIO|VIDEO|DETAILS)$/.test(t.tagName)||NY(t))&&!DC(t)?0:t.tabIndex},LY=function(t,n){var r=zC(t);return r<0&&n&&!DC(t)?0:r},OY=function(t,n){return t.tabIndex===n.tabIndex?t.documentOrder-n.documentOrder:t.tabIndex-n.tabIndex},FC=function(t){return t.tagName==="INPUT"},DY=function(t){return FC(t)&&t.type==="hidden"},zY=function(t){var n=t.tagName==="DETAILS"&&Array.prototype.slice.apply(t.children).some(function(r){return r.tagName==="SUMMARY"});return n},FY=function(t,n){for(var r=0;r<t.length;r++)if(t[r].checked&&t[r].form===n)return t[r]},BY=function(t){if(!t.name)return!0;var n=t.form||td(t),r=function(l){return n.querySelectorAll('input[type="radio"][name="'+l+'"]')},i;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")i=r(window.CSS.escape(t.name));else try{i=r(t.name)}catch(a){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",a.message),!1}var o=FY(i,t.form);return!o||o===t},HY=function(t){return FC(t)&&t.type==="radio"},UY=function(t){return HY(t)&&!BY(t)},WY=function(t){var n,r=t&&td(t),i=(n=r)===null||n===void 0?void 0:n.host,o=!1;if(r&&r!==t){var a,l,s;for(o=!!((a=i)!==null&&a!==void 0&&(l=a.ownerDocument)!==null&&l!==void 0&&l.contains(i)||t!=null&&(s=t.ownerDocument)!==null&&s!==void 0&&s.contains(t));!o&&i;){var u,c,f;r=td(i),i=(u=r)===null||u===void 0?void 0:u.host,o=!!((c=i)!==null&&c!==void 0&&(f=c.ownerDocument)!==null&&f!==void 0&&f.contains(i))}}return o},e3=function(t){var n=t.getBoundingClientRect(),r=n.width,i=n.height;return r===0&&i===0},jY=function(t,n){var r=n.displayCheck,i=n.getShadowRoot;if(getComputedStyle(t).visibility==="hidden")return!0;var o=Ls.call(t,"details>summary:first-of-type"),a=o?t.parentElement:t;if(Ls.call(a,"details:not([open]) *"))return!0;if(!r||r==="full"||r==="legacy-full"){if(typeof i=="function"){for(var l=t;t;){var s=t.parentElement,u=td(t);if(s&&!s.shadowRoot&&i(s)===!0)return e3(t);t.assignedSlot?t=t.assignedSlot:!s&&u!==t.ownerDocument?t=u.host:t=s}t=l}if(WY(t))return!t.getClientRects().length;if(r!=="legacy-full")return!0}else if(r==="non-zero-area")return e3(t);return!1},VY=function(t){if(/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(t.tagName))for(var n=t.parentElement;n;){if(n.tagName==="FIELDSET"&&n.disabled){for(var r=0;r<n.children.length;r++){var i=n.children.item(r);if(i.tagName==="LEGEND")return Ls.call(n,"fieldset[disabled] *")?!0:!i.contains(t)}return!0}n=n.parentElement}return!1},qY=function(t,n){return!(n.disabled||nd(n)||DY(n)||jY(n,t)||zY(n)||VY(n))},t3=function(t,n){return!(UY(n)||zC(n)<0||!qY(t,n))},YY=function(t){var n=parseInt(t.getAttribute("tabindex"),10);return!!(isNaN(n)||n>=0)},XY=function e(t){var n=[],r=[];return t.forEach(function(i,o){var a=!!i.scopeParent,l=a?i.scopeParent:i,s=LY(l,a),u=a?e(i.candidates):l;s===0?a?n.push.apply(n,u):n.push(l):r.push({documentOrder:o,tabIndex:s,item:i,isScope:a,content:u})}),r.sort(OY).reduce(function(i,o){return o.isScope?i.push.apply(i,o.content):i.push(o.content),i},[]).concat(n)},BC=function(t,n){n=n||{};var r;return n.getShadowRoot?r=IY([t],n.includeContainer,{filter:t3.bind(null,n),flatten:!1,getShadowRoot:n.getShadowRoot,shadowRootFilter:YY}):r=AY(t,n.includeContainer,t3.bind(null,n)),XY(r)};function HC(e){return x.useMemo(()=>e.every(t=>t==null)?null:t=>{e.forEach(n=>{typeof n=="function"?n(t):n!=null&&(n.current=t)})},e)}const UC={...Ac},GY=UC.useInsertionEffect,KY=GY||(e=>e());function qr(e){const t=x.useRef(()=>{});return KY(()=>{t.current=e}),x.useCallback(function(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return t.current==null?void 0:t.current(...r)},[])}var Gn=typeof document<"u"?x.useLayoutEffect:x.useEffect;function tg(){return tg=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},tg.apply(this,arguments)}let n3=!1,QY=0;const r3=()=>"floating-ui-"+Math.random().toString(36).slice(2,6)+QY++;function ZY(){const[e,t]=x.useState(()=>n3?r3():void 0);return Gn(()=>{e==null&&t(r3())},[]),x.useEffect(()=>{n3=!0},[]),e}const JY=UC.useId,Rv=JY||ZY;function eX(){const e=new Map;return{emit(t,n){var r;(r=e.get(t))==null||r.forEach(i=>i(n))},on(t,n){e.set(t,[...e.get(t)||[],n])},off(t,n){var r;e.set(t,((r=e.get(t))==null?void 0:r.filter(i=>i!==n))||[])}}}const tX=x.createContext(null),nX=x.createContext(null),Nv=()=>{var e;return((e=x.useContext(tX))==null?void 0:e.id)||null},Av=()=>x.useContext(nX);function yu(e){return"data-floating-ui-"+e}function Pp(e){const t=x.useRef(e);return Gn(()=>{t.current=e}),t}const i3=yu("safe-polygon");function Rp(e,t,n){return n&&!J1(n)?0:typeof e=="number"?e:e==null?void 0:e[t]}function rX(e,t){t===void 0&&(t={});const{open:n,onOpenChange:r,dataRef:i,events:o,elements:a}=e,{enabled:l=!0,delay:s=0,handleClose:u=null,mouseOnly:c=!1,restMs:f=0,move:d=!0}=t,h=Av(),m=Nv(),p=Pp(u),w=Pp(s),y=Pp(n),g=x.useRef(),v=x.useRef(-1),b=x.useRef(),_=x.useRef(-1),M=x.useRef(!0),S=x.useRef(!1),C=x.useRef(()=>{}),k=x.useRef(!1),$=x.useCallback(()=>{var I;const z=(I=i.current.openEvent)==null?void 0:I.type;return(z==null?void 0:z.includes("mouse"))&&z!=="mousedown"},[i]);x.useEffect(()=>{if(!l)return;function I(z){let{open:T}=z;T||(clearTimeout(v.current),clearTimeout(_.current),M.current=!0,k.current=!1)}return o.on("openchange",I),()=>{o.off("openchange",I)}},[l,o]),x.useEffect(()=>{if(!l||!p.current||!n)return;function I(T){$()&&r(!1,T,"hover")}const z=Zr(a.floating).documentElement;return z.addEventListener("mouseleave",I),()=>{z.removeEventListener("mouseleave",I)}},[a.floating,n,r,l,p,$]);const E=x.useCallback(function(I,z,T){z===void 0&&(z=!0),T===void 0&&(T="hover");const R=Rp(w.current,"close",g.current);R&&!b.current?(clearTimeout(v.current),v.current=window.setTimeout(()=>r(!1,I,T),R)):z&&(clearTimeout(v.current),r(!1,I,T))},[w,r]),U=qr(()=>{C.current(),b.current=void 0}),D=qr(()=>{if(S.current){const I=Zr(a.floating).body;I.style.pointerEvents="",I.removeAttribute(i3),S.current=!1}});x.useEffect(()=>{if(!l)return;function I(){return i.current.openEvent?["click","mousedown"].includes(i.current.openEvent.type):!1}function z(L){if(clearTimeout(v.current),M.current=!1,c&&!J1(g.current)||f>0&&!Rp(w.current,"open"))return;const H=Rp(w.current,"open",g.current);H?v.current=window.setTimeout(()=>{y.current||r(!0,L,"hover")},H):r(!0,L,"hover")}function T(L){if(I())return;C.current();const H=Zr(a.floating);if(clearTimeout(_.current),k.current=!1,p.current&&i.current.floatingContext){n||clearTimeout(v.current),b.current=p.current({...i.current.floatingContext,tree:h,x:L.clientX,y:L.clientY,onClose(){D(),U(),E(L,!0,"safe-polygon")}});const J=b.current;H.addEventListener("mousemove",J),C.current=()=>{H.removeEventListener("mousemove",J)};return}(g.current==="touch"?!br(a.floating,L.relatedTarget):!0)&&E(L)}function R(L){I()||i.current.floatingContext&&(p.current==null||p.current({...i.current.floatingContext,tree:h,x:L.clientX,y:L.clientY,onClose(){D(),U(),E(L)}})(L))}if(Me(a.domReference)){var A;const L=a.domReference;return n&&L.addEventListener("mouseleave",R),(A=a.floating)==null||A.addEventListener("mouseleave",R),d&&L.addEventListener("mousemove",z,{once:!0}),L.addEventListener("mouseenter",z),L.addEventListener("mouseleave",T),()=>{var H;n&&L.removeEventListener("mouseleave",R),(H=a.floating)==null||H.removeEventListener("mouseleave",R),d&&L.removeEventListener("mousemove",z),L.removeEventListener("mouseenter",z),L.removeEventListener("mouseleave",T)}}},[a,l,e,c,f,d,E,U,D,r,n,y,h,w,p,i]),Gn(()=>{var I;if(l&&n&&(I=p.current)!=null&&I.__options.blockPointerEvents&&$()){S.current=!0;const T=a.floating;if(Me(a.domReference)&&T){var z;const R=Zr(a.floating).body;R.setAttribute(i3,"");const A=a.domReference,L=h==null||(z=h.nodesRef.current.find(H=>H.id===m))==null||(z=z.context)==null?void 0:z.elements.floating;return L&&(L.style.pointerEvents=""),R.style.pointerEvents="none",A.style.pointerEvents="auto",T.style.pointerEvents="auto",()=>{R.style.pointerEvents="",A.style.pointerEvents="",T.style.pointerEvents=""}}}},[l,n,m,a,h,p,$]),Gn(()=>{n||(g.current=void 0,k.current=!1,U(),D())},[n,U,D]),x.useEffect(()=>()=>{U(),clearTimeout(v.current),clearTimeout(_.current),D()},[l,a.domReference,U,D]);const N=x.useMemo(()=>{function I(z){g.current=z.pointerType}return{onPointerDown:I,onPointerEnter:I,onMouseMove(z){const{nativeEvent:T}=z;function R(){!M.current&&!y.current&&r(!0,T,"hover")}c&&!J1(g.current)||n||f===0||k.current&&z.movementX**2+z.movementY**2<2||(clearTimeout(_.current),g.current==="touch"?R():(k.current=!0,_.current=window.setTimeout(R,f)))}}},[c,r,n,y,f]),P=x.useMemo(()=>({onMouseEnter(){clearTimeout(v.current)},onMouseLeave(I){E(I.nativeEvent,!1)}}),[E]);return x.useMemo(()=>l?{reference:N,floating:P}:{},[l,N,P])}function Nc(e,t){let n=e.filter(i=>{var o;return i.parentId===t&&((o=i.context)==null?void 0:o.open)}),r=n;for(;r.length;)r=e.filter(i=>{var o;return(o=r)==null?void 0:o.some(a=>{var l;return i.parentId===a.id&&((l=i.context)==null?void 0:l.open)})}),n=n.concat(r);return n}const WC=()=>({getShadowRoot:!0,displayCheck:typeof ResizeObserver=="function"&&ResizeObserver.toString().includes("[native code]")?"full":"none"});function jC(e,t){const n=BC(e,WC());t==="prev"&&n.reverse();const r=n.indexOf(Z1(Zr(e)));return n.slice(r+1)[0]}function iX(){return jC(document.body,"next")}function oX(){return jC(document.body,"prev")}function Np(e,t){const n=t||e.currentTarget,r=e.relatedTarget;return!r||!br(n,r)}function aX(e){BC(e,WC()).forEach(n=>{n.dataset.tabindex=n.getAttribute("tabindex")||"",n.setAttribute("tabindex","-1")})}function o3(e){e.querySelectorAll("[data-tabindex]").forEach(n=>{const r=n.dataset.tabindex;delete n.dataset.tabindex,r?n.setAttribute("tabindex",r):n.removeAttribute("tabindex")})}const VC={border:0,clip:"rect(0 0 0 0)",height:"1px",margin:"-1px",overflow:"hidden",padding:0,position:"fixed",whiteSpace:"nowrap",width:"1px",top:0,left:0};let lX;function a3(e){e.key==="Tab"&&(e.target,clearTimeout(lX))}const l3=x.forwardRef(function(t,n){const[r,i]=x.useState();Gn(()=>(LC()&&i("button"),document.addEventListener("keydown",a3),()=>{document.removeEventListener("keydown",a3)}),[]);const o={ref:n,tabIndex:0,role:r,"aria-hidden":r?void 0:!0,[yu("focus-guard")]:"",style:VC};return x.createElement("span",tg({},t,o))}),qC=x.createContext(null),s3=yu("portal");function sX(e){e===void 0&&(e={});const{id:t,root:n}=e,r=Rv(),i=cX(),[o,a]=x.useState(null),l=x.useRef(null);return Gn(()=>()=>{o==null||o.remove(),queueMicrotask(()=>{l.current=null})},[o]),Gn(()=>{if(!r||l.current)return;const s=t?document.getElementById(t):null;if(!s)return;const u=document.createElement("div");u.id=r,u.setAttribute(s3,""),s.appendChild(u),l.current=u,a(u)},[t,r]),Gn(()=>{if(!r||l.current)return;let s=n||(i==null?void 0:i.portalNode);s&&!Me(s)&&(s=s.current),s=s||document.body;let u=null;t&&(u=document.createElement("div"),u.id=t,s.appendChild(u));const c=document.createElement("div");c.id=r,c.setAttribute(s3,""),s=u||s,s.appendChild(c),l.current=c,a(c)},[t,n,r,i]),o}function uX(e){const{children:t,id:n,root:r=null,preserveTabOrder:i=!0}=e,o=sX({id:n,root:r}),[a,l]=x.useState(null),s=x.useRef(null),u=x.useRef(null),c=x.useRef(null),f=x.useRef(null),d=a==null?void 0:a.modal,h=a==null?void 0:a.open,m=!!a&&!a.modal&&a.open&&i&&!!(r||o);return x.useEffect(()=>{if(!o||!i||d)return;function p(w){o&&Np(w)&&(w.type==="focusin"?o3:aX)(o)}return o.addEventListener("focusin",p,!0),o.addEventListener("focusout",p,!0),()=>{o.removeEventListener("focusin",p,!0),o.removeEventListener("focusout",p,!0)}},[o,i,d]),x.useEffect(()=>{o&&(h||o3(o))},[h,o]),x.createElement(qC.Provider,{value:x.useMemo(()=>({preserveTabOrder:i,beforeOutsideRef:s,afterOutsideRef:u,beforeInsideRef:c,afterInsideRef:f,portalNode:o,setFocusManagerState:l}),[i,o])},m&&o&&x.createElement(l3,{"data-type":"outside",ref:s,onFocus:p=>{if(Np(p,o)){var w;(w=c.current)==null||w.focus()}else{const y=oX()||(a==null?void 0:a.refs.domReference.current);y==null||y.focus()}}}),m&&o&&x.createElement("span",{"aria-owns":o.id,style:VC}),o&&wo.createPortal(t,o),m&&o&&x.createElement(l3,{"data-type":"outside",ref:u,onFocus:p=>{if(Np(p,o)){var w;(w=f.current)==null||w.focus()}else{const y=iX()||(a==null?void 0:a.refs.domReference.current);y==null||y.focus(),a!=null&&a.closeOnFocusOut&&(a==null||a.onOpenChange(!1,p.nativeEvent,"focus-out"))}}}))}const cX=()=>x.useContext(qC),fX="data-floating-ui-focusable",dX={pointerdown:"onPointerDown",mousedown:"onMouseDown",click:"onClick"},hX={pointerdown:"onPointerDownCapture",mousedown:"onMouseDownCapture",click:"onClickCapture"},u3=e=>{var t,n;return{escapeKey:typeof e=="boolean"?e:(t=e==null?void 0:e.escapeKey)!=null?t:!1,outsidePress:typeof e=="boolean"?e:(n=e==null?void 0:e.outsidePress)!=null?n:!0}};function pX(e,t){t===void 0&&(t={});const{open:n,onOpenChange:r,elements:i,dataRef:o}=e,{enabled:a=!0,escapeKey:l=!0,outsidePress:s=!0,outsidePressEvent:u="pointerdown",referencePress:c=!1,referencePressEvent:f="pointerdown",ancestorScroll:d=!1,bubbles:h,capture:m}=t,p=Av(),w=qr(typeof s=="function"?s:()=>!1),y=typeof s=="function"?w:s,g=x.useRef(!1),v=x.useRef(!1),{escapeKey:b,outsidePress:_}=u3(h),{escapeKey:M,outsidePress:S}=u3(m),C=x.useRef(!1),k=qr(P=>{var I;if(!n||!a||!l||P.key!=="Escape"||C.current)return;const z=(I=o.current.floatingContext)==null?void 0:I.nodeId,T=p?Nc(p.nodesRef.current,z):[];if(!b&&(P.stopPropagation(),T.length>0)){let R=!0;if(T.forEach(A=>{var L;if((L=A.context)!=null&&L.open&&!A.context.dataRef.current.__escapeKeyBubbles){R=!1;return}}),!R)return}r(!1,kY(P)?P.nativeEvent:P,"escape-key")}),$=qr(P=>{var I;const z=()=>{var T;k(P),(T=Hi(P))==null||T.removeEventListener("keydown",z)};(I=Hi(P))==null||I.addEventListener("keydown",z)}),E=qr(P=>{var I;const z=g.current;g.current=!1;const T=v.current;if(v.current=!1,u==="click"&&T||z||typeof y=="function"&&!y(P))return;const R=Hi(P),A="["+yu("inert")+"]",L=Zr(i.floating).querySelectorAll(A);let H=Me(R)?R:null;for(;H&&!wi(H);){const Z=Tr(H);if(wi(Z)||!Me(Z))break;H=Z}if(L.length&&Me(R)&&!TY(R)&&!br(R,i.floating)&&Array.from(L).every(Z=>!br(H,Z)))return;if(Vt(R)&&N){const Z=R.clientWidth>0&&R.scrollWidth>R.clientWidth,B=R.clientHeight>0&&R.scrollHeight>R.clientHeight;let j=B&&P.offsetX>R.clientWidth;if(B&&fn(R).direction==="rtl"&&(j=P.offsetX<=R.offsetWidth-R.clientWidth),j||Z&&P.offsetY>R.clientHeight)return}const G=(I=o.current.floatingContext)==null?void 0:I.nodeId,J=p&&Nc(p.nodesRef.current,G).some(Z=>{var B;return $p(P,(B=Z.context)==null?void 0:B.elements.floating)});if($p(P,i.floating)||$p(P,i.domReference)||J)return;const te=p?Nc(p.nodesRef.current,G):[];if(te.length>0){let Z=!0;if(te.forEach(B=>{var j;if((j=B.context)!=null&&j.open&&!B.context.dataRef.current.__outsidePressBubbles){Z=!1;return}}),!Z)return}r(!1,P,"outside-press")}),U=qr(P=>{var I;const z=()=>{var T;E(P),(T=Hi(P))==null||T.removeEventListener(u,z)};(I=Hi(P))==null||I.addEventListener(u,z)});x.useEffect(()=>{if(!n||!a)return;o.current.__escapeKeyBubbles=b,o.current.__outsidePressBubbles=_;let P=-1;function I(L){r(!1,L,"ancestor-scroll")}function z(){window.clearTimeout(P),C.current=!0}function T(){P=window.setTimeout(()=>{C.current=!1},Xd()?5:0)}const R=Zr(i.floating);l&&(R.addEventListener("keydown",M?$:k,M),R.addEventListener("compositionstart",z),R.addEventListener("compositionend",T)),y&&R.addEventListener(u,S?U:E,S);let A=[];return d&&(Me(i.domReference)&&(A=si(i.domReference)),Me(i.floating)&&(A=A.concat(si(i.floating))),!Me(i.reference)&&i.reference&&i.reference.contextElement&&(A=A.concat(si(i.reference.contextElement)))),A=A.filter(L=>{var H;return L!==((H=R.defaultView)==null?void 0:H.visualViewport)}),A.forEach(L=>{L.addEventListener("scroll",I,{passive:!0})}),()=>{l&&(R.removeEventListener("keydown",M?$:k,M),R.removeEventListener("compositionstart",z),R.removeEventListener("compositionend",T)),y&&R.removeEventListener(u,S?U:E,S),A.forEach(L=>{L.removeEventListener("scroll",I)}),window.clearTimeout(P)}},[o,i,l,y,u,n,r,d,a,b,_,k,M,$,E,S,U]),x.useEffect(()=>{g.current=!1},[y,u]);const D=x.useMemo(()=>({onKeyDown:k,[dX[f]]:P=>{c&&r(!1,P.nativeEvent,"reference-press")}}),[k,r,c,f]),N=x.useMemo(()=>({onKeyDown:k,onMouseDown(){v.current=!0},onMouseUp(){v.current=!0},[hX[u]]:()=>{g.current=!0}}),[k,u]);return x.useMemo(()=>a?{reference:D,floating:N}:{},[a,D,N])}function mX(e){const{open:t=!1,onOpenChange:n,elements:r}=e,i=Rv(),o=x.useRef({}),[a]=x.useState(()=>eX()),l=Nv()!=null,[s,u]=x.useState(r.reference),c=qr((h,m,p)=>{o.current.openEvent=h?m:void 0,a.emit("openchange",{open:h,event:m,reason:p,nested:l}),n==null||n(h,m,p)}),f=x.useMemo(()=>({setPositionReference:u}),[]),d=x.useMemo(()=>({reference:s||r.reference||null,floating:r.floating||null,domReference:r.reference}),[s,r.reference,r.floating]);return x.useMemo(()=>({dataRef:o,open:t,onOpenChange:c,elements:d,events:a,floatingId:i,refs:f}),[t,c,d,a,i,f])}function gX(e){e===void 0&&(e={});const{nodeId:t}=e,n=mX({...e,elements:{reference:null,floating:null,...e.elements}}),r=e.rootContext||n,i=r.elements,[o,a]=x.useState(null),[l,s]=x.useState(null),c=(i==null?void 0:i.domReference)||o,f=x.useRef(null),d=Av();Gn(()=>{c&&(f.current=c)},[c]);const h=e8({...e,elements:{...i,...l&&{reference:l}}}),m=x.useCallback(v=>{const b=Me(v)?{getBoundingClientRect:()=>v.getBoundingClientRect(),contextElement:v}:v;s(b),h.refs.setReference(b)},[h.refs]),p=x.useCallback(v=>{(Me(v)||v===null)&&(f.current=v,a(v)),(Me(h.refs.reference.current)||h.refs.reference.current===null||v!==null&&!Me(v))&&h.refs.setReference(v)},[h.refs]),w=x.useMemo(()=>({...h.refs,setReference:p,setPositionReference:m,domReference:f}),[h.refs,p,m]),y=x.useMemo(()=>({...h.elements,domReference:c}),[h.elements,c]),g=x.useMemo(()=>({...h,...r,refs:w,elements:y,nodeId:t}),[h,w,y,t,r]);return Gn(()=>{r.dataRef.current.floatingContext=g;const v=d==null?void 0:d.nodesRef.current.find(b=>b.id===t);v&&(v.context=g)}),x.useMemo(()=>({...h,context:g,refs:w,elements:y}),[h,w,y,g])}function yX(e,t){t===void 0&&(t={});const{open:n,onOpenChange:r,events:i,dataRef:o,elements:a}=e,{enabled:l=!0,visibleOnly:s=!0}=t,u=x.useRef(!1),c=x.useRef(),f=x.useRef(!0);x.useEffect(()=>{if(!l)return;const h=It(a.domReference);function m(){!n&&Vt(a.domReference)&&a.domReference===Z1(Zr(a.domReference))&&(u.current=!0)}function p(){f.current=!0}return h.addEventListener("blur",m),h.addEventListener("keydown",p,!0),()=>{h.removeEventListener("blur",m),h.removeEventListener("keydown",p,!0)}},[a.domReference,n,l]),x.useEffect(()=>{if(!l)return;function h(m){let{reason:p}=m;(p==="reference-press"||p==="escape-key")&&(u.current=!0)}return i.on("openchange",h),()=>{i.off("openchange",h)}},[i,l]),x.useEffect(()=>()=>{clearTimeout(c.current)},[]);const d=x.useMemo(()=>({onPointerDown(h){MY(h.nativeEvent)||(f.current=!1)},onMouseLeave(){u.current=!1},onFocus(h){if(u.current)return;const m=Hi(h.nativeEvent);if(s&&Me(m))try{if(LC()&&CY())throw Error();if(!m.matches(":focus-visible"))return}catch{if(!f.current&&!PY(m))return}r(!0,h.nativeEvent,"focus")},onBlur(h){u.current=!1;const m=h.relatedTarget,p=h.nativeEvent,w=Me(m)&&m.hasAttribute(yu("focus-guard"))&&m.getAttribute("data-type")==="outside";c.current=window.setTimeout(()=>{var y;const g=Z1(a.domReference?a.domReference.ownerDocument:document);!m&&g===a.domReference||br((y=o.current.floatingContext)==null?void 0:y.refs.floating.current,g)||br(a.domReference,g)||w||r(!1,p,"focus")})}}),[o,a.domReference,r,s]);return x.useMemo(()=>l?{reference:d}:{},[l,d])}const c3="active",f3="selected";function Ap(e,t,n){const r=new Map,i=n==="item";let o=e;if(i&&e){const{[c3]:a,[f3]:l,...s}=e;o=s}return{...n==="floating"&&{tabIndex:-1,[fX]:""},...o,...t.map(a=>{const l=a?a[n]:null;return typeof l=="function"?e?l(e):null:l}).concat(e).reduce((a,l)=>(l&&Object.entries(l).forEach(s=>{let[u,c]=s;if(!(i&&[c3,f3].includes(u)))if(u.indexOf("on")===0){if(r.has(u)||r.set(u,[]),typeof c=="function"){var f;(f=r.get(u))==null||f.push(c),a[u]=function(){for(var d,h=arguments.length,m=new Array(h),p=0;p<h;p++)m[p]=arguments[p];return(d=r.get(u))==null?void 0:d.map(w=>w(...m)).find(w=>w!==void 0)}}}else a[u]=c}),a),{})}}function vX(e){e===void 0&&(e=[]);const t=e.map(l=>l==null?void 0:l.reference),n=e.map(l=>l==null?void 0:l.floating),r=e.map(l=>l==null?void 0:l.item),i=x.useCallback(l=>Ap(l,e,"reference"),t),o=x.useCallback(l=>Ap(l,e,"floating"),n),a=x.useCallback(l=>Ap(l,e,"item"),r);return x.useMemo(()=>({getReferenceProps:i,getFloatingProps:o,getItemProps:a}),[i,o,a])}const wX=new Map([["select","listbox"],["combobox","listbox"],["label",!1]]);function bX(e,t){var n;t===void 0&&(t={});const{open:r,floatingId:i}=e,{enabled:o=!0,role:a="dialog"}=t,l=(n=wX.get(a))!=null?n:a,s=Rv(),c=Nv()!=null,f=x.useMemo(()=>l==="tooltip"||a==="label"?{["aria-"+(a==="label"?"labelledby":"describedby")]:r?i:void 0}:{"aria-expanded":r?"true":"false","aria-haspopup":l==="alertdialog"?"dialog":l,"aria-controls":r?i:void 0,...l==="listbox"&&{role:"combobox"},...l==="menu"&&{id:s},...l==="menu"&&c&&{role:"menuitem"},...a==="select"&&{"aria-autocomplete":"none"},...a==="combobox"&&{"aria-autocomplete":"list"}},[l,i,c,r,s,a]),d=x.useMemo(()=>{const m={id:i,...l&&{role:l}};return l==="tooltip"||a==="label"?m:{...m,...l==="menu"&&{"aria-labelledby":s}}},[l,i,s,a]),h=x.useCallback(m=>{let{active:p,selected:w}=m;const y={role:"option",...p&&{id:i+"-option"}};switch(a){case"select":return{...y,"aria-selected":p&&w};case"combobox":return{...y,...p&&{"aria-selected":!0}}}return{}},[i,a]);return x.useMemo(()=>o?{reference:f,floating:d,item:h}:{},[o,f,d,h])}function d3(e,t){const[n,r]=e;let i=!1;const o=t.length;for(let a=0,l=o-1;a<o;l=a++){const[s,u]=t[a]||[0,0],[c,f]=t[l]||[0,0];u>=r!=f>=r&&n<=(c-s)*(r-u)/(f-u)+s&&(i=!i)}return i}function xX(e,t){return e[0]>=t.x&&e[0]<=t.x+t.width&&e[1]>=t.y&&e[1]<=t.y+t.height}function _X(e){e===void 0&&(e={});const{buffer:t=.5,blockPointerEvents:n=!1,requireIntent:r=!0}=e;let i,o=!1,a=null,l=null,s=performance.now();function u(f,d){const h=performance.now(),m=h-s;if(a===null||l===null||m===0)return a=f,l=d,s=h,null;const p=f-a,w=d-l,g=Math.sqrt(p*p+w*w)/m;return a=f,l=d,s=h,g}const c=f=>{let{x:d,y:h,placement:m,elements:p,onClose:w,nodeId:y,tree:g}=f;return function(b){function _(){clearTimeout(i),w()}if(clearTimeout(i),!p.domReference||!p.floating||m==null||d==null||h==null)return;const{clientX:M,clientY:S}=b,C=[M,S],k=Hi(b),$=b.type==="mouseleave",E=br(p.floating,k),U=br(p.domReference,k),D=p.domReference.getBoundingClientRect(),N=p.floating.getBoundingClientRect(),P=m.split("-")[0],I=d>N.right-N.width/2,z=h>N.bottom-N.height/2,T=xX(C,D),R=N.width>D.width,A=N.height>D.height,L=(R?D:N).left,H=(R?D:N).right,G=(A?D:N).top,J=(A?D:N).bottom;if(E&&(o=!0,!$))return;if(U&&(o=!1),U&&!$){o=!0;return}if($&&Me(b.relatedTarget)&&br(p.floating,b.relatedTarget)||g&&Nc(g.nodesRef.current,y).some(B=>{let{context:j}=B;return j==null?void 0:j.open}))return;if(P==="top"&&h>=D.bottom-1||P==="bottom"&&h<=D.top+1||P==="left"&&d>=D.right-1||P==="right"&&d<=D.left+1)return _();let te=[];switch(P){case"top":te=[[L,D.top+1],[L,N.bottom-1],[H,N.bottom-1],[H,D.top+1]];break;case"bottom":te=[[L,N.top+1],[L,D.bottom-1],[H,D.bottom-1],[H,N.top+1]];break;case"left":te=[[N.right-1,J],[N.right-1,G],[D.left+1,G],[D.left+1,J]];break;case"right":te=[[D.right-1,J],[D.right-1,G],[N.left+1,G],[N.left+1,J]];break}function Z(B){let[j,F]=B;switch(P){case"top":{const V=[R?j+t/2:I?j+t*4:j-t*4,F+t+1],X=[R?j-t/2:I?j+t*4:j-t*4,F+t+1],O=[[N.left,I||R?N.bottom-t:N.top],[N.right,I?R?N.bottom-t:N.top:N.bottom-t]];return[V,X,...O]}case"bottom":{const V=[R?j+t/2:I?j+t*4:j-t*4,F-t],X=[R?j-t/2:I?j+t*4:j-t*4,F-t],O=[[N.left,I||R?N.top+t:N.bottom],[N.right,I?R?N.top+t:N.bottom:N.top+t]];return[V,X,...O]}case"left":{const V=[j+t+1,A?F+t/2:z?F+t*4:F-t*4],X=[j+t+1,A?F-t/2:z?F+t*4:F-t*4];return[...[[z||A?N.right-t:N.left,N.top],[z?A?N.right-t:N.left:N.right-t,N.bottom]],V,X]}case"right":{const V=[j-t,A?F+t/2:z?F+t*4:F-t*4],X=[j-t,A?F-t/2:z?F+t*4:F-t*4],O=[[z||A?N.left+t:N.right,N.top],[z?A?N.left+t:N.right:N.left+t,N.bottom]];return[V,X,...O]}}}if(!d3([M,S],te)){if(o&&!T)return _();if(!$&&r){const B=u(b.clientX,b.clientY);if(B!==null&&B<.1)return _()}d3([M,S],Z([d,h]))?!o&&r&&(i=window.setTimeout(_,40)):_()}}};return c.__options={blockPointerEvents:n},c}function SX(e={}){const{initialOpen:t=!1,placement:n="top",open:r,onOpenChange:i}=e,[o,a]=x.useState(t),l=r??o,s=i??a,u=gX({placement:n,open:l,onOpenChange:s,whileElementsMounted:Z4,middleware:[t8(8),r8({crossAxis:n.includes("-"),fallbackAxisSideDirection:"start",padding:8}),n8({padding:8})]}),c=u.context,f=rX(c,{move:!1,enabled:r==null,handleClose:_X({blockPointerEvents:!0})}),d=yX(c,{enabled:r==null}),h=pX(c),m=bX(c,{role:"tooltip"}),p=vX([f,d,h,m]);return x.useMemo(()=>({open:l,setOpen:s,...p,...u}),[l,s,p,u])}const YC=x.createContext(null),XC=()=>{const e=x.useContext(YC);if(e==null)throw new Error("Tooltip components must be wrapped in <Tooltip />");return e};function MX(e){const{children:t,...n}=e,r=SX(n);return W(YC.Provider,{value:r,children:t})}const CX=x.forwardRef(function(t,n){const{children:r,asChild:i=!1,...o}=t,a=XC(),l=r.ref,s=HC([a.refs.setReference,n,l]);return i&&x.isValidElement(r)?x.cloneElement(r,a.getReferenceProps({ref:s,...o,...r.props,"data-state":a.open?"open":"closed"})):W(EX,{ref:s,"data-state":a.open?"open":"closed",...a.getReferenceProps(t),children:r})}),EX=ie("button",{target:"e43b6sw1"})({name:"zp4mm8",styles:"all:unset"}),kX=x.forwardRef(function(e,t){const{style:n,...r}=e,i=XC(),o=HC([i.refs.setFloating,t]);return i.open?W(uX,{children:W(TX,{ref:o,style:{...i.floatingStyles,...n},...i.getFloatingProps(r)})}):null}),TX=ie("div",{target:"e43b6sw0"})({name:"10s3qs4",styles:"display:flex;flex-direction:column;border-radius:8px;box-shadow:0px 1px 4px rgba(0, 0, 0, 0.16);background-color:#ffffff;padding:16px"}),$X=e=>{const{value:t={},onChange:n,palette:r}=e,i=_a(t.color),[o,a]=x.useState(i);x.useEffect(()=>{a(i)},[i]);const l=c=>{const f={...t};Object.keys(c).forEach(d=>{f[d]=c[d]}),n==null||n(f)};return de(PX,{children:[W(RX,{children:W(NX,{type:"color",value:i,onChange:c=>l({color:gi(c.target.value)})})}),W(mL,{id:"hex",value:o,onChange:c=>{a(c);const f=gi(c);f&&l({color:f})}}),W(XR,{value:t.color,onChange:c=>l({color:c})}),de(Sa,{children:[W(io,{children:"Метод формирования палитры"}),de(yf,{value:t.method,onValueChange:c=>l({method:c}),children:[W(ws,{children:W(vf,{placeholder:"Выберете алгоритм генерации"})}),de(bs,{children:[W(Fn,{value:"apca",children:"Линейное изменение контрастности по APCA"}),W(Fn,{value:"lightness",children:"Нелинейное изменение светлоты"})]})]})]}),W(Iw,{id:"hueShift",labelText:"Смещение цветового тона",step:1,value:t.hueShift,onChange:c=>l({hueShift:c})}),W(Iw,{id:"decreaseSaturationRatio",labelText:"Коэффициент уменьшения насыщенности (%)",min:0,max:100,step:1,value:t.decreaseSaturationRatio*100,onChange:c=>l({decreaseSaturationRatio:c/100})}),W(D4,{id:"fixBase",labelText:"Зафиксировать входной цвет",checked:t.fixBase,onChange:c=>l({fixBase:c})})]})},PX=ie("div",{target:"eimdl8n2"})(({})=>({display:"grid",gap:"16px"}),""),RX=ie("div",{target:"eimdl8n1"})(({})=>({aspectRatio:16/9}),""),NX=ie("input",{target:"eimdl8n0"})({name:"1ik1hrh",styles:"height:100%;width:100%;border-radius:4px;appearance:none;padding:0;border:none;background:none;cursor:pointer;&::-webkit-color-swatch-wrapper{padding:0;}&::-webkit-color-swatch{border:none;}"}),AX=e=>{const t=e.palette.shades,[n,r]=x.useState("apca"),[i,o]=x.useState("all"),a=n==="apca"?Gr:Sl;return de(IX,{children:[de(LX,{children:[de(Sa,{children:[W(io,{children:"Метод расчёта контрастности"}),de(yf,{value:n,onValueChange:r,children:[W(ws,{children:W(vf,{})}),de(bs,{children:[W(Fn,{value:"apca",children:"APCA"}),W(Fn,{value:"wcag",children:"WCAG"})]})]})]}),de(Sa,{children:[W(io,{children:"Допустимый уровень контрастности"}),de(yf,{value:i,onValueChange:o,children:[W(ws,{children:W(vf,{})}),de(bs,{children:[W(Fn,{value:"all",children:"Все уровни"}),W(Fn,{value:"AA",children:{apca:"60+",wcag:"4.5+ (AA)"}[n]}),W(Fn,{value:"AAA",children:{apca:"75+",wcag:"7+ (AAA)"}[n]})]})]})]})]}),de(zX,{children:[W("thead",{children:de("tr",{children:[W("th",{}),t.map(l=>W("th",{children:W(h3,{children:l.number})},l.number))]})}),W("tbody",{children:t.map((l,s)=>de("tr",{children:[W("th",{children:W(h3,{children:l.number})}),t.map(u=>{const c=a(u.hex,l.hex),f=n=="apca"?i==="AA"?Math.abs(c)>=60:i==="AAA"?Math.abs(c)>=75:!0:i==="AA"?c>=4.5:i==="AAA"?c>=7:!0;return W("td",{children:f?W(OX,{style:{backgroundColor:l.hex,color:u.hex},children:c.toFixed(2)}):W(DX,{})},u.number)})]},l.number))})]})]})},IX=ie("div",{target:"ebp11lm6"})(()=>({display:"grid",gap:"16px"}),""),LX=ie("div",{target:"ebp11lm5"})(()=>({display:"grid",gridTemplateColumns:"repeat(4, 1fr)",gridTemplateRows:"auto",gap:"12px"}),""),h3=ie("div",{target:"ebp11lm4"})({name:"1az75j5",styles:"display:grid;height:48px;border-radius:4px;place-items:center;color:#a3a3a3;font-size:14px;font-weight:400"}),GC=ie("div",{target:"ebp11lm3"})({name:"n8cht6",styles:"display:grid;height:48px;border-radius:4px;place-items:center;transition:box-shadow .2s ease"}),OX=ie(GC,{target:"ebp11lm2"})({name:"ofgjbn",styles:"font-size:14px;font-weight:600"}),DX=ie(GC,{target:"ebp11lm1"})({name:"1v6lc2v",styles:"background-image:linear-gradient(-45deg, rgb(0 0 0 / 6%) 26%, rgb(0 0 0 / 3%) 0, rgb(0 0 0 / 3%) 50%, rgb(0 0 0 / 6%) 0, rgb(0 0 0 / 6%) 75%, rgb(0 0 0 / 3%) 0, rgb(0 0 0 / 3%));transition:box-shadow .2s ease"}),zX=ie("table",{target:"ebp11lm0"})({name:"1kcekys",styles:"border-collapse:collapse;border-color:inherit;text-indent:0;table-layout:fixed;width:1240px;& th, & td{padding:3px;}"}),Ip=ie("section",{target:"e1ey612n0"})(({area:e})=>({...e&&{gridArea:e}}),""),FX=e=>{const{palette:t}=e,[n,r]=x.useState("okhsl"),i=t.shades.slice(1,-1);return de(BX,{children:[de(Sa,{children:[W(io,{children:"Цветовое пространство"}),de(yf,{value:n,onValueChange:r,children:[W(ws,{children:W(vf,{placeholder:"Выберете цветовое пространство"})}),de(bs,{children:[W(Fn,{value:"okhsl",children:"OKHSL"}),W(Fn,{value:"hsl",children:"HSL"})]})]})]}),de(HX,{children:[W(Ip,{area:"huePlot",children:W(Tp,{data:i,getX:o=>o.number,getY:o=>o[n].h,xDomain:[0,1e3],yDomain:[0,360],xLabel:"tone",yLabel:"hue"})}),W(Ip,{area:"saturationPlot",children:W(Tp,{data:i,getX:o=>o.number,getY:o=>o[n].s,xDomain:[0,1e3],yDomain:[0,1],xLabel:"tone",yLabel:"saturation"})}),W(Ip,{area:"lightnessPlot",children:W(Tp,{data:i,getX:o=>o.number,getY:o=>o[n].l,xDomain:[0,1e3],yDomain:[0,1],xLabel:"tone",yLabel:"lightness"})})]})]})},BX=ie("div",{target:"e93cz3n1"})(({})=>({display:"flex",flexDirection:"column",alignItems:"flex-start",rowGap:"24px"}),""),HX=ie("div",{target:"e93cz3n0"})(({})=>({display:"flex",columnGap:"24px"}),""),UX=e=>`${aa(e.h)} ${aa(e.s)} ${aa(e.l)}`,WX=e=>`${aa(e.h)} ${aa(e.s)} ${aa(e.l)}`;function jX(e,t={}){const{size:n=50,orientation:r="vertical"}=t,i=document.createElement("canvas"),o=i.getContext("2d");return i.width=r==="vertical"?n:n*e.shades.length,i.height=r==="horizontal"?n:n*e.shades.length,e.shades.forEach((a,l)=>{o.fillStyle=a.hex,o.fillRect(r==="horizontal"?n*l:0,r==="vertical"?n*l:0,n,n)}),new Promise((a,l)=>{i.toBlob(s=>s?a(s):l())})}const VX=e=>{const{palette:t}=e,[n,r]=x.useState(!1),[i,o]=x.useState(!1);return de(qX,{children:[de(YX,{children:[W(KX,{children:W(D4,{id:"highlight",labelText:"Подсветить наиболее близкий тон",checked:n,onChange:r})}),W(GX,{"data-copied":i,onClick:l=>{jX(t).then(s=>window.navigator.clipboard.write([new ClipboardItem({[s.type]:s})])).then(()=>{o(!0),setTimeout(()=>{o(!1)},1e3)})},children:t.shades.map(l=>{const s=Math.abs(l.apca.blackOn)>Math.abs(l.apca.whiteOn)?"black":"white",u=p3(l);return de(MX,{placement:"right",children:[W(CX,{asChild:!0,children:W(QX,{css:G5({color:s,backgroundColor:l.hex},"",""),"data-highlight":n&&t.closestShade.number===l.number,children:l.number},l.number)}),W(kX,{children:Lp.map(c=>de("div",{children:[W("b",{children:c.label}),W("span",{children:": "}),W("span",{children:u[c.key]})]},`${l.number}:${c.key}`))})]})})})]}),W(ZX,{children:de(JX,{children:[W("thead",{children:W(m3,{children:Lp.map(l=>W(eG,{children:W(nG,{children:l.label})},l.key))})}),W("tbody",{children:t.shades.map(l=>{const s=p3(l);return W(m3,{children:Lp.map(u=>W(tG,{children:W(KC,{children:s[u.key]})},`${l.number}:${u.key}`))},l.number)})})]})})]})},p3=e=>({hex:e.hex,wcag:`${e.wcag.onBlack.toFixed(2)}/${e.wcag.onWhite.toFixed(2)}`,apca:`${e.apca.onBlack.toFixed(1)}/${e.apca.onWhite.toFixed(1)}`,hsl:UX(e.hsl),okhsl:WX(e.okhsl),deltaE:e.delta.toPrecision(4)}),Lp=[{key:"hex",label:"HEX"},{key:"wcag",label:"WCAG"},{key:"apca",label:"APCA"},{key:"okhsl",label:"OKHSL"},{key:"deltaE",label:"deltaE"}],qX=ie("div",{target:"e3vgg5a12"})(({})=>({display:"grid",gridTemplateColumns:"1fr 2fr",gap:"24px"}),""),YX=ie("div",{target:"e3vgg5a11"})({name:"0",styles:""}),XX=M$`
    0% {
        box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.5);
    }
    90% {
        box-shadow: 0 0 40px rgba(0, 0, 0, 0.16);
    }
    100% {
        box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.16);
    }
`,GX=ie("div",{target:"e3vgg5a10"})(({})=>({display:"flex",flexDirection:"column",borderRadius:"8px",boxShadow:"0px 1px 4px rgba(0, 0, 0, 0.16)",cursor:"pointer",'&[data-copied="true"]':{animation:`${XX} 1s`}}),""),KX=ie("div",{target:"e3vgg5a9"})(({})=>({height:"64px",display:"flex",alignItems:"center",paddingInline:"16px"}),""),QX=ie("div",{target:"e3vgg5a8"})(({})=>({height:"48px",display:"flex",alignItems:"center",paddingInline:"16px","&:first-of-type":{borderTopLeftRadius:"8px",borderTopRightRadius:"8px"},"&:last-of-type":{borderBottomLeftRadius:"8px",borderBottomRightRadius:"8px"},'&[data-highlight="true"]':{zIndex:1,boxShadow:"0 0 0 1px white, 0 0 0 3px black"}}),""),ZX=ie("div",{target:"e3vgg5a7"})(({})=>({display:"flex",flexDirection:"column"}),""),JX=ie("table",{target:"e3vgg5a6"})(({})=>({borderCollapse:"collapse",borderSpacing:0}),""),m3=ie("tr",{target:"e3vgg5a5"})(({})=>({}),""),eG=ie("th",{target:"e3vgg5a4"})(({})=>({padding:0}),""),tG=ie("td",{target:"e3vgg5a3"})(({})=>({padding:0}),""),KC=ie("div",{target:"e3vgg5a1"})(({})=>({display:"flex",alignItems:"center",height:"48px",paddingInline:"8px",flexGrow:1,flexBasis:0}),""),nG=ie(KC,{target:"e3vgg5a0"})(({})=>({height:"64px"}),""),rG=()=>{const[e,t]=x.useState({color:gi("#d03531"),fixBase:!1,method:"apca",hueShift:5,decreaseSaturationRatio:.15}),n=zR({baseColor:_a(e.color),method:e.method,fixBase:e.fixBase,hueShift:e.hueShift,decreaseSaturationRatio:e.decreaseSaturationRatio});return de(mk,{children:[W(wR,{}),de(iG,{children:[W(uG,{children:"Генератор цветовых палитр"}),de(oG,{children:[W(lG,{children:W(VX,{palette:n})}),W(aG,{children:W(FX,{palette:n})}),W(sG,{children:W(AX,{palette:n})})]}),W(fG,{children:W($X,{value:e,onChange:r=>{t(r)},palette:n})}),de(cG,{children:["@nikolanalokin ",new Date().getFullYear()]})]})]})},iG=ie("div",{target:"e1544z0x8"})(()=>({maxWidth:"100%",display:"grid",gridTemplateColumns:"1fr 384px",gridTemplateAreas:`
            "header header"
            "main aside"
            "footer aside"
        `}),""),oG=ie("main",{target:"e1544z0x7"})({name:"kamy6d",styles:"grid-area:main;display:grid;padding-inline:48px;padding-block:24px;gap:24px"}),Iv=ie("section",{target:"e1544z0x6"})({name:"0",styles:""}),aG=ie(Iv,{target:"e1544z0x5"})({name:"0",styles:""}),lG=ie(Iv,{target:"e1544z0x4"})({name:"0",styles:""}),sG=ie(Iv,{target:"e1544z0x3"})({name:"0",styles:""}),uG=ie("header",{target:"e1544z0x2"})({name:"l7lj7f",styles:"grid-area:header;padding-inline:48px;padding-block:24px;font-size:18px;font-weight:600;border-block-end:1px solid"}),cG=ie("footer",{target:"e1544z0x1"})({name:"191altr",styles:"grid-area:footer;padding-inline:48px;padding-block:24px;font-size:14px;border-block-start:1px solid"}),fG=ie("aside",{target:"e1544z0x0"})({name:"19eh3mw",styles:"grid-area:aside;padding-inline:24px;padding-block:24px;font-size:14px;border-inline-start:1px solid"}),dG=X5(document.getElementById("root"));async function hG(){dG.render(W(x.StrictMode,{children:W(rG,{})}))}hG();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
